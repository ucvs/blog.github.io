{"meta":{"title":"欢迎来到唯美的网站","subtitle":null,"description":"世界上有两种人，一种懂二进制，一种不懂二进制。","author":"Aestheticism","url":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848"},"pages":[{"title":"","date":"2018-03-19T17:58:29.969Z","updated":"2018-03-19T17:58:29.969Z","comments":true,"path":"404.html","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/404.html","excerpt":"","text":"��ӭ����Ψ������վ The page you are requesting does not exist!"},{"title":"关于唯美","date":"2013-01-18T00:26:01.000Z","updated":"2018-07-15T19:27:46.661Z","comments":true,"path":"about/index.html","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/about/index.html","excerpt":"","text":"关于唯美：1.我喜欢柔和的钢琴，还有爵士吉他声2.我喜欢夏天的夜晚，看得见荷塘月色，却拒绝白日阳光的猛烈3.有花香，有书香，有我歌唱4.海风是咸咸的，思念是甜甜的，海风，思念，我，一个大三度和弦5.山高水远隔天涯，月色跟随水舞花。明媚日出，我把思念织成画中文名字：陈唯美出生日期：19XX年5月13日（农历）休闲嗜好：作曲填词﹑写藏头诗﹑打乒乓球﹑变魔术、玩乐器、练武术专精乐器：钢琴﹑吉他﹑贝司﹑电子琴﹑尤克里里﹑古筝﹑陶笛﹑竖琴﹑葫芦丝﹑横笛﹑卡祖笛﹑箫﹑爵士鼓、巴乌、口琴、手风琴﹑管风琴﹑曼陀铃﹑古埙﹑卡林巴欣赏艺人：许山高/陈唯美/张信哲尊敬的人：陈林波/高芳/李梅芬/等等……苦恼的事：想做的事越来越多，但时间永远都不够最爽的事：每一次作品的完成最爱曲风：中国风/R&amp;B最常说的话: 岂能尽如人意,但求无愧于心最大心愿：走遍世界每一个角落，给妈妈和家人安定的生活。最爱收藏：古董家俱/古董灯/球鞋/帽子/各种乐器/各种玉器最爱菜肴：庐山云雾/奶白枣宝/双色软糖/糖炒大扁/可可桃仁/蜜饯菠萝/蜜饯红果/蜜饯葡萄/蜜饯马蹄/金糕卷/桂花辣酱芥/紫香干/什香菜/龙凤描金攒盒龙盘柱/五香酱鸡/盐水里脊/红油鸭子/麻辣口条/桂花酱鸡/蕃茄马蹄/油焖草菇/椒油银耳/人参果核桃酪/松树猴头蘑/墨鱼羹/荷叶鸡/牛柳炒白蘑/挂炉沙板鸡/麻仁鹿肉串/稀珍黑米粥唯美的诗歌作品：唯美的音乐作品：http://user.qzone.qq.com/542616848/blog/1337430374唯美的网站：http://mybk.xyz唯美的素描速写：http://user.qzone.qq.com/542616848/blog/1281364940唯美粉丝团（播放密码请私下索要）：http://v.youku.com/v_show/id_XNzQzMTMyMDY0.html?spm=a2h3j.8428770.3416059.1唯美酷跑https://itunes.apple.com/cn/app/唯美酷跑/id1247256118?mt=8唯美的故事: 小时候，唯美做过很多的探索，诗词音律，琴棋书画，计算机。 小学一三五年级几乎是全年不去上学，而二四六年级却一直是全校第一名，奥数也考了满分，被老师称为不学习的奇人和诗仙。 2006年，唯美成功发布了第一个静态网站，利用IIS将自己的电脑架设成服务器，把IP地址发给同学，同学成功访问到了网站，当时是一名小学生。 2008年，成功制作复制卡，破解自己的移动Sim卡用户识别密钥，写到另一张手机卡上，实现两张手机卡共用一个号码，比如拨打同一个手机号码，两台手机同时响起，同时接听电话时候，只要一端不说话，可以窃听另一端的通话。当然这端如果说话，可以实现三方通话。 2008年，使用易语言开发出DNF游戏辅助程序， 2009年，心血来潮，决定注册域名，在IDC处购买了服务器空间，网站正式上线，期间和阿里巴巴，腾讯，百度开发者平台，人人，新浪，谷歌等均有合作或技术平台的对接，引入了谷歌广告，腾讯网页游戏，在线电视，评论系统，在线商城，第三方登录等多种多样的功能建造了一个综合型的网站，后来工信部要求网站需要备案，就成了第一批参与工信部备案的人。 对于一个没人带着，完全靠自己摸索的学生来说，要面临的挑战是很大的，在2010年做支付宝/财付通网站支付功能的商户对接的时候，由于是第一批做商户对接的用户，当时支付宝的技术不成熟，需要和支付宝公司技术人员同步开发，且当时百度上没有任何前人已有的经验可以提供借鉴。支付宝只能委派公司技术人员奕希加了唯美好友，在他的指导下，双方同步开发才完成了支付接口的开发。同时在百度开发者平台做了百度广告，百度统计等多个业务的接入。令唯美想不到的是，原来百度公司一直有在留意着第一批内测合作的开发者的成长。 2013年12月17日，百度要在厦门建立分公司，向唯美正式发出了求贤信，但当时知道自己的能力，而且高中都还没毕业，没信心敢去面试，潜下心来参加了高考，埋下了一颗要再去BAT心的种子。 然而高考并不顺利，去了一个很普通的学校，但这并不能阻止唯美对知识的渴望，唯美开始每天抱着梦想跑自习室，宿舍课室饭堂三点一线，不和别人比智力，只和别人比努力，从刚开始的几个同学一起去学习，到最后只剩下唯美一人成为独行侠。功夫不负有心人，大一时候拿到了高级软件开发工程师国际认证证书，学习成绩也成为了母校的全校第一名。 2014年5月，唯美的文章被《湛江日报》和《湛江新闻网》同时刊登并获得稿费。 2015年，参与了全球一百强企业南方电网旗下的广东立胜外勤管理系统开发。 2016-2017年，第一作者/独立发表的文章和书籍被国家图书馆，深圳图书馆，上海图书馆，等等全国各大图书馆，首届中文核心期刊，中国核心期刊（遴选）数据库，中国科技论文在线，美国《剑桥科学文摘》，波兰《哥白尼索引》，美国《乌利希国际期刊指南》，中国电子学会会刊，《湛江日报》，《湛江新闻网》，中国知网等国内外几十个数据库收录。文章阅读高层分布:政府届:全国人大、全国政协、国务院部委及相关机构、各省省委书记、省长/国外驻华使（领）馆，产业与工商企业届:国资委大型企业150家/3000多家上市公司/乡镇企业500强/民营企业500强/全国优秀与知名企业领导人及管理层。知识与学术届:全国211与985院校的科学与研究院、工程院系统/全国各高校校（院）长、教学与研究人员/管理咨询公司与培训机构/全国各大图书馆及资料室等 大学期间和北大清华，美国公立三巨头UIUC，新加坡SUTD，香港、台湾，等多地名校的国际性比赛中获得过六十多个奖，主持了几个科研项目获得广东省财政厅自然科学类科研经费扶持。 2017年4月，参与GDOI全国奥林匹克信息学竞赛（NOI广东省队选拔）考试工作。同年10月清华大学取代麻省理工成为计算机专业的全球第一，而奥林匹克信息学竞赛则是为清华大学计算机专业重点班（姚班）筛选免试保送资格，未获得保送免试保送清华大学重点班的一部分人将获得（高考加分照顾）享受加5-30分，和保送大学资格；其它竞赛获奖者不享受此待遇。 项目一、 Special Funds for the Cultivation of Guangdong College Students’ Scientific and Technological Innovation.（“Climbing Program” Special Funds.）,The Natural Science Fund Project Scientific Research Project，Project Name：A Smartphone-based Research of Colloidal-gold Strip Quantitative Detector，Project Number: pdjh2016b0831 3万元 起止年月：2016 年 3 月 — 2016 年 12 月），项目已于 2016 年 12 月顺利完成和科研结题。 该项目借助了常见的硬件设备，如智能手机摄像头，进行图片数据采集，然后将采集回来的数据转化为灰度图，再通过阈值化、形态学操作、提取轮廓等一系列操作，进行图像分割（遗传算法的快速模糊 C-均值聚类算法），得到特征值，计算 RIOD，最后得到相应的浓度值，并通过相应的程序代码，转化为可视化界面。 奖项成果:2016年广东大学生科技创新专项培育资金科研立项，2017年挑战杯科技竞赛一等奖、2016年数媒科技竞赛全国二等奖及中国“互联网+”大学生创新创业大赛优胜奖(可通过项目名称百度检索到政府公示文件)。另发第一作者/独立发表有三篇科研论文。且大赛是由教育部、团中央等等部门推动进行，科研项目基金是由省财政厅出资资助，全国所有985/211名校均参与，含金量极高，而不是那些普通的一级学会或公司资助的普通比赛所能比拟。在团队中，以能者多劳作为分工依据。项目中，本人既是科研基金项目负责人、基金申报文件的撰写者，又是项目研发人，科研成果展示人及论文成果撰稿人。 实现原理：该项目借助了常见的硬件设备，如智能手机摄像头，进行图片数据采集，然后将采集回来的数据转化为灰度图，再通过阈值化、形态学操作、提取轮廓等一系列操作，进行图像分割（遗传 FCM 聚类算法），得到特征值，计算 RIOD，最后得到相应的浓度值，并通过相应的程序代码，转化为可视化界面。 核心技术： 1、图形图像处理技术对金标试纸的数据采集。 2、JNI接口调用C++编写的图像处理算法对试纸条图片进行图像处理 3、图像处理算法中采用遗传快速FCM聚类算法进行图像分割 4、灰度值的特性到特征值的转换。 5、RIOD值、浓度值的计算。 应用领域：在医学方面可以检测瘦肉精、乙肝病毒、禽流感、甲型流感、鼠疫、寄生虫、艾滋病等；在农业方面，可以检测水质的酸碱度、土壤与肥料、农药残留物等；在工业方面，水质污染的检测，内置接地回路PH值检测，抗氢氟酸PH电极检测等，应用的场景也非常多，如:化工、纺织、冶金等领域的化学反应中，均需要对PH值进行随时的抽样检测。 项目二、 （1）Special Funds for the Cultivation of Guangdong College Students’ Scientific and Technological Innovation.（“Climbing Program” Special Funds.）,The Natural Science Fund Project Scientific Research Project，Project Name：A Gesture Recognition and K-means Calculation-Based Design of the Safety Companion Application for Elderly People，Project Number: pdjh2017b0838 3万元 起止年月：2017 年 4 月 — 2017 年 12 月），项目已于 2017 年 12 月顺利完成和科研结题。 （2）2016年广东大学生创新创业计划训练项目立项，项目编号：201612574003，1万元。 起止年月：2016 年 4 月 — 2016 年 12 月），项目已于 2016 年 12 月顺利完成和科研结题。 基于姿态识别与k-means聚类算法的老年人安全伴侣是一款关爱老年人产品，它具有心率、血压、收音机、老人跌倒姿态识别、障碍物距离检测、手电筒、定时提醒等多种多样老年人常用功能，为老年人用户带来了一份快乐的同时，也为年轻人带来了一份安心。 实现原理：以项目的其中一个功能为例，对X、Y、Z方向的三轴加速度传感器采集的数据进行预处理（去噪），再通过加速度数值方向分量校正、加窗、小波分解、特征值提取融合，得到特征值，并根据特征选择搜索特征子集，经过学习算法中选择出好的特征子集，放入SVM分类器，最后识别出结果。其中出现不好的特征子集，程序会重新返回到特征选择搜索模块，特征评价模块对特征选择搜索模块做出特征值的性能评价，学习算法则运用数学上的思想，类似于二分法，不断的向特征评价提出“假设”，通过不断的迭代运算，使得结果越来越逼近于最优解。在特征提取融合模块中，程序会分别做两件事，一是进行特征提取融合，二是生成每个类的类模板，计算训练类模板和所有样本间的距离，训练SVM分类器并反馈检测数据给检测分析库。而检测分析库的数据，则与华南理工大学整理的SCUT-NAA数据库定期内不断做对比优化，完善服务器端的人体动作数据库 奖项成果：2017年广东大学生科技创新专项培育资金科研立项，2016年广东大学生创新创业计划训练项目立项资助(可通过项目名称百度检索到政府公示文件)。另第一作者发有科研论文两篇，一篇被首届中文核心期刊收录，一篇被国家双奖期刊收录。且大赛是由教育部、团中央等等部门推动进行，科研项目基金是由省财政厅出资资助，全国所有985/211名校均参与，含金量极高，而不是那些普通的一级学会或公司资助的普通比赛所能比拟。该科研成果（第一作者）所发论文一篇是首届中文核心期刊，该期刊收录的文章具备评比教授的高级职称资格（不是所有期刊的论文都可以评比高级（教授）职称资格），另一篇科研论文（第一作者）发表在国家双奖期刊（即在国家重点期刊里再评出来的双奖），且可在中国知网查验真伪。在团队中，以能者多劳作为分工依据。项目中，本人既是科研基金项目负责人、基金申报文件的撰写者，又是项目研发人，科研成果展示人及论文成果撰稿人。 核心技术： 1、姿态识别数据采集及检测模块的设计与实现。 2、小波分解加窗数据及特征值提取模块的编写与实现。 3、特征值选择和学习算法的分析选择模块编写。 4、手机端应用程序开发。 5、人机交互界面的优化。 项目三、 “知心睡眠”——大学生睡眠检测APP 2017年广东大学生创新创业计划训练项目立项，项目编号：201712574011，1万元。 起止年月：2017 年 4 月 — 2017 年 12 月），项目已于 2017 年 12 月顺利完成和科研结题。 项目介绍：一款通过传感器检测和分析睡眠情况并给出专业建议以及定制化推送符合心理学音乐的安卓应用。 项目四、 《唯美酷跑》手游已上线苹果商店（Apple Store应用描述里留了作者简介与联系方式），该手游目前通过由教育部高等教育司、苹果公司主办的移动应用创新赛选拔，获得2017年苹果公司出资提供的苹果夏令营项目辅导资格。 大赛是由中国教育部、苹果公司主办，国内985/211名校均有参与，且美国UIUC（美国公立三巨头）、新加坡SUTD、香港理工大学等名校均投来了参赛作品，国际性的赛事，含金量极高，而不是那些普通的一级学会或公司资助的普通比赛所能比拟。 项目中，本人既是参赛项目负责人、比赛申报文件的撰写者，又是项目研发人，项目成果展示人。 唯美酷跑的程序实现注重高内聚低耦合的开发思想，其功能类主要分为： 1、物理标识类：利用二进制的位或比较，判断物理环境与角色的碰撞效果。 2、角色类：遍历图片，实现角色奔跑的四段动画（四组动画图）的切换。 3、道具生成工厂类：利用IOS特有的定时器，控制道具出现时间，随机数控制道具出现数量，使得道具在屏幕间不规则出现。 4、游戏背景类：使用三个可拼接的背景图片，使其在x坐标规律性递减，通过背景的移动使得人物感觉是在从左往右跑，同时当第一张图片超出屏幕区域时，第二张图片正处于屏幕之中，此时，消除第一张图片所占用的栈内存空间，从而在栈内存里分配一个新的图片存储空间，即第三张图片，通过图片的销毁与生成，如此循环，使得背景实现无缝连接效果。 5、游戏场景类：利用物理标识类判断角色与场景的关系，从而实现游戏的特色效果。 6、平台类：随机数产生左中右三部分拼接部分，利用坐标关系实现平台缝接。 7、平台工厂类：平台类的x坐标产生以及内存的创建与销毁，在这个类完成。 8、物理碰撞系统：场景的物理标识间进行位或运算得到的值，与角色和平台之间进行位或运算得到的值进行比较，从而确定物体间是否有碰撞，并且在游戏场景类中，对碰撞事件进行分析，以及做出代码上的处理。 责任描述： 独立完成整个IOS项目开发，所有类的编写（使用swift语言，基于Xcode开发）感谢生命中能够遇到你们: 感谢生命中能够遇到你们，在成长，探索的路上，一直在默默的给唯美指点迷津和提供帮助。腾讯《王者荣耀》技术总监邓君，微软（中国）技术经理、泰课在线老板张文，游戏蛮牛黄钧任，将Unity引进中国的Unity中国负责人、中国第一本《Unity3D游戏开发》作者宣雨松，亚马逊游戏开发畅销书排行榜第一名《使用C#和Unity开发多平台游戏》作者蔡俊鸿，中华英才网、领英HR雅静，指导中国代表队浙大校队拿下ACM国际程序设计大赛全球总决赛第一名的浙江大学计算机学院院长陈越女神，浙江大学计算机学院主任张克俊院士。佛山日报刘慧莹，佛山电视台严梓菁、湛江日报李莉、中央电视台撒贝宁、清华大学贾荣宽、ACM亚洲区域赛冠军杨思翔、邓丝雨。"},{"title":"categories","date":"2018-03-16T20:52:19.000Z","updated":"2018-03-16T21:03:16.114Z","comments":false,"path":"categories/index.html","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/index.html","excerpt":"","text":""},{"title":"留言板","date":"2014-03-19T12:43:47.000Z","updated":"2018-03-19T13:28:37.335Z","comments":true,"path":"message/index.html","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/message/index.html","excerpt":"","text":"欢迎您来到留言板，但我们更鼓励您去“关于我”板块下面留言"},{"title":"search","date":"2018-03-15T22:37:50.000Z","updated":"2018-03-15T22:37:50.611Z","comments":true,"path":"search/index-1.html","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/search/index-1.html","excerpt":"","text":""},{"title":"search","date":"2018-03-15T23:35:07.000Z","updated":"2018-03-15T23:35:07.638Z","comments":true,"path":"search/index-2.html","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/search/index-2.html","excerpt":"","text":""},{"title":"search","date":"2018-03-16T08:03:35.000Z","updated":"2018-03-16T08:03:35.042Z","comments":true,"path":"search/index-3.html","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/search/index-3.html","excerpt":"","text":""},{"title":"search","date":"2018-03-15T22:31:29.000Z","updated":"2018-03-15T22:31:29.882Z","comments":true,"path":"search/index.html","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/search/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-03-16T20:56:45.000Z","updated":"2018-03-16T20:56:45.814Z","comments":true,"path":"tags/index.html","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"AndroidManifest Ambiguity方案实现","slug":"ManifestAmbiguity","date":"2018-03-21T03:56:28.000Z","updated":"2018-06-08T11:39:56.197Z","comments":true,"path":"2018/03/21/ManifestAmbiguity/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2018/03/21/ManifestAmbiguity/","excerpt":"","text":"最近还是有些忙的, 刚好需要做资源保护这一方面的东西, 顺便记录一下Ambiguity方案的一个实现过程, 回头自己忘了也可以看下, 不过资源保护这东西, 针对性还是比较强的,需要不断地有新套路, 不过对于不懂资源文件的人来说还是有一定阻挡作用的… AndroidManifest Ambiguity这个方案实际上就是一张图: 这张图的大致意思是, AndroidManifest.xml中的属性是有对应的属性名(name)和对应的Res Id号的, 比如android:name=”xxxx”这个属性, 有一个对应的属性名(不是android:name)和对应的Res Id号(就是我们反编译经常看到的0Xxxxxxxx之类的), 当Res Id号为0(或者为一个不合法的值,比如0x01017FFF), Android系统是不会对齐进行解析的, 会无视这个属性, 但是对于apktool来说, 是会解析这个属性的, 这样的话虽然反编译的时候没什么问题, 但是在重打包的时候会因为非法Res Id导致重打包失败, 从而对app进行一定程度的保护。 那么, 要搞懂或者实测这个方案, 先要对AndroidManifest.xml这个文件了解才行, 一般说AndroidManifest.xml, 都会用看雪的某张图:以一个示例APK的AndroidManifest.xml进行说明重点的部分 总体的(就是上面那张神图的中间的方块): Magic Number -&gt; 4Bytes, 固定的值0x00080003, 可以看做标识, 上图前四个字节 File Size -&gt; 4Bytes, 整个AndroidManifest.xml的字节数, 在上图是0x00000938 接下来就是StringChunk了, 我把图稍微截大点: Chunk Type -&gt; 4Bytes, 固定的值0x001C0001, 上图的0x8-0xB位 Chunk Size -&gt; 4Bytes, 整个StringChunk的大小, 上图的0xC-0xF位0x0000550 String Count -&gt; 4Bytes, 字符串数目, 上图的0x10-0x13位0x00000022, 表示有34个字符串 Style Count -&gt; 4Bytes, 样式数目, 上图的0x14-0x17位0x00000000, 表示有0个样式 UnKnown -&gt; 4Bytes, 固定值0x00000000, 没用的东西 String Pool Offset -&gt; 4Bytes, 字符串起始偏移, 这个是相对StringChunk的, 以上图为例, String Pool Offset为0x000000A4, 则起始偏移 = A4 + 8 = AC Style Pool Offset -&gt; 4Bytes, 样式起始偏移, 也是相对StringChunk的, 上图0x20-0x23为0x00000000, 表示没有Style String Offset数组 -&gt; String Count * 4Bytes, 以上图为例, 大小为 0x22 * 4 = 88, 上图的String Offset数组范围为0x24 - 0xAB Style Offset数组 -&gt; Style Count * 4Bytes, 跟String Offset相同, 这个例子明显没有这一块 String Data -&gt; 字符串数据块, 下面分析 Style Data -&gt; 样式数据块, 下面分析 首先分析String Offset数组, 上面我们说了范围是0x24-0xAC, 那么先取0x24-0x27这四位, 即第一个字符串的偏移, 为0x00000000, 即为0 + String Pool Offset + 8 = 0 + A4 + 8 = AC, 那么看一下上图的0xAC位: 0B 00 76 00 65 00 72 00 73 00 .... 这里我们要说明一个字符串在AndroidManifest.xml的存储方式是UTF16, 并且前面是先存字符数目, 最后填充00(相当于\\0这种东西): 比如有一个字符串fuck, 转为十六进制ASCII码即为66 75 63 6B, 转为UTF16则为66 00 75 00 63 00 6B 00, fuck字符为四个, 那么加上04 00, 最后填充00 00, 就成了: // fuck的最终存储形式 04 00 66 00 75 00 63 00 6B 00 00 00 这里我圈了出来: 对于Style, 跟String的分析是一样的, 可以自己拿个APK看下。 然后就是ResourceChunk了: Chunk Type -&gt; 4Bytes, 固定值0x00080180, 看0x00000558 - 0x0000055B位 Chunk Size -&gt; 4Bytes, 整个ResourceChunk的大小, 以上图为例, 0x0000055C-0x0000055F位, 为0x0000002C ResourceIds数组 -&gt; ChunkSize / 4 - 2个, 每个4Bytes, 表示对应的Res Id值 中间有个String NameSpace Chunk 部分, 可以跳过也可以停下来看下, 范围为0x00000584 - 0x0000059B: Chunk Type -&gt; 4Bytes, 固定值0x00100100 Chunk Size -&gt; 4Bytes, 这里上图的值为18即24个字节, 所以范围是0x00000584-0x0000059B Line Number -&gt; 4Bytes Unknown -&gt; 4Bytes Prefix -&gt; 4Bytes Uri -&gt; 4Bytes 最后是TagChunk部分, TagChunk有很多个Chunk(Start Tag Chunk 或者End Tag Chunk), 按示例是从0x0000059C开始: Chunk Type -&gt; 4Bytes, 有两个固定值, 为0x00100102表示这是一个Start Tag, 0x00100103表示这是一个End Tag Chunk Size -&gt; 4Bytes Line Number -&gt; 4Bytes, 不知道什么用 Unknown -&gt; 4Bytes, 固定值0xFFFFFFFF, 没用的东西 Namespace uri -&gt; 4Bytes, 这个可以不管, 对应上面的String NameSpace Chunk Name -&gt; 4Bytes, 对应StringChunk的字符串索引 Flags -&gt; 4Bytes, 固定值0x00140014, 没什么用 Attr Count -&gt; 4Bytes, 这个Tag的属性数目 Class Attribute -&gt; 4Bytes, 不知道干什么 Attr 数组 -&gt; 数组元素数目为Attr Count, 每个Attr都是一个20字节的结构体, 所以总长度为Attr Count * 20 上面说Attr是个20字节的结构体, 这里进行简要说明: // uint32实际上表示是4Bytes type Attr struct { Uri uint32 // 对应字符串索引, 比如上图的&quot;application&quot;在字符串索引是0A, Application Tag Chunk所有的attr的uri都是0A Name uint32 // 这个很关键, 也是个索引, 但是同时表示String和Resource索引 String uint32 // 指向字符串索引, 当Type为0x03000008时与Data相等 Type uint32 // 类型, 比如0x030000008 表示这是个android:name Data uint32 // 数据 } 上面这些东西, 不能用光看的, 要自己用一个示例一步一步分析下来才会印象深刻些, 关于分析二进制文件的, 可以用C32ASM, 或者神奇010 Editor(导入AXMLTemplate,直接都给你分好了, 看起来更容易) 把上面的结构大致了解了以后, 我们需要定义一个方案实现, 分别是针对StringChunk, ResourceChunk, 以及Application TagChunk进行手术, 在本例中用go(js用多了, 速成go感觉很不适应规则)撸了一个, 首先是StringChunk模块: 1. 确定插入字符串a, b 2. 将字符串a, b插入string data块(需要对齐, 如果上面你仔细看, 会发现都是4Bytes的段, 而字符串是UTF16即2Bytes的, 所以要进行4Bytes对齐) 3. 计算两个字符串的偏移值, 添加进string offset数组中 4. 修改起始string offset值(+8, 因为第三步增加了8个字节, 所以起始偏移值要加8) 5. 如果有style的话(判断起始style offset是否为0), 那么起始style offset需要修正(+8 + 两个字符串的长度) 6. 修正string count 7. 修正string chunk size 8. 修正fileSize // 插入字符串aonosora.class, name func modifyStringChunk(axml * AXML, axmlBytes []byte) []byte { // UTF8ToUTF16() 将其转为可以塞进二进制文件的字符串: 0x0E 0x00 0x60 0x00 0x6F 0x00 .... 0x73 0x00 0x00 0x00 appendStr1 := UTF8ToUTF16([]byte{ 0x61,0x6F,0x6E,0x6F,0x73,0x6F,0x72, 0x61,0x2E,0x63,0x6C,0x61,0x73,0x73, }) // 同转为字符串: 0x04 0x00 0x6E 0x00 0x61 0x00 0x6D 0x00 0x65 0x00 0x00 0x00 appendStr2 := UTF8ToUTF16([]byte{ 0x6E,0x61,0x6D,0x65, }) // 计算出字符串data块长度 var strLen uint32 if axml.StyleOffset == 0 { // 没有style块的情况, string data块就是StringChunk的最后一块, 直接用ChunkSize去减 strLen = axml.StringChunkSize - axml.StringOffset } else { // 如果有Style的情况, 字符串data块为StyleOffset - StringOffset strLen = axml.StyleOffset - axml.StringOffset } // string data块的结尾偏移 strEndOffset := axml.StringOffset + 0x8 + strLen // 连续插入字符串 axmlBytes = append(axmlBytes[:strEndOffset], append(appendStr1, append(appendStr2, axmlBytes[strEndOffset:]...)...)...) // 对齐String, 一般在有Style的情况才有改变效果 // 因为String在这里是UTF16形式的, 而其他字段都是UInt32形式的, 所以要进行对齐 // 对齐的方式在StringData的后面插入00 strLenAlignedOffset := strLen strLenAligned := (strLenAlignedOffset + uint32(0x03)) &amp; (^uint32(0x03)) strLenAlignedOffset2 := strLenAligned + uint32(len(appendStr1)) strLenAligned2 := (strLenAlignedOffset2 + uint32(0x03)) &amp; (^uint32(0x03)) // 计算出对齐需要的空白字节数 alignBytesLen := strLenAligned2 - strLenAlignedOffset2 + strLenAligned - strLenAlignedOffset externSize := 0x8 + uint32(len(appendStr1)) + uint32(len(appendStr2)) strEndOffset = strEndOffset + uint32(len(appendStr1)) + uint32(len(appendStr2)) // 一次填充空白字节到string data块中 for i:= 0; i &lt; int(alignBytesLen); i++ { axmlBytes = append(axmlBytes[:strEndOffset], append([]byte{0x00}, axmlBytes[strEndOffset:]...)...) strEndOffset += 1 } externSize = externSize + alignBytesLen // 增加StringOffset偏移索引表 // 字符串aonosora.class的相对Offset // UInt32ToBytes()将一个UInt32转为一个长度为4的字节段 str1OffsetIndex := UInt32ToBytes(strLen) // 字符串name的相对Offset str2OffsetIndex := UInt32ToBytes(strLen + uint32(len(appendStr1))) // 计算出string offset数组的结尾offset strEndOffsetIndex := 36 + axml.StringCount * 4 // 填充两个新的字符串对应的偏移值 axmlBytes = append(axmlBytes[:strEndOffsetIndex], append(str1OffsetIndex, append(str2OffsetIndex, axmlBytes[strEndOffsetIndex:]...)...)...) axml.StringCount = axml.StringCount + 2 axml.StringOffset = axml.StringOffset + 0x8 // 修正StringOffset起始偏移 fixBytes(axmlBytes, axml.StringOffset, 28) // 修正StringCount fixBytes(axmlBytes, axml.StringCount, 16) // 有Style的情况要修正StyleOffset if axml.StyleOffset != 0 { axml.StyleOffset = axml.StyleOffset + externSize fixBytes(axmlBytes, axml.StyleOffset, 32) } // 修正StringChunkSize axml.StringChunkSize = axml.StringChunkSize + externSize fixBytes(axmlBytes, axml.StringChunkSize, 12) axml.FileSize = uint32(len(axmlBytes)) // 由于增加了字节, 原先的Offset需要重新设置 axml.ResourceChunkOffset = axml.ResourceChunkOffset + externSize axml.AppChunkOffset = axml.AppChunkOffset + externSize return axmlBytes } 然后是ResourceChunk, 这个简单些: 1. 由上一步计算出新的String Count(字符串个数), 让这个数减去现有Resource数得出需要填充的Resource个数 2. 需要填充的Resource全是非法的Res Id值 3. 修正ResourceChunkSize(+ 填充的Resource个数 * 4) 4. 修正FileSize func modifyResourceChunk(axml * AXML, axmlBytes []byte) []byte { resourceCounts := axml.ResourceChunkSize / 4 - 2 // 计算出需要填充的ResourceIds的个数, 全部填充为0x00即可, 因为字符串的个数远大于资源的个数, 所以用StringCount - resourceCounts paddingCounts := axml.StringCount - resourceCounts // 计算出从哪个偏移开始填充 paddedStartOffset := axml.ResourceChunkOffset + axml.ResourceChunkSize for i := 0; i &lt; int(paddingCounts); i++ { // 这里特别对第一个插入的字符串用了个Res Id的非法值(尽管0也是非法, 其实都可以用0) if i == int(paddingCounts) - 2 { axmlBytes = append(axmlBytes[:paddedStartOffset], append(UInt32ToBytes(uint32(0x01017FFF)), axmlBytes[paddedStartOffset:]...)...) } else { axmlBytes = append(axmlBytes[:paddedStartOffset], append(UInt32ToBytes(uint32(0x00000000)), axmlBytes[paddedStartOffset:]...)...) } paddedStartOffset = paddedStartOffset + 4 } // 修复ResourceChunkSize axml.ResourceChunkSize = axml.ResourceChunkSize + paddingCounts * 4 fixBytes(axmlBytes, axml.ResourceChunkSize, axml.ResourceChunkOffset + 4) axml.FileSize = uint32(len(axmlBytes)) // 增加字节改变Offset位置 axml.AppChunkOffset = axml.AppChunkOffset + paddingCounts * 4 return axmlBytes } 最后是Application TagChunk, 相对也简单些: 1. 构造出一个Attr 结构体(属性名和Res Id索引都是我们插入的最后一个字符串的索引值, URI为Application对应结构体的URI) 2. 直接插入到这个TagChunk中 3. 修正这个TagChunk的attr count(+1) 4. 修正这个TagChunk的Chunk Size(+20) 5. 修正FileSize func modifyTagChunk(axml * AXML, axmlBytes []byte) []byte { appChunkSize := BytesToUInt32(axmlBytes[axml.AppChunkOffset + 4: axml.AppChunkOffset + 8]) appChunkAttrCount := BytesToUInt32(axmlBytes[axml.AppChunkOffset + 28: axml.AppChunkOffset + 32]) // 取得AppChunk 结尾偏移 appChunkEndOffset := axml.AppChunkOffset + appChunkSize // 表明属性名为name, 属性值为Android:name = &quot;aonosora.class&quot; attr := new(Attr) attr.Uri = axml.AppURIIndex attr.Name = axml.StringCount - 1 attr.String = axml.StringCount - 2 attr.Type = 0x03000008 attr.Data = axml.StringCount - 2 attrRefValue := reflect.ValueOf(attr).Elem() for i := 0; i &lt; attrRefValue.NumField(); i++ { value := uint32(attrRefValue.Field(i).Uint()) axmlBytes = append(axmlBytes[:appChunkEndOffset], append(UInt32ToBytes(value), axmlBytes[appChunkEndOffset:]...)...) appChunkEndOffset += 4 } // 修正AppChunk Attr Count fixBytes(axmlBytes, appChunkAttrCount + 1, axml.AppChunkOffset + 28) // 修正AppChunk Size fixBytes(axmlBytes, appChunkSize + 20, axml.AppChunkOffset + 4) axml.FileSize = uint32(len(axmlBytes)) return axmlBytes } 跑一下程序, 运行出来是这个鬼样子(用的Android_Killer, 因为我特别对ShakaApktool进行了设置才能反编译, 不然连反编译都不行了, Android逆向助手跑出来是个空文件夹, ApkToolKit直接提示失败): 不过, 这种方式跟多数资源保护一样, 具有比较强的针对性(就是针对apktool这个东西), 很多的Android反编译工具(比如Android逆向助手, Android_Killer, ApkToolKit),看文件目录的话, 其实都差不多的(包含apktool, dex2jar, aapt这些基本的东西), 所以一防住apktool的话, 很多工具就是用不了的, 这对于隔离新手来说还是有用的, 缺点也是针对性比较强, 毕竟这种方式其实就是利用反编译工具的逻辑漏洞, 那么工具做一下更新就行了, apktool这个东西在github上是开源的: https://github.com/iBotPeaches/Apktool, 版本是不断更新的, 只要它做了对应的更新, 那么方案就无效了。 http://blog.csdn.net/weimeig/article/details/79637920","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"Android仿今日头条首页的顶部标签栏和底部导航栏","slug":"TodayHeadlineDemo","date":"2018-03-02T14:22:55.000Z","updated":"2018-06-09T07:29:16.526Z","comments":true,"path":"2018/03/02/TodayHeadlineDemo/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2018/03/02/TodayHeadlineDemo/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 Android仿今日头条首页的顶部标签栏和底部导航栏先是底部导航栏TextView+ImageView+Fragment: 效果图: activity_main.xml布局: &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; tools:context=&quot;com.myapplication.activity.MainActivity&quot;&gt; &lt;FrameLayout android:id=&quot;@+id/fl_fragment_content&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;0dp&quot; android:background=&quot;#bababa&quot; android:layout_weight=&quot;1&quot;&gt; &lt;!-- 存放四个Fragment--&gt; &lt;/FrameLayout&gt; &lt;!-- 底部的四个选项菜单--&gt; &lt;LinearLayout android:background=&quot;#ffffff&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;49dp&quot;&gt; &lt;!--四个部分都一样：ImageView + TextView--&gt; &lt;RelativeLayout android:id=&quot;@+id/rl_first_layout&quot; android:layout_width=&quot;0dp&quot; android:layout_weight=&quot;1&quot; android:layout_height=&quot;match_parent&quot; android:gravity=&quot;center&quot;&gt; &lt;ImageView android:id=&quot;@+id/iv_first_home&quot; android:src=&quot;@drawable/icon_homepage_selector&quot; android:layout_width=&quot;24dp&quot; android:layout_centerHorizontal=&quot;true&quot; android:layout_height=&quot;24dp&quot; /&gt; &lt;TextView android:id=&quot;@+id/tv_first_home&quot; android:textColor=&quot;@drawable/text_selector_color&quot; android:text=&quot;首页&quot; android:layout_below=&quot;@+id/iv_first_home&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_centerHorizontal=&quot;true&quot; android:layout_gravity=&quot;center_horizontal&quot;/&gt; &lt;/RelativeLayout&gt; &lt;RelativeLayout android:id=&quot;@+id/rl_second_layout&quot; android:layout_width=&quot;0dp&quot; android:layout_weight=&quot;1&quot; android:layout_height=&quot;match_parent&quot; android:gravity=&quot;center&quot;&gt; &lt;ImageView android:id=&quot;@+id/iv_second_match&quot; android:src=&quot;@drawable/icon_matchpage_selector&quot; android:layout_centerHorizontal=&quot;true&quot; android:layout_width=&quot;24dp&quot; android:layout_height=&quot;24dp&quot; /&gt; &lt;TextView android:id=&quot;@+id/tv_second_match&quot; android:textColor=&quot;@drawable/text_selector_color&quot; android:text=&quot;赛程&quot; android:layout_below=&quot;@+id/iv_second_match&quot; android:layout_centerHorizontal=&quot;true&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_gravity=&quot;center_horizontal&quot;/&gt; &lt;/RelativeLayout&gt; &lt;RelativeLayout android:id=&quot;@+id/rl_third_layout&quot; android:layout_width=&quot;0dp&quot; android:layout_weight=&quot;1&quot; android:layout_height=&quot;match_parent&quot; android:gravity=&quot;center&quot;&gt; &lt;ImageView android:id=&quot;@+id/iv_third_recommend&quot; android:src=&quot;@drawable/icon_recommendpage_selector&quot; android:layout_centerHorizontal=&quot;true&quot; android:layout_width=&quot;24dp&quot; android:layout_height=&quot;24dp&quot; /&gt; &lt;TextView android:id=&quot;@+id/tv_third_recommend&quot; android:textColor=&quot;@drawable/text_selector_color&quot; android:text=&quot;推荐&quot; android:layout_below=&quot;@+id/iv_third_recommend&quot; android:layout_centerHorizontal=&quot;true&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_gravity=&quot;center_horizontal&quot;/&gt; &lt;/RelativeLayout&gt; &lt;RelativeLayout android:id=&quot;@+id/rl_four_layout&quot; android:layout_width=&quot;0dp&quot; android:layout_weight=&quot;1&quot; android:layout_height=&quot;match_parent&quot; android:gravity=&quot;center&quot;&gt; &lt;ImageView android:id=&quot;@+id/iv_four_mine&quot; android:src=&quot;@drawable/icon_minepage_selector&quot; android:layout_centerHorizontal=&quot;true&quot; android:layout_width=&quot;24dp&quot; android:layout_height=&quot;24dp&quot; /&gt; &lt;TextView android:id=&quot;@+id/tv_four_mine&quot; android:textColor=&quot;@drawable/text_selector_color&quot; android:text=&quot;我的&quot; android:layout_below=&quot;@+id/iv_four_mine&quot; android:layout_centerHorizontal=&quot;true&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_gravity=&quot;center_horizontal&quot;/&gt; &lt;/RelativeLayout&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt; activity_main.xml效果图: 图标选择器:(icon_homepage_selector.xml) &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;item android:drawable=&quot;@drawable/home1&quot; android:state_selected=&quot;true&quot; /&gt; &lt;item android:drawable=&quot;@drawable/home11&quot; /&gt; &lt;/selector&gt; 文字选择器:(text_selector_color.xml) &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;item android:color =&quot;#d81e06&quot; android:state_selected=&quot;true&quot;/&gt; &lt;item android:color =&quot;#323232&quot; /&gt; &lt;/selector&gt; 写个通用的带标题,图片的标题栏布局:(base_top_title_page.xml)(有些页面需要标题,有些不需要标题,所以第一个TextView的标题gone了) &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:orientation=&quot;vertical&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;!--包含标题栏:图标+文字--&gt; &lt;RelativeLayout android:layout_width=&quot;match_parent&quot; android:background=&quot;#d81e06&quot; android:layout_height=&quot;50dp&quot;&gt; &lt;ImageView android:layout_marginLeft=&quot;10dp&quot; android:id=&quot;@+id/iv_logo_page&quot; android:layout_width=&quot;wrap_content&quot; android:layout_centerVertical=&quot;true&quot; android:layout_height=&quot;wrap_content&quot; /&gt; &lt;TextView android:id=&quot;@+id/tv_title_page&quot; android:visibility=&quot;gone&quot; android:text=&quot;我是标题&quot; android:textSize=&quot;20sp&quot; android:textColor=&quot;#FFFFFF&quot; android:layout_width=&quot;wrap_content&quot; android:layout_centerInParent=&quot;true&quot; android:layout_height=&quot;wrap_content&quot; /&gt; &lt;TextView android:id=&quot;@+id/tv_paypal_page&quot; android:text=&quot;充值&quot; android:textSize=&quot;20sp&quot; android:textColor=&quot;#FFFFFF&quot; android:layout_alignParentRight=&quot;true&quot; android:layout_centerVertical=&quot;true&quot; android:layout_marginRight=&quot;15dp&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; /&gt; &lt;/RelativeLayout&gt; &lt;FrameLayout android:id=&quot;@+id/fl_title_content_page&quot; android:background=&quot;#AEAEAE&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;0dp&quot; android:layout_weight=&quot;1&quot;&gt; &lt;!--此入放置一个布局的原因:首页(Textview),赛程(内容),推荐... 使用方法addView(contentView)--&gt; &lt;/FrameLayout&gt; &lt;/LinearLayout&gt; 通用布局的java代码:(BasePageTitleFragent) /** * Created by liuzihao on 2018/1/17. * 通用 图片 充值的Fragment的基类 */ public abstract class BasePageTitleFragent extends Fragment { private View mFragmentView;//父控件(由父控件找到子控件) private ImageView mIvLogoPage; private TextView mTvTitlePage; private TextView mTvPaypalPage; private FrameLayout mFlTitleContentPage; @Override public void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); } @Nullable @Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) { mFragmentView = inflater.inflate(R.layout.base_top_title_page, container, false); //通用布局(图片 充值) mIvLogoPage = (ImageView) mFragmentView.findViewById(R.id.iv_logo_page); mTvTitlePage = (TextView) mFragmentView.findViewById(R.id.tv_title_page); mTvPaypalPage = (TextView) mFragmentView.findViewById(R.id.tv_paypal_page); mFlTitleContentPage = (FrameLayout) mFragmentView.findViewById(R.id.fl_title_content_page); View view = initView(); mFlTitleContentPage.addView(view); return mFragmentView; } public void setTitleIcon(String msg, boolean show) { //设置标题和图标 mTvTitlePage.setText(msg); //设置标题 mTvTitlePage.setVisibility(show ? View.VISIBLE : View.GONE); //设置标题显示 true就是显示 false就是不显示 } @Override public void onActivityCreated(@Nullable Bundle savedInstanceState) { super.onActivityCreated(savedInstanceState); initData(); } protected abstract View initView(); protected abstract void initData(); } 创建4个Fragment:(HomePageFragment…) /** * Created by liuzihao on 2018/1/18. * 首页片段 */ public class HomePageFragment extends BasePageTitleFragent { @Override protected View initView() { setTitleIcon(&quot;&quot;,false); //设置第一个首页不显示标题 View homeFragment = View.inflate(getContext(), R.layout.fg_homepage, null); return homeFragment ; } @Override protected void initData() { } } /** * Created by liuzihao on 2018/1/18. * 赛程片段 */ public class MatchPageFragment extends BasePageTitleFragent { @Override public View initView() { setTitleIcon(&quot;赛程&quot;,true); View matchFragment = View.inflate(getContext(), R.layout.fg_matchpage, null); return matchFragment; } @Override public void initData() { } } /** * Created by liuzihao on 2018/1/18. * 推荐片段 */ public class RecommendPageFragment extends BasePageTitleFragent { @Override public View initView() { setTitleIcon(&quot;推荐&quot;,true); View recommendFragment = View.inflate(getContext(), R.layout.fg_recommendpage, null); return recommendFragment; } @Override public void initData() { } } /** * Created by liuzihao on 2018/1/18. * 我的片段 */ public class MinePageFragment extends BasePageTitleFragent { @Override public View initView() { setTitleIcon(&quot;个人中心&quot;,true); View mineFragment = View.inflate(getContext(), R.layout.fg_minepage, null); return mineFragment; } @Override public void initData() { } } Fragment的xml布局:(fg_homepage.xml)(复制3个) &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;TextView android:id=&quot;@+id/tv_homepage_content&quot; android:text=&quot;首页片段xml&quot; android:textSize=&quot;29sp&quot; android:layout_centerInParent=&quot;true&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; /&gt; &lt;/RelativeLayout&gt; MainActivity: //主页 public class MainActivity extends AppCompatActivity implements View.OnClickListener { //初始化fragment private HomePageFragment mHomePageFragment; private MatchPageFragment mMatchPageFragment; private RecommendPageFragment mRecommendPageFragment; private MinePageFragment mMinePageFragment; //片段类容 private FrameLayout mFlFragmentContent; //底部4个按钮 private RelativeLayout mRlFirstLayout; private RelativeLayout mRlSecondLayout; private RelativeLayout mRlThirdLayout; private RelativeLayout mRlFourLayout; private ImageView mIvFirstHome; private TextView mTvFirstHome; private ImageView mIvSecondMatch; private TextView mTvSecondMatch; private ImageView mIvThirdRecommend; private TextView mTvThirdRecommend; private ImageView mIvFourMine; private TextView mTvFourMine; private FragmentManager mFragmentManager; private FragmentTransaction mTransaction; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mFragmentManager = getSupportFragmentManager(); //=============================沉侵式状态栏S================================ //设置状态栏颜色,必须在setContentView之后使用 //第一个参数:当前页面;第二个参数:颜色;第三个参数:透明度; StatusBarUtil.setColor(this, getResources().getColor(R.color.colorStatusBar), 0); //=============================沉侵式状态栏E================================ initView(); //初始化视图 } //此方法可以让app启动页像微信一样,第一次(启动页运行),第二次(无启动页,直接进入主界面) // @Override // public void onBackPressed() { // //super.onBackPressed(); 不要调用父类 // Intent intent = new Intent(Intent.ACTION_MAIN); //ACTION_MAIN主活动 // intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); //标志活动新任务 // intent.addCategory(Intent.CATEGORY_HOME); //类型 // startActivity(intent); // } private void initView() { mFlFragmentContent = (FrameLayout) findViewById(R.id.fl_fragment_content); mRlFirstLayout = (RelativeLayout) findViewById(R.id.rl_first_layout); mIvFirstHome = (ImageView) findViewById(R.id.iv_first_home); mTvFirstHome = (TextView) findViewById(R.id.tv_first_home); mRlSecondLayout = (RelativeLayout) findViewById(R.id.rl_second_layout); mIvSecondMatch = (ImageView) findViewById(R.id.iv_second_match); mTvSecondMatch = (TextView) findViewById(R.id.tv_second_match); mRlThirdLayout = (RelativeLayout) findViewById(R.id.rl_third_layout); mIvThirdRecommend = (ImageView) findViewById(R.id.iv_third_recommend); mTvThirdRecommend = (TextView) findViewById(R.id.tv_third_recommend); mRlFourLayout = (RelativeLayout) findViewById(R.id.rl_four_layout); mIvFourMine = (ImageView) findViewById(R.id.iv_four_mine); mTvFourMine = (TextView) findViewById(R.id.tv_four_mine); //给五个按钮设置监听器 mRlFirstLayout.setOnClickListener(this); mRlSecondLayout.setOnClickListener(this); mRlThirdLayout.setOnClickListener(this); mRlFourLayout.setOnClickListener(this); //默认第一个首页被选中高亮显示 mRlFirstLayout.setSelected(true); mTransaction = mFragmentManager.beginTransaction(); mTransaction.replace(R.id.fl_fragment_content, new HomePageFragment()); mTransaction.commit(); } @Override public void onClick(View v) { mTransaction = mFragmentManager.beginTransaction(); //开启事务 hideAllFragment(mTransaction); switch (v.getId()){ //首页 case R.id.rl_first_layout: seleted(); mRlFirstLayout.setSelected(true); if (mHomePageFragment == null) { mHomePageFragment = new HomePageFragment(); mTransaction.add(R.id.fl_fragment_content,mHomePageFragment); //通过事务将内容添加到内容页 }else{ mTransaction.show(mHomePageFragment); } break; //赛程 case R.id.rl_second_layout: seleted(); mRlSecondLayout.setSelected(true); if (mMatchPageFragment == null) { mMatchPageFragment = new MatchPageFragment(); mTransaction.add(R.id.fl_fragment_content,mMatchPageFragment); //通过事务将内容添加到内容页 }else{ mTransaction.show(mMatchPageFragment); } break; //推荐 case R.id.rl_third_layout: seleted(); mRlThirdLayout.setSelected(true); if (mRecommendPageFragment == null) { mRecommendPageFragment = new RecommendPageFragment(); mTransaction.add(R.id.fl_fragment_content,mRecommendPageFragment); //通过事务将内容添加到内容页 }else{ mTransaction.show(mRecommendPageFragment); } break; //个人中心 case R.id.rl_four_layout: seleted(); mRlFourLayout.setSelected(true); if (mMinePageFragment == null) { mMinePageFragment = new MinePageFragment(); mTransaction.add(R.id.fl_fragment_content,mMinePageFragment); //通过事务将内容添加到内容页 }else{ mTransaction.show(mMinePageFragment); } break; } mTransaction.commit(); } //设置所有按钮都是默认都不选中 private void seleted() { mRlFirstLayout.setSelected(false); mRlSecondLayout.setSelected(false); mRlThirdLayout.setSelected(false); mRlFourLayout.setSelected(false); } //删除所有fragmtne private void hideAllFragment(FragmentTransaction transaction) { if (mHomePageFragment != null) { transaction.hide(mHomePageFragment); } if (mMatchPageFragment != null) { transaction.hide(mMatchPageFragment); } if (mRecommendPageFragment != null) { transaction.hide(mRecommendPageFragment); } if (mMinePageFragment != null) { transaction.hide(mMinePageFragment); } } } 最后效果图: =====================================================================顶部标签栏TabLayout+ViewPager+Fragment底部和顶部联合效果图: (需要在首页Fragment嵌套Fragment;使用TabLayout+ViewPager+Fragment)先从首页fg布局里fg_homepage.xml开始写:(需要添加design包) 添加依赖 dependencies { compile &apos;com.jaeger.statusbarutil:library:1.4.0&apos; } &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:orientation=&quot;vertical&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;android.support.design.widget.TabLayout android:id=&quot;@+id/tablayout_top_tab&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;36dp&quot; app:tabMode=&quot;fixed&quot; app:tabIndicatorHeight=&quot;0dp&quot; app:tabSelectedTextColor=&quot;@color/colorRedUserNameCash&quot; app:tabTextColor=&quot;@color/colorGray&quot;&gt; &lt;/android.support.design.widget.TabLayout&gt; &lt;android.support.v4.view.ViewPager android:background=&quot;#dadada&quot; android:id=&quot;@+id/vp_homepage_tab_content&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;0dp&quot; android:layout_weight=&quot;1&quot;&gt; &lt;/android.support.v4.view.ViewPager&gt; &lt;!--&lt;TextView--&gt; &lt;!--android:id=&quot;@+id/tv_homepage_content&quot;--&gt; &lt;!--android:text=&quot;首页片段xml&quot;--&gt; &lt;!--android:textSize=&quot;29sp&quot;--&gt; &lt;!--android:layout_centerInParent=&quot;true&quot;--&gt; &lt;!--android:layout_width=&quot;wrap_content&quot;--&gt; &lt;!--android:layout_height=&quot;wrap_content&quot; /&gt;--&gt; &lt;!--&lt;FrameLayout--&gt; &lt;!--android:layout_width=&quot;match_parent&quot;--&gt; &lt;!--android:layout_height=&quot;match_parent&quot;&gt;--&gt; &lt;!--&amp;lt;!&amp;ndash;实单,推荐,足球,篮球,竞彩,电竞,综合的片段内容&amp;ndash;&amp;gt;--&gt; &lt;!--&lt;/FrameLayout&gt;--&gt; &lt;/LinearLayout&gt; 然后回到首页HomePageFragment找控件,适配器,绑定 /** * Created by liuzihao on 2018/1/18. * 首页片段 */ public class HomePageFragment extends BasePageTitleFragent { private TabLayout mTablayoutTopTab; private ViewPager mVpHomepageTabContent; @Override protected View initView() { setTitleIcon(&quot;&quot;,false); //设置第一个首页不显示标题 View homeFragment = View.inflate(getContext(), R.layout.fg_homepage, null); mTablayoutTopTab = (TabLayout) homeFragment.findViewById(R.id.tablayout_top_tab); mVpHomepageTabContent = (ViewPager) homeFragment.findViewById(R.id.vp_homepage_tab_content); return homeFragment ; } @Override protected void initData() { //=======================显示首页顶部标签栏S========================== String[] mTitles =getResources().getStringArray(R.array.homepage_top_tab); //MyTabPageAdapter()里的参数不能用getFragmentManager,否则滑动出去,再滑回来会没数据 mVpHomepageTabContent.setAdapter(new MyTabPageAdapter(getChildFragmentManager(),mTitles)); mTablayoutTopTab.setupWithViewPager(mVpHomepageTabContent); //=======================显示首页顶部标签栏E========================== //====================点击充值跳转充值页S=============== mTvHomePagePaypal.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { startActivity(new Intent(getContext(), TestActivity.class)); } }); //====================点击充值跳转充值页E=============== } } String[]下的代码 &lt;string-array name=&quot;homepage_top_tab&quot;&gt; &lt;item&gt;实单&lt;/item&gt; &lt;item&gt;推荐&lt;/item&gt; &lt;item&gt;足球&lt;/item&gt; &lt;item&gt;篮球&lt;/item&gt; &lt;item&gt;竞彩&lt;/item&gt; &lt;item&gt;电竞&lt;/item&gt; &lt;item&gt;综合&lt;/item&gt; &lt;/string-array&gt; MyTabPageAdapter: /** * Created by qq910 on 2018/1/23. */ public class MyTabPageAdapter extends FragmentPagerAdapter { private final String[] mTitlees; public MyTabPageAdapter(FragmentManager fm, String[] titlees) { super(fm); this.mTitlees = titlees; } @Override public Fragment getItem(int position) { if (position == 0) { return new RealSimpleFragment1(); } else if (position == 1) { return new RecommendFragment2(); } else if (position == 2) { return new FootballFragment3(); } else if (position == 3) { return new BasketballFragment4(); } else if (position == 4) { return new LotteryFragment5(); } else if (position == 5) { return new CompetitionFragment6(); } return new SynthesizeFragment7(); } @Override public int getCount() { return mTitlees.length; } @Override public CharSequence getPageTitle(int position) { return mTitlees[position]; } } 标签栏的fg RealSimpleFragment1: /** * Created by liuzihao on 2018/1/23. * 实单fg */ public class RealSimpleFragment1 extends Fragment { @Override public void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); } @Nullable @Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) { View realSimpleView = inflater.inflate(R.layout.fg_tab_realsimple, container, false); return realSimpleView; } @Override public void onActivityCreated(@Nullable Bundle savedInstanceState) { super.onActivityCreated(savedInstanceState); } } fg_tab_realsimple.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot;&gt; &lt;TextView android:id=&quot;@+id/tv_tab_realsimple&quot; android:text=&quot;实单xml&quot; android:textSize=&quot;26sp&quot; android:textColor=&quot;#000&quot; android:layout_centerInParent=&quot;true&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; /&gt; &lt;/LinearLayout&gt; 其他页面一样 效果图","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"Picasso图片加载框架","slug":"Picasso","date":"2018-02-27T01:10:23.000Z","updated":"2018-06-09T04:59:38.588Z","comments":true,"path":"2018/02/27/Picasso/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2018/02/27/Picasso/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 未完待续。。。","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"RxJava对Retrofit进一步封装","slug":"RetrofitToRxJava","date":"2018-02-10T18:10:23.000Z","updated":"2018-06-09T05:22:43.998Z","comments":true,"path":"2018/02/11/RetrofitToRxJava/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2018/02/11/RetrofitToRxJava/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 接口文件 package com.administrator.testapp; import retrofit2.Call; import retrofit2.http.Field; import retrofit2.http.FormUrlEncoded; import retrofit2.http.POST; import rx.Observable; /** * Created by Administrator on 2018/5/18. */ public interface Api { @POST @FormUrlEncoded Call&lt;String&gt; get(@Field(&quot;111&quot;) String name); //用户注册 @POST(&quot;account/register&quot;) @FormUrlEncoded Call&lt;String&gt; postRegister(@Field(&quot;phone&quot;) String phone,@Field(&quot;password&quot;) String password); //用户登录 @POST(&quot;account/login&quot;) @FormUrlEncoded Observable&lt;UserInfo&gt; postLogin(@Field(&quot;phone&quot;) String phone, @Field(&quot;password&quot;) String password); } 改Observable RetrofitUtil，放开addCallAdapterFactory(RxJavaCallAdapterFactory.create())//rxjava转换器，这行注释 package com.administrator.testapp; import java.util.concurrent.TimeUnit; import okhttp3.OkHttpClient; import retrofit2.GsonConverterFactory; import retrofit2.Retrofit; import retrofit2.adapter.rxjava.RxJavaCallAdapterFactory; import retrofit2.converter.scalars.ScalarsConverterFactory; /** * Created by Administrator on 2018/5/18. */ public class RetrofitUtil { private static Retrofit sRetrofit; private static OkHttpClient mOkHttpClient; private RetrofitUtil(){} public static class Hide{ static RetrofitUtil sRetrofitUtil = new RetrofitUtil(); } public static RetrofitUtil getInstance() { return Hide.sRetrofitUtil; } public Api build(){ if(mOkHttpClient == null){ mOkHttpClient = new OkHttpClient.Builder() .connectTimeout(10, TimeUnit.SECONDS) .readTimeout(10, TimeUnit.SECONDS) .writeTimeout(10, TimeUnit.SECONDS) .build(); } if(sRetrofit == null){ sRetrofit = new Retrofit.Builder() .baseUrl(&quot;http://116.196.111.10:8050/&quot;) .client(mOkHttpClient) .addConverterFactory(ScalarsConverterFactory.create()) //数据转换器 .addConverterFactory(GsonConverterFactory.create())//数据转换器 .addCallAdapterFactory(RxJavaCallAdapterFactory.create())//rxjava转换器 .build(); } return sRetrofit.create(Api.class); } } 外部调用 @Override public void onClick(View v) { switch (v.getId()){ case R.id.login_tv: RetrofitUtil.getInstance().build() .postLogin(etPhoneLogin.getText().toString().trim(),etPwd.getText().toString().trim()) .subscribeOn(Schedulers.io()) .observeOn(AndroidSchedulers.mainThread()) .subscribe(new Subscriber&lt;UserInfo&gt;() { @Override public void onCompleted() { } @Override public void onError(Throwable e) { e.printStackTrace(); Log.e(&quot;R&quot;,&quot;onError：&quot;+e.toString()); } @Override public void onNext(UserInfo userInfo) { MyApplication.setUserInfo(userInfo); if (userInfo.getCode()==200) { Log.e(&quot;R&quot;,MyApplication.getUserInfo().getData().getPhone()); startActivity(new Intent(LoginActivity.this, MainActivity.class)); }else { Toast.makeText(LoginActivity.this,&quot;您的账号密码有误，请重新输入&quot;,Toast.LENGTH_SHORT).show(); } } }); break; } }","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"ListView进阶提升（实现列表数据与聊天对话框）","slug":"ListViewAdvanced","date":"2018-02-09T11:12:23.000Z","updated":"2018-06-09T07:03:21.881Z","comments":true,"path":"2018/02/09/ListViewAdvanced/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2018/02/09/ListViewAdvanced/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 Manifest添加网络访问权限 &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt; string.xml &lt;resources&gt; &lt;string name=&quot;app_name&quot;&gt;ImoocDemoProject&lt;/string&gt; &lt;string name=&quot;xiaoming&quot;&gt;小明&lt;/string&gt; &lt;/resources&gt; colors.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;resources&gt; &lt;color name=&quot;colorPrimary&quot;&gt;#3F51B5&lt;/color&gt; &lt;color name=&quot;colorPrimaryDark&quot;&gt;#303F9F&lt;/color&gt; &lt;color name=&quot;colorAccent&quot;&gt;#FF4081&lt;/color&gt; &lt;color name=&quot;blue&quot;&gt;#484fd9&lt;/color&gt; &lt;color name=&quot;main_background&quot;&gt;#f0f0f0&lt;/color&gt; &lt;color name=&quot;white&quot;&gt;#FFFFFF&lt;/color&gt; &lt;/resources&gt; styles.xml &lt;resources&gt; &lt;!-- Base application theme. --&gt; &lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt; &lt;!-- Customize your theme here. --&gt; &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt; &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorPrimaryDark&lt;/item&gt; &lt;item name=&quot;colorAccent&quot;&gt;@color/colorAccent&lt;/item&gt; &lt;/style&gt; &lt;style name=&quot;chat_text_date_style&quot;&gt; &lt;item name=&quot;android:padding&quot;&gt;2dp&lt;/item&gt; &lt;item name=&quot;android:textColor&quot;&gt;#CCCCCC&lt;/item&gt; &lt;item name=&quot;android:textSize&quot;&gt;14sp&lt;/item&gt; &lt;item name=&quot;android:background&quot;&gt;@color/main_background&lt;/item&gt; &lt;/style&gt; &lt;style name=&quot;chat_content_date_style&quot;&gt; &lt;item name=&quot;android:minHeight&quot;&gt;36dp&lt;/item&gt; &lt;item name=&quot;android:gravity&quot;&gt;left|center&lt;/item&gt; &lt;item name=&quot;android:textColor&quot;&gt;#000000&lt;/item&gt; &lt;item name=&quot;android:textSize&quot;&gt;18sp&lt;/item&gt; &lt;item name=&quot;android:lineSpacingExtra&quot;&gt;2dp&lt;/item&gt; &lt;item name=&quot;android:clickable&quot;&gt;true&lt;/item&gt; &lt;item name=&quot;android:focusable&quot;&gt;true&lt;/item&gt; &lt;item name=&quot;android:background&quot;&gt;#bfbfbf&lt;/item&gt; &lt;/style&gt; &lt;style name=&quot;chat_text_name_style&quot;&gt; &lt;item name=&quot;android:textColor&quot;&gt;#818181&lt;/item&gt; &lt;item name=&quot;android:textSize&quot;&gt;15sp&lt;/item&gt; &lt;item name=&quot;android:gravity&quot;&gt;center&lt;/item&gt; &lt;/style&gt; &lt;/resources&gt; item_main_list.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:orientation=&quot;vertical&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;TextView android:id=&quot;@+id/title&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;60dp&quot; android:text=&quot;@string/app_name&quot; android:minHeight=&quot;30dp&quot; android:layout_centerVertical=&quot;true&quot; android:gravity=&quot;center_vertical&quot; android:textColor=&quot;#494949&quot; android:layout_marginLeft=&quot;16dp&quot; android:layout_toRightOf=&quot;@+id/breakfast_imageview&quot; android:textSize=&quot;18sp&quot;/&gt; &lt;/LinearLayout&gt; item_demo_list.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:orientation=&quot;horizontal&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;60dp&quot;&gt; &lt;ImageView android:id=&quot;@+id/icon_image_view&quot; android:layout_width=&quot;60dp&quot; android:layout_height=&quot;60dp&quot; android:src=&quot;@mipmap/ic_launcher&quot;/&gt; &lt;TextView android:id=&quot;@+id/title_text_view&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;60dp&quot; android:text=&quot;@string/app_name&quot; android:minHeight=&quot;30dp&quot; android:layout_centerVertical=&quot;true&quot; android:gravity=&quot;left|center&quot; android:textColor=&quot;#494949&quot; android:singleLine=&quot;true&quot; android:layout_marginLeft=&quot;16dp&quot; android:layout_toRightOf=&quot;@+id/breakfast_imageview&quot; android:textSize=&quot;18sp&quot;/&gt; &lt;/LinearLayout&gt; header_list_demo.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:orientation=&quot;horizontal&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;60dp&quot;&gt; &lt;ImageView android:id=&quot;@+id/icon_image_view&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;80dp&quot; android:background=&quot;@drawable/banner&quot;/&gt; &lt;/LinearLayout&gt; chatting_item_msg_text_right.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;fill_parent&quot; android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;vertical&quot; android:padding=&quot;6dp&quot; &gt; &lt;LinearLayout android:layout_width=&quot;fill_parent&quot; android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;vertical&quot; android:gravity=&quot;center_horizontal&quot;&gt; &lt;TextView android:id=&quot;@+id/tv_send_time&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:padding=&quot;2dp&quot; android:textColor=&quot;#ffffff&quot; android:textSize=&quot;12sp&quot; android:background=&quot;#bfbfbf&quot;/&gt; &lt;/LinearLayout&gt; &lt;RelativeLayout android:layout_width=&quot;fill_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginTop=&quot;5dp&quot; android:layout_marginRight=&quot;5dp&quot; &gt; &lt;ImageView android:id=&quot;@+id/iv_user_head&quot; android:layout_width=&quot;40dp&quot; android:layout_height=&quot;40dp&quot; android:focusable=&quot;false&quot; android:layout_alignParentRight=&quot;true&quot; android:layout_alignParentTop=&quot;true&quot; android:background=&quot;@drawable/avatar&quot;/&gt; &lt;TextView android:id=&quot;@+id/tv_chat_content&quot; android:layout_toLeftOf=&quot;@id/iv_user_head&quot; android:layout_marginRight=&quot;10dp&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:minWidth=&quot;50dp&quot; android:textColor=&quot;#FFFFFF&quot; android:background=&quot;@drawable/msg_bubble_blue&quot; android:textSize=&quot;15sp&quot; android:gravity=&quot;left|center&quot; android:minHeight=&quot;40dp&quot; android:lineSpacingExtra=&quot;2dp&quot; android:clickable=&quot;true&quot; android:focusable=&quot;true&quot;/&gt; &lt;TextView android:id=&quot;@+id/tv_time&quot; android:layout_toLeftOf=&quot;@id/tv_chat_content&quot; android:layout_marginRight=&quot;10dp&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:textSize=&quot;15sp&quot; android:textColor=&quot;#ff000000&quot; android:gravity=&quot;left|center&quot; android:minHeight=&quot;50dp&quot; android:lineSpacingExtra=&quot;2dp&quot; android:clickable=&quot;true&quot; android:focusable=&quot;true&quot;/&gt; &lt;TextView android:id=&quot;@+id/tv_username&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_below=&quot;@id/iv_user_head&quot; android:layout_alignParentRight=&quot;true&quot; android:layout_toRightOf=&quot;@id/tv_chat_content&quot; android:textSize=&quot;15sp&quot; android:gravity=&quot;center&quot; android:textColor=&quot;#818181&quot;/&gt; &lt;/RelativeLayout&gt; &lt;/LinearLayout&gt; chatting_item_msg_text_left.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;fill_parent&quot; android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;vertical&quot; android:padding=&quot;6dp&quot; &gt; &lt;LinearLayout android:layout_width=&quot;fill_parent&quot; android:layout_height=&quot;wrap_content&quot; android:gravity=&quot;center_horizontal&quot; android:orientation=&quot;vertical&quot; &gt; &lt;TextView android:id=&quot;@+id/tv_send_time&quot; android:padding=&quot;2dp&quot; android:textColor=&quot;#CCCCCC&quot; android:text=&quot;18:20&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; /&gt; &lt;/LinearLayout&gt; &lt;RelativeLayout android:layout_width=&quot;fill_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginLeft=&quot;5dp&quot; android:layout_marginTop=&quot;5dp&quot; &gt; &lt;ImageView android:id=&quot;@+id/iv_user_head&quot; android:layout_width=&quot;40dp&quot; android:layout_height=&quot;40dp&quot; android:layout_alignParentLeft=&quot;true&quot; android:layout_alignParentTop=&quot;true&quot; android:background=&quot;@drawable/avatar&quot; android:clickable=&quot;true&quot; /&gt; &lt;TextView android:id=&quot;@+id/tv_chat_content&quot; android:minHeight=&quot;36dp&quot; android:gravity=&quot;left|center&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginLeft=&quot;10dp&quot; android:minWidth=&quot;50dp&quot; android:textColor=&quot;#494949&quot; android:textSize=&quot;18sp&quot; android:text=&quot;@string/app_name&quot; android:lineSpacingExtra=&quot;2dp&quot; android:layout_toRightOf=&quot;@id/iv_user_head&quot; android:background=&quot;@drawable/msg_bubble_white&quot; /&gt; &lt;TextView android:id=&quot;@+id/tv_time&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginRight=&quot;10dp&quot; android:layout_toRightOf=&quot;@id/tv_chat_content&quot; android:clickable=&quot;true&quot; android:focusable=&quot;true&quot; android:gravity=&quot;left|center&quot; android:lineSpacingExtra=&quot;2dp&quot; android:minHeight=&quot;50dp&quot; android:textColor=&quot;#ff000000&quot; android:textSize=&quot;15sp&quot; /&gt; &lt;TextView android:id=&quot;@+id/tv_username&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_alignParentLeft=&quot;true&quot; android:layout_below=&quot;@id/iv_user_head&quot; android:text=&quot;@string/xiaoming&quot; android:textSize=&quot;14sp&quot; android:singleLine=&quot;true&quot; android:visibility=&quot;visible&quot; android:textColor=&quot;#818181&quot; android:gravity=&quot;center&quot; android:layout_toLeftOf=&quot;@id/tv_chat_content&quot; /&gt; &lt;/RelativeLayout&gt; &lt;/LinearLayout&gt; activity_main.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:paddingBottom=&quot;@dimen/activity_vertical_margin&quot; android:paddingLeft=&quot;@dimen/activity_horizontal_margin&quot; android:paddingRight=&quot;@dimen/activity_horizontal_margin&quot; android:paddingTop=&quot;@dimen/activity_vertical_margin&quot;&gt; &lt;ListView android:id=&quot;@+id/list_view_demo&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:background=&quot;@color/white&quot; &gt; &lt;/ListView&gt; activity_list_view_demo.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; android:background=&quot;@color/blue&quot;&gt; &lt;/LinearLayout&gt; ChatMessage.java package com.imooc.demo.model; /** * Function: * Create date on 16/8/13. * * @author Conquer * @version 1.0 */ public class ChatMessage { public ChatMessage(int myID, int friendID, String name, String date, String content, String time, String avatarUrl, boolean isComeMessage) { this.myID = myID; this.friendID = friendID; this.name = name; this.date = date; this.content = content; this.time = time; this.avatarUrl = avatarUrl; this.isComeMessage = isComeMessage; } private int myID; private int friendID; private String name; private String date; private String content; private String time; private String avatarUrl; private boolean isComeMessage = true; public String getAvatarUrl() { return avatarUrl; } public void setAvatarUrl(String avatarUrl) { this.avatarUrl = avatarUrl; } public String getTime() { return time; } public void setTime(String time) { this.time = time; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getDate() { return date; } public void setDate(String date) { this.date = date; } public String getContent() { return content; } public void setContent(String content) { this.content = content; } public boolean getMsgType() { return isComeMessage; } public void setMsgType(boolean isComMsg) { isComeMessage = isComMsg; } public ChatMessage() { } public int getMyID() { return myID; } public void setMyID(int myID) { this.myID = myID; } public int getFriendID() { return friendID; } public void setFriendID(int friendID) { this.friendID = friendID; } public boolean isComeMessage() { return isComeMessage; } public void setComeMessage(boolean isComMeg) { this.isComeMessage = isComMeg; } } ActivityItem.java package com.imooc.demo.model; /** * Function: * Create date on 16/8/9. * * @author Conquer * @version 1.0 */ public class ActivityItem { private String mName; private Class mActivityClass; public ActivityItem(String name, Class activityClass) { mName = name; mActivityClass = activityClass; } public String getName() { return mName; } public void setName(String name) { mName = name; } public Class getActivityClass() { return mActivityClass; } public void setActivityClass(Class activityClass) { mActivityClass = activityClass; } } BaseListAdapter.java package com.imooc.demo.base; import android.content.Context; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.BaseAdapter; import java.util.List; /** * Function: * Create date on 16/8/9. * * @author Conquer * @version 1.0 */ public abstract class BaseListAdapter&lt;T&gt; extends BaseAdapter { private List&lt;T&gt; mList; private final Context mContext; public BaseListAdapter(Context context) { this.mContext = context; } public BaseListAdapter(Context context, List&lt;T&gt; list) { mContext = context; mList = list; } public Context getContext() { return mContext; } @Override public int getCount() { return mList != null ? mList.size() : 0; } @Override public T getItem(int position) { return mList != null ? mList.get(position) : null; } @Override public long getItemId(int position) { return position; } public void setData(List&lt;T&gt; list) { mList = list; notifyDataSetChanged(); } public List&lt;T&gt; getList() { return mList; } @Override public View getView(int position, View convertView, ViewGroup parent) { if (convertView == null) { convertView = onNewItemView(LayoutInflater.from(mContext), parent, position); } onBindItemView(convertView, getItem(position), position, parent); return convertView; } protected abstract View onNewItemView(LayoutInflater inflater, ViewGroup parent, int position); protected abstract void onBindItemView(View viewItem, T data, int position, ViewGroup parent); public void notifyDataSetChanged(List&lt;T&gt; mList) { this.mList = mList; notifyDataSetChanged(); } } BindableAdapter.java package com.imooc.demo.base; import android.content.Context; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import java.util.List; /** * Function: * Create date on 16/8/9. * * @author Conquer * @version 1.0 */ public abstract class BindableAdapter&lt;T&gt; extends BaseListAdapter&lt;T&gt; { public BindableAdapter(Context context) { super(context); } public BindableAdapter(Context context, List&lt;T&gt; list) { super(context, list); } @Override public final View getDropDownView(int position, View view, ViewGroup container) { if (view == null) { view = newDropDownView(LayoutInflater.from(getContext()), position, container); if (view == null) { throw new IllegalStateException(&quot;newDropDownView result must not be null.&quot;); } } bindDropDownView(getItem(position), position, view, container); return view; } /** * Create a new instance of a drop-down view for the specified position. */ public View newDropDownView(LayoutInflater inflater, int position, ViewGroup container) { return onNewItemView(inflater, container, position); } /** * Bind the data for the specified {@code position} to the drop-down view. */ public void bindDropDownView(T item, int position, View view, ViewGroup container) { onBindItemView(view, item, position, container); } } MainActivity.java package com.imooc.demo.app; import android.os.Bundle; import android.support.v7.app.AppCompatActivity; import android.widget.ListView; import com.imooc.demo.R; import com.imooc.demo.adapter.MainListAdapter; import com.imooc.demo.app.listview.ChatActivity; import com.imooc.demo.app.listview.RequestDataActivity; import com.imooc.demo.model.ActivityItem; import java.util.ArrayList; public class MainActivity extends AppCompatActivity { private ListView mListView; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mListView = (ListView) findViewById(R.id.list_view_demo); ArrayList&lt;ActivityItem&gt; activityItems = new ArrayList&lt;&gt;(); activityItems.add(new ActivityItem(&quot;1. 异步请求数据列表&quot;, RequestDataActivity.class)); activityItems.add(new ActivityItem(&quot;2. 模仿IM聊天布局&quot;, ChatActivity.class)); mListView.setAdapter(new MainListAdapter(MainActivity.this,activityItems )); } } RequestDataActivity.java package com.imooc.demo.app.listview; import android.content.Context; import android.os.AsyncTask; import android.os.Bundle; import android.support.v7.app.AppCompatActivity; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.BaseAdapter; import android.widget.ImageView; import android.widget.ListView; import android.widget.TextView; import com.imooc.demo.R; import com.imooc.demo.app.model.LessonInfo; import com.imooc.demo.app.model.LessonResult; import org.json.JSONArray; import org.json.JSONException; import org.json.JSONObject; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.net.HttpURLConnection; import java.net.URL; import java.util.ArrayList; import java.util.List; public class RequestDataActivity extends AppCompatActivity { private ListView mListView; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mListView = (ListView) findViewById(R.id.list_view_demo); LayoutInflater layoutInflater = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE); View view = layoutInflater.inflate(R.layout.header_list_demo, null); mListView.addFooterView(view); new AppAsyncTask().execute(); } public class AppListAdapter extends BaseAdapter { private Context mContext; private List&lt;LessonInfo&gt; mInfos; public AppListAdapter(Context context, List&lt;LessonInfo&gt; infos) { mContext = context; mInfos = infos; } @Override public int getCount() { return mInfos.size(); } @Override public Object getItem(int position) { return mInfos.get(position); } @Override public long getItemId(int position) { return position; } @Override public View getView(final int position, View convertView, ViewGroup parent) { ViewHolder viewHolder; LayoutInflater layoutInflater = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE); if(convertView == null){ viewHolder = new ViewHolder(); convertView = layoutInflater.inflate(R.layout.item_demo_list, null); // 获取控件 viewHolder.nameTextView = (TextView) convertView.findViewById(R.id.title_text_view); viewHolder.avatarImageView = (ImageView) convertView.findViewById(R.id.icon_image_view); convertView.setTag(viewHolder); } else { viewHolder = (ViewHolder) convertView.getTag(); } // 和数据之间进行绑定 viewHolder.nameTextView.setText(mInfos.get(position).getName()); viewHolder.avatarImageView.setVisibility(View.GONE); return convertView; } class ViewHolder { ImageView avatarImageView; TextView nameTextView; } } public class AppAsyncTask extends AsyncTask&lt;Void,Integer, String&gt; { @Override protected String doInBackground(Void... params) { return request(&quot;http://www.imooc.com/api/teacher?type=2&amp;page=1&quot;); } @Override protected void onPostExecute(String result) { super.onPostExecute(result); LessonResult lessonResult = new LessonResult(); try { JSONObject jsonObject = new JSONObject(result); int status = jsonObject.getInt(&quot;status&quot;); String message = jsonObject.getString(&quot;msg&quot;); lessonResult.setStatus(status); lessonResult.setMessage(message); List&lt;LessonInfo&gt; lessonInfos = new ArrayList&lt;&gt;(); JSONArray dataArray = jsonObject.getJSONArray(&quot;data&quot;); for (int i = 0; i &lt; dataArray.length(); i++) { LessonInfo lessonInfo = new LessonInfo(); JSONObject tempJsonObject = (JSONObject) dataArray.get(i); lessonInfo.setID(tempJsonObject.getInt(&quot;id&quot;)); lessonInfo.setName(tempJsonObject.getString(&quot;name&quot;)); lessonInfos.add(lessonInfo); } lessonResult.setLessonInfos(lessonInfos); } catch (JSONException e) { e.printStackTrace(); } mListView.setAdapter(new AppListAdapter(RequestDataActivity.this, lessonResult.getLessonInfos())); } private String request(String urlString) { try { URL url = new URL(urlString); HttpURLConnection connection = (HttpURLConnection) url.openConnection(); connection.setConnectTimeout(30000); connection.setRequestMethod(&quot;GET&quot;); // GET POST connection.connect(); int responseCode = connection.getResponseCode(); String responseMessage = connection.getResponseMessage(); String result = null; if(responseCode == HttpURLConnection.HTTP_OK){ InputStreamReader inputStreamReader = new InputStreamReader(connection.getInputStream()); BufferedReader bufferedReader = new BufferedReader(inputStreamReader); StringBuilder stringBuilder = new StringBuilder(); String line; while ((line = bufferedReader.readLine()) != null) { stringBuilder.append(line); } result = stringBuilder.toString(); } else { // TODO: } return result; } catch (IOException e) { e.printStackTrace(); } return null; } } } ChatActivity.java package com.imooc.demo.app.listview; import android.content.Context; import android.os.Bundle; import android.support.v7.app.AppCompatActivity; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.BaseAdapter; import android.widget.ImageView; import android.widget.ListView; import android.widget.TextView; import com.imooc.demo.R; import com.imooc.demo.model.ChatMessage; import java.util.ArrayList; import java.util.List; public class ChatActivity extends AppCompatActivity { private ListView mListView; List&lt;ChatMessage&gt; mChatMessages = new ArrayList&lt;&gt;(); @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mListView = (ListView) findViewById(R.id.list_view_demo); ChatMessage chatMessage = new ChatMessage(1,2,&quot;刘小明&quot;,&quot;8:20&quot;,&quot;你好吗&quot;,&quot;&quot;,&quot;&quot;,true); ChatMessage chatMessage2 = new ChatMessage(2,1,&quot;小军&quot;,&quot;8:21&quot;,&quot;我很好&quot;,&quot;&quot;,&quot;&quot;,false); ChatMessage chatMessage3 = new ChatMessage(1,2,&quot;刘小明&quot;,&quot;8:22&quot;,&quot;今天天气怎么样&quot;,&quot;&quot;,&quot;&quot;,true); ChatMessage chatMessage4 = new ChatMessage(2,1,&quot;小军&quot;,&quot;8:23&quot;,&quot;热成狗了&quot;,&quot;&quot;,&quot;&quot;,false); mChatMessages.add(chatMessage); mChatMessages.add(chatMessage2); mChatMessages.add(chatMessage3); mChatMessages.add(chatMessage4); mListView.setAdapter(new ChatMessageAdapter(this, mChatMessages)); } public static class ChatMessageAdapter extends BaseAdapter { public interface IMessageViewType { int COM_MESSAGE = 0; int TO_MESSAGE = 1; } private List&lt;ChatMessage&gt; mChatMessages; private LayoutInflater mInflater; public ChatMessageAdapter(Context context, List&lt;ChatMessage&gt; coll) { this.mChatMessages = coll; mInflater = LayoutInflater.from(context); } public int getCount() { return mChatMessages.size(); } public Object getItem(int position) { return mChatMessages.get(position); } public long getItemId(int position) { return position; } public int getItemViewType(int position) { ChatMessage entity = mChatMessages.get(position); if (entity.getMsgType()) { return IMessageViewType.COM_MESSAGE; } else { return IMessageViewType.TO_MESSAGE; } } public int getViewTypeCount() { return 2; } public View getView(int position, View convertView, ViewGroup parent) { final ChatMessage entity = mChatMessages.get(position); boolean isComMsg = entity.getMsgType(); ViewHolder viewHolder; if (convertView == null) { if (isComMsg) { convertView = mInflater.inflate(R.layout.chatting_item_msg_text_left, null); } else { convertView = mInflater.inflate(R.layout.chatting_item_msg_text_right, null); } viewHolder = new ViewHolder(); viewHolder.mSendTime = (TextView) convertView.findViewById(R.id.tv_send_time); viewHolder.mUserName = (TextView) convertView.findViewById(R.id.tv_username); viewHolder.mContent = (TextView) convertView.findViewById(R.id.tv_chat_content); viewHolder.mTime = (TextView) convertView.findViewById(R.id.tv_time); viewHolder.mUserAvatar = (ImageView) convertView.findViewById(R.id.iv_user_head); viewHolder.mIsComMessage = isComMsg; convertView.setTag(viewHolder); } else { viewHolder = (ViewHolder) convertView.getTag(); } viewHolder.mSendTime.setText(entity.getDate()); viewHolder.mContent.setText(entity.getContent()); viewHolder.mContent.setCompoundDrawablesWithIntrinsicBounds(0, 0, 0, 0); viewHolder.mTime.setText(&quot;&quot;); viewHolder.mUserName.setText(entity.getName()); if (isComMsg) { viewHolder.mUserAvatar.setImageResource(R.drawable.avatar); } else { viewHolder.mUserAvatar.setImageResource(R.mipmap.ic_launcher); // ImageLoader.getInstance().displayImage(entity.getAvatarUrl(), viewHolder.mUserAvatar); } return convertView; } class ViewHolder { public TextView mSendTime; public TextView mUserName; public TextView mContent; public TextView mTime; public ImageView mUserAvatar; public boolean mIsComMessage = true; } } } MainListAdapter.java package com.imooc.demo.adapter; import android.content.Context; import android.content.Intent; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.TextView; import com.imooc.demo.R; import com.imooc.demo.base.BindableAdapter; import com.imooc.demo.model.ActivityItem; import java.util.List; /** * Function: * Create date on 16/8/9. * * @author Conquer * @version 1.0 */ public class MainListAdapter extends BindableAdapter&lt;ActivityItem&gt; { private Context mContext; public MainListAdapter(Context context, List&lt;ActivityItem&gt; list) { super(context, list); mContext = context; } @Override protected View onNewItemView(LayoutInflater inflater, ViewGroup parent, int position) { View view = inflater.inflate(R.layout.item_main_list, null); ViewHolder holder = new ViewHolder(); holder.mTitle = (TextView) view.findViewById(R.id.title); view.setTag(holder); return view; } @Override protected void onBindItemView(View viewItem, final ActivityItem data, int position, ViewGroup parent) { ViewHolder holder = (ViewHolder) viewItem.getTag(); holder.mTitle.setText(data.getName()); viewItem.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { mContext.startActivity(new Intent(mContext, data.getActivityClass())); } }); } private class ViewHolder { private TextView mTitle; } } 如果xml文件的地方，图片处报红，请下载本文配套代码，从中提取该图片 运行效果： 项目Demo下载： https://download.csdn.net/download/weimeig/10409593","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"Retrofit框架（二）","slug":"RetrofitTwo","date":"2018-01-27T05:11:22.000Z","updated":"2018-06-09T05:09:13.619Z","comments":true,"path":"2018/01/27/RetrofitTwo/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2018/01/27/RetrofitTwo/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 一、GET请求列表数据展示 添加依赖 dependencies { compile &apos;com.squareup.picasso:picasso:2.5.2&apos; compile &apos;com.squareup.retrofit2:retrofit:2.0.2&apos; compile &apos;com.squareup.retrofit2:converter-gson:2.0.0-beta3&apos; } item.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;horizontal&quot;&gt; &lt;ImageView android:id=&quot;@+id/item_image&quot; android:layout_width=&quot;70dp&quot; android:layout_height=&quot;70dp&quot; /&gt; &lt;LinearLayout android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;vertical&quot; android:layout_weight=&quot;1&quot;&gt; &lt;TextView android:id=&quot;@+id/item_title&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:textAppearance=&quot;@android:style/TextAppearance.Large&quot;/&gt; &lt;TextView android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/item_info&quot; android:maxLines=&quot;2&quot; android:ellipsize=&quot;end&quot;/&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt; activity_main.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;android.support.constraint.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;com.administrator.picassodemo.MainActivity&quot;&gt; &lt;ListView android:id=&quot;@+id/main_list&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;/ListView&gt; &lt;/android.support.constraint.ConstraintLayout&gt; 数据实体类 Cook.java package com.administrator.picassodemo; import com.google.gson.annotations.SerializedName; /** * Created by Administrator on 2018/5/16. */ public class Cook { @SerializedName(&quot;id&quot;) private int id; @SerializedName(&quot;name&quot;) private String name; @SerializedName(&quot;food&quot;) private String food; @SerializedName(&quot;img&quot;) private String img; @SerializedName(&quot;images&quot;) private String images; @SerializedName(&quot;description&quot;) private String description; @SerializedName(&quot;keywords&quot;) private String keywords; @SerializedName(&quot;message&quot;) private String message; @SerializedName(&quot;count&quot;) private int count; @SerializedName(&quot;fcount&quot;) private int fcount; @SerializedName(&quot;rcount&quot;) private int rcount; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getFood() { return food; } public void setFood(String food) { this.food = food; } public String getImg() { return img; } public void setImg(String img) { this.img = img; } public String getImages() { return images; } public void setImages(String images) { this.images = images; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } public String getKeywords() { return keywords; } public void setKeywords(String keywords) { this.keywords = keywords; } public String getMessage() { return message; } public void setMessage(String message) { this.message = message; } public int getCount() { return count; } public void setCount(int count) { this.count = count; } public int getFcount() { return fcount; } public void setFcount(int fcount) { this.fcount = fcount; } public int getRcount() { return rcount; } public void setRcount(int rcount) { this.rcount = rcount; } } 返回的数据有集合数据，所以建立集合数据实体类 Tngou.java package com.administrator.picassodemo; import com.google.gson.annotations.SerializedName; import java.util.List; /** * Created by Administrator on 2018/5/16. */ public class Tngou { @SerializedName(&quot;status&quot;) private boolean status; @SerializedName(&quot;total&quot;) private int total; @SerializedName(&quot;tngou&quot;) private List&lt;Cook&gt; list; public boolean isStatus() { return status; } public void setStatus(boolean status) { this.status = status; } public int getTotal() { return total; } public void setTotal(int total) { this.total = total; } public List&lt;Cook&gt; getList() { return list; } public void setList(List&lt;Cook&gt; list) { this.list = list; } } 建立数据加载适配器 MyAdapter.java package com.administrator.picassodemo; import android.content.Context; import android.support.annotation.Nullable; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.BaseAdapter; import android.widget.ImageView; import android.widget.TextView; import com.squareup.picasso.Picasso; import java.util.Collection; import java.util.List; /** * Created by Administrator on 2018/5/16. */ public class MyAdapter extends BaseAdapter { private Context context; private List&lt;Cook&gt; list; public MyAdapter(Context context, List&lt;Cook&gt; list) { this.context = context; this.list = list; } @Override public int getCount() { return list.size(); } @Override public Object getItem(int position) { return list.get(position); } @Override public long getItemId(int position) { return list.get(position).getId(); } @Override public View getView(int position, View convertView, ViewGroup parent) { if(convertView == null){ convertView = LayoutInflater.from(context) .inflate(R.layout.item,parent,false); } ViewHolder holder = (ViewHolder)convertView.getTag(); Cook cook = list.get(position); holder.title.setText(cook.getName()); holder.info.setText(cook.getDescription()); Picasso.with(context).load(&quot;http://tnfs.tngou.net/img&quot;+cook.getImg()).into(holder.image); return convertView; } public void addAll(Collection&lt;? extends Cook&gt; collection){ list.addAll(collection); notifyDataSetChanged(); } public static class ViewHolder{ private ImageView image; private TextView title; private TextView info; public ViewHolder(View item) { image = (ImageView)item.findViewById(R.id.item_image); title = (TextView)item.findViewById(R.id.item_title); info = (TextView)item.findViewById(R.id.item_info); } } } 建立接口文件 Service.java package com.administrator.picassodemo; import retrofit2.Call; import retrofit2.http.GET; import retrofit2.http.Path; import retrofit2.http.Query; /** * Created by Administrator on 2018/5/16. */ public interface Service { @GET(&quot;/api/{category}/list&quot;)//大括号内传参数，如果连接变化只存在一个参数区别，则改变传入参数即可 Call&lt;Tngou&gt; getList(@Path(&quot;category&quot;) String category,@Query(&quot;id&quot;) int id, @Query(&quot;page&quot;) int page, @Query(&quot;rows&quot;) int rows); } MainActivity.java package com.administrator.picassodemo; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.widget.ListView; import android.widget.TextView; import java.util.ArrayList; import java.util.List; import retrofit2.Call; import retrofit2.Callback; import retrofit2.GsonConverterFactory; import retrofit2.Response; import retrofit2.Retrofit; public class MainActivity extends AppCompatActivity implements Callback&lt;Tngou&gt; { private MyAdapter adapter; private TextView mTextView; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mTextView = findViewById(R.id.tvContent); //addConverterFactory()解析下载数据 Retrofit retrofit = new Retrofit.Builder().baseUrl(&quot;http://www.tngou.net&quot;) .addConverterFactory(GsonConverterFactory.create()) .build(); Service service = retrofit.create(Service.class); Call&lt;Tngou&gt; call = service.getList(&quot;cook&quot;,0,1,20); // Call&lt;Tngou&gt; call = service.getList(&quot;top&quot;,0,1,20); call.enqueue(this); ListView listView = (ListView)findViewById(R.id.main_list); adapter = new MyAdapter(this,new ArrayList&lt;Cook&gt;()); listView.setAdapter(adapter); } @Override public void onResponse(Call&lt;Tngou&gt; call, Response&lt;Tngou&gt; response) { List&lt;Cook&gt; list = response.body().getList(); } @Override public void onFailure(Call&lt;Tngou&gt; call, Throwable t) { t.printStackTrace(); } } 二、POST请求xml解析 添加依赖 dependencies { compile &apos;com.squareup.retrofit2:retrofit:2.0.2&apos; compile &apos;com.squareup.retrofit2:converter-gson:2.0.0-beta3&apos; compile(&apos;com.squareup.retrofit2:converter-simplexml:2.0.0-beta4&apos;) { exclude group: &apos;xpp3&apos;, module: &apos;xpp3&apos; exclude group: &apos;stax&apos;, module: &apos;stax-api&apos; exclude group: &apos;stax&apos;, module: &apos;stax&apos; } } AndroidManifest.xml中添加网络访问权限 &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt; Channel.java package com.administrator.xmldemo; import org.simpleframework.xml.Element; import org.simpleframework.xml.ElementList; import org.simpleframework.xml.Path; import org.simpleframework.xml.Root; import java.util.List; /** * Created by Administrator on 2018/5/17. */ @Root(strict = false)//是否严格检查 public class Channel { @Path(&quot;channel&quot;) @Element(name = &quot;title&quot;) private String title; @Path(&quot;channel&quot;) @ElementList(entry = &quot;item&quot;,inline = true) private List&lt;item&gt; list; public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } public List&lt;item&gt; getList() { return list; } public void setList(List&lt;item&gt; list) { this.list = list; } } Item.java package com.administrator.xmldemo; import org.simpleframework.xml.Element; import org.simpleframework.xml.Root; /** * Created by Administrator on 2018/5/17. */ @Root(strict = false) public class Item { @Element(name = &quot;title&quot;) private String title; } Service.java package com.administrator.xmldemo; import retrofit2.Call; import retrofit2.http.GET; /** * Created by Administrator on 2018/5/17. */ public interface Service { @GET(&quot;/protal.php?mod=rss&amp;catid=&quot;) Call&lt;Channel&gt; getChannel(); } MainActivity.java package com.administrator.xmldemo; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.util.Log; import retrofit2.Call; import retrofit2.Callback; import retrofit2.Response; import retrofit2.Retrofit; import retrofit2.converter.simplexml.SimpleXmlConverterFactory; public class MainActivity extends AppCompatActivity implements Callback&lt;Channel&gt; { private static final String TAG = &quot;MainActivity&quot;; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Retrofit retrofit = new Retrofit.Builder().baseUrl(&quot;http://www.inexus.co&quot;) .addConverterFactory(SimpleXmlConverterFactory.create()).build(); Service service = retrofit.create(Service.class); Call&lt;Channel&gt; channel = service.getChannel(); channel.enqueue(this); } @Override public void onResponse(Call&lt;Channel&gt; call, Response&lt;Channel&gt; response) { Channel channel = response.body(); Log.e(TAG,String.valueOf(response.body())); } @Override public void onFailure(Call&lt;Channel&gt; call, Throwable t) { } }","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"Retrofit框架（一）","slug":"RetrofitOne","date":"2018-01-27T04:10:23.000Z","updated":"2018-06-09T05:06:09.402Z","comments":true,"path":"2018/01/27/RetrofitOne/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2018/01/27/RetrofitOne/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 一、使用Retrofit框架请求网页 一、添加依赖 请见 https://blog.csdn.net/weimeig/article/details/78656178 二、建立接口文件 Service.java package com.administrator.picassodemo; import retrofit2.Call; import retrofit2.http.GET; /** * Created by Administrator on 2018/5/16. */ public interface Service { @GET(&quot;/&quot;)//括号内可以不写，也可以写网页的子目录 Call&lt;String&gt; getBaidu(); } 三、创建实例 MainActivity.java package com.administrator.picassodemo; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.widget.TextView; import android.widget.Toast; import java.io.IOException; import java.lang.annotation.Annotation; import java.lang.reflect.Type; import okhttp3.ResponseBody; import retrofit2.Call; import retrofit2.Callback; import retrofit2.Converter; import retrofit2.Response; import retrofit2.Retrofit; public class MainActivity extends AppCompatActivity implements Callback&lt;String&gt; { private TextView mTextView; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mTextView = findViewById(R.id.tvContent); //addConverterFactory()解析下载数据 Retrofit retrofit = new Retrofit.Builder() .baseUrl(&quot;http://qq.com&quot;) .addConverterFactory(new Converter.Factory() { @Override public Converter&lt;ResponseBody, ?&gt; responseBodyConverter(Type type, Annotation[] annotations, Retrofit retrofit) { return new Converter&lt;ResponseBody, String&gt;() { @Override public String convert(ResponseBody value) throws IOException { return value.string(); } }; } }).build(); //用实例出来一个Service Service service = retrofit.create(Service.class); //用直接get出来一个请求 Call&lt;String&gt; call = service.getBaidu(); // 异步请求 call.enqueue(this); } // ------得到两个反馈------ @Override public void onResponse(Call&lt;String&gt; call, Response&lt;String&gt; response) { mTextView.setText(response.body()); } @Override public void onFailure(Call&lt;String&gt; call, Throwable t) { Toast.makeText(this,&quot;请求失败&quot;+call.request().url(),Toast.LENGTH_SHORT).show(); t.printStackTrace(); } } activity_main.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;android.support.constraint.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;com.administrator.picassodemo.MainActivity&quot;&gt; &lt;ScrollView android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;TextView android:id=&quot;@+id/tvContent&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; /&gt; &lt;/ScrollView&gt; &lt;/android.support.constraint.ConstraintLayout&gt; 二、get请求和数据解析 (一)、添加依赖 dependencies { compile &apos;com.squareup.retrofit2:retrofit:2.0.2&apos; compile &apos;com.squareup.retrofit2:converter-gson:2.0.0-beta3&apos; } activity_main.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;android.support.constraint.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;com.administrator.picassodemo.MainActivity&quot;&gt; &lt;ScrollView android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;TextView android:id=&quot;@+id/tvContent&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; /&gt; &lt;/ScrollView&gt; &lt;/android.support.constraint.ConstraintLayout&gt; 数据实体类 Cook.java package com.administrator.picassodemo; import com.google.gson.annotations.SerializedName; /** * Created by Administrator on 2018/5/16. */ public class Cook { @SerializedName(&quot;id&quot;) private int id; @SerializedName(&quot;name&quot;) private String name; @SerializedName(&quot;food&quot;) private String food; @SerializedName(&quot;img&quot;) private String img; @SerializedName(&quot;images&quot;) private String images; @SerializedName(&quot;description&quot;) private String description; @SerializedName(&quot;keywords&quot;) private String keywords; @SerializedName(&quot;message&quot;) private String message; @SerializedName(&quot;count&quot;) private int count; @SerializedName(&quot;fcount&quot;) private int fcount; @SerializedName(&quot;rcount&quot;) private int rcount; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getFood() { return food; } public void setFood(String food) { this.food = food; } public String getImg() { return img; } public void setImg(String img) { this.img = img; } public String getImages() { return images; } public void setImages(String images) { this.images = images; } public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } public String getKeywords() { return keywords; } public void setKeywords(String keywords) { this.keywords = keywords; } public String getMessage() { return message; } public void setMessage(String message) { this.message = message; } public int getCount() { return count; } public void setCount(int count) { this.count = count; } public int getFcount() { return fcount; } public void setFcount(int fcount) { this.fcount = fcount; } public int getRcount() { return rcount; } public void setRcount(int rcount) { this.rcount = rcount; } } 返回的数据有集合数据，所以建立集合数据实体类 Tngou.java package com.administrator.picassodemo; import com.google.gson.annotations.SerializedName; import java.util.List; /** * Created by Administrator on 2018/5/16. */ public class Tngou { @SerializedName(&quot;status&quot;) private boolean status; @SerializedName(&quot;total&quot;) private int total; @SerializedName(&quot;tngou&quot;) private List&lt;Cook&gt; list; public boolean isStatus() { return status; } public void setStatus(boolean status) { this.status = status; } public int getTotal() { return total; } public void setTotal(int total) { this.total = total; } public List&lt;Cook&gt; getList() { return list; } public void setList(List&lt;Cook&gt; list) { this.list = list; } } 建立接口文件 Service.java package com.administrator.picassodemo; import retrofit2.Call; import retrofit2.http.GET; import retrofit2.http.Query; /** * Created by Administrator on 2018/5/16. */ public interface Service { @GET(&quot;/api/cook/list&quot;)//括号内可以不写，也可以写网页的子目录 Call&lt;Tngou&gt; getList(@Query(&quot;id&quot;) int id, @Query(&quot;page&quot;) int page,@Query(&quot;rows&quot;) int rows); } MainActivity.java package com.administrator.picassodemo; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.widget.TextView; import java.util.List; import retrofit2.Call; import retrofit2.Callback; import retrofit2.GsonConverterFactory; import retrofit2.Response; import retrofit2.Retrofit; public class MainActivity extends AppCompatActivity implements Callback&lt;Tngou&gt; { private TextView mTextView; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mTextView = findViewById(R.id.tvContent); //addConverterFactory()解析下载数据 Retrofit retrofit = new Retrofit.Builder().baseUrl(&quot;http://www.tngou.net&quot;) .addConverterFactory(GsonConverterFactory.create()) .build(); Service service = retrofit.create(Service.class); Call&lt;Tngou&gt; call = service.getList(0,1,20); call.enqueue(this); } @Override public void onResponse(Call&lt;Tngou&gt; call, Response&lt;Tngou&gt; response) { List&lt;Cook&gt; list = response.body().getList(); } @Override public void onFailure(Call&lt;Tngou&gt; call, Throwable t) { t.printStackTrace(); } }","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"Retrofit实现登录与注册网络请求，及代码优化","slug":"RetrofitLoginDemo","date":"2018-01-23T05:10:23.000Z","updated":"2018-06-09T06:30:47.850Z","comments":true,"path":"2018/01/23/RetrofitLoginDemo/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2018/01/23/RetrofitLoginDemo/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 activity_main.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; tools:context=&quot;com.administrator.testapp.MainActivity&quot;&gt; &lt;Button android:id=&quot;@+id/login_btn&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;登录&quot; /&gt; &lt;Button android:id=&quot;@+id/regist_btn&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;注册&quot; /&gt; &lt;/LinearLayout&gt; Api.java package com.administrator.testapp; import retrofit2.Call; import retrofit2.http.Field; import retrofit2.http.FormUrlEncoded; import retrofit2.http.POST; /** * Created by Administrator on 2018/5/18. */ public interface Api { @POST @FormUrlEncoded Call&lt;String&gt; get(@Field(&quot;111&quot;) String name); //用户注册 @POST(&quot;account/register&quot;) @FormUrlEncoded Call&lt;String&gt; postRegister(@Field(&quot;phone&quot;) String phone,@Field(&quot;password&quot;) String password); //用户登录 @POST(&quot;account/login&quot;) @FormUrlEncoded Call&lt;UserInfo&gt; postLogin(@Field(&quot;phone&quot;) String phone,@Field(&quot;password&quot;) String password); } MyCallBack.java package com.administrator.testapp; import android.app.Activity; import retrofit2.Call; import retrofit2.Callback; import retrofit2.Response; /** * Created by Administrator on 2018/5/18. */ public abstract class MyCallBack&lt;T&gt; implements Callback&lt;T&gt; { private Activity mActivity; public MyCallBack(Activity activity){ mActivity = activity; } @Override public void onResponse(final Call&lt;T&gt; call, final Response&lt;T&gt; response) { /** * 运行在主线程 */ mActivity.runOnUiThread(new Runnable() { @Override public void run() { onSuccess(call,response); } }); } @Override public void onFailure(final Call&lt;T&gt; call, final Throwable t) { /** * 运行在主线程 */ mActivity.runOnUiThread(new Runnable() { @Override public void run() { onFailure(call,t); } }); } protected abstract void onSuccess(Call&lt;T&gt; call, Response&lt;T&gt; response); protected void onFailed(Call&lt;T&gt; call, Throwable t){} } UserInfo.java package com.administrator.testapp; import com.google.gson.annotations.SerializedName; /** * Created by Administrator on 2018/5/18. */ public class UserInfo { /** * code : 200 * data : {&quot;id&quot;:11,&quot;userId&quot;:&quot;708c81de-e771-4023-a1e1-e4e1c25ef4db&quot;,&quot;phone&quot;:&quot;13800000000&quot;,&quot;password&quot;:&quot;f059cb6d44add2376f3859059383bbbe&quot;,&quot;enable&quot;:0,&quot;createDate&quot;:1526631243000,&quot;updateDate&quot;:1526631243000} * info : 登录成功 */ @SerializedName(&quot;code&quot;) private int code; @SerializedName(&quot;data&quot;) private DataBean data; @SerializedName(&quot;info&quot;) private String info; public int getCode() { return code; } public void setCode(int code) { this.code = code; } public DataBean getData() { return data; } public void setData(DataBean data) { this.data = data; } public String getInfo() { return info; } public void setInfo(String info) { this.info = info; } public static class DataBean { /** * id : 11 * userId : 708c81de-e771-4023-a1e1-e4e1c25ef4db * phone : 13800000000 * password : f059cb6d44add2376f3859059383bbbe * enable : 0 * createDate : 1526631243000 * updateDate : 1526631243000 */ @SerializedName(&quot;id&quot;) private int id; @SerializedName(&quot;userId&quot;) private String userId; @SerializedName(&quot;phone&quot;) private String phone; @SerializedName(&quot;password&quot;) private String password; @SerializedName(&quot;enable&quot;) private int enable; @SerializedName(&quot;createDate&quot;) private long createDate; @SerializedName(&quot;updateDate&quot;) private long updateDate; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getUserId() { return userId; } public void setUserId(String userId) { this.userId = userId; } public String getPhone() { return phone; } public void setPhone(String phone) { this.phone = phone; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public int getEnable() { return enable; } public void setEnable(int enable) { this.enable = enable; } public long getCreateDate() { return createDate; } public void setCreateDate(long createDate) { this.createDate = createDate; } public long getUpdateDate() { return updateDate; } public void setUpdateDate(long updateDate) { this.updateDate = updateDate; } } } RetrofitUtil.java package com.administrator.testapp; import java.util.concurrent.TimeUnit; import okhttp3.OkHttpClient; import retrofit2.GsonConverterFactory; import retrofit2.Retrofit; import retrofit2.converter.scalars.ScalarsConverterFactory; /** * Created by Administrator on 2018/5/18. */ public class RetrofitUtil { private static Retrofit sRetrofit; private static OkHttpClient mOkHttpClient; private RetrofitUtil(){} public static class Hide{ static RetrofitUtil sRetrofitUtil = new RetrofitUtil(); } public static RetrofitUtil getInstance() { return Hide.sRetrofitUtil; } public Api build(){ if(mOkHttpClient == null){ mOkHttpClient = new OkHttpClient.Builder() .connectTimeout(10, TimeUnit.SECONDS) .readTimeout(10, TimeUnit.SECONDS) .writeTimeout(10, TimeUnit.SECONDS) .build(); } if(sRetrofit == null){ sRetrofit = new Retrofit.Builder() .baseUrl(&quot;http://116.196.111.10:8050/&quot;) .client(mOkHttpClient) .addConverterFactory(ScalarsConverterFactory.create()) //数据转换器 .addConverterFactory(GsonConverterFactory.create())//数据转换器 // .addCallAdapterFactory(RxJava2CallAdapterFactory.create())//rxjava转换器 .build(); } return sRetrofit.create(Api.class); } } MainActivity.java package com.administrator.testapp; import android.app.DownloadManager; import android.content.Intent; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.util.Log; import android.view.View; import android.widget.Button; import android.widget.Toast; import com.google.gson.Gson; import retrofit2.Call; import retrofit2.Callback; import retrofit2.Response; import retrofit2.Retrofit; public class MainActivity extends AppCompatActivity implements View.OnClickListener{ public UserInfo mUserInfo; private static final String TAG = &quot;MainActivity&quot;; private Button btnLogin; private Button btnRegister; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); btnLogin = findViewById(R.id.login_btn); btnRegister = findViewById(R.id.regist_btn); btnLogin.setOnClickListener(this); btnRegister.setOnClickListener(this); } @Override public void onClick(View v) { switch (v.getId()){ case R.id.login_btn: RetrofitUtil.getInstance().build() .postLogin(&quot;13800000000&quot;,&quot;a13800000000&quot;) .enqueue(new Callback&lt;UserInfo&gt;() { @Override public void onResponse(Call&lt;UserInfo&gt; call, Response&lt;UserInfo&gt; response) { UserInfo data = response.body(); //跨页面传值 // startActivity(new Intent(MainActivity.this,xxx.class).putExtra(&quot;data&quot;,new Gson().toJson(data))); // SpUtil mSpUtil = new SpUtil(MainActivity.this,new Gson().toJson(data)); // UserInfo mUserInfo = response.body(); // Log.e(TAG,String.valueOf(mUserInfo.getData().getId())); //// ---------------------------- // /** // * 存 // */ // MyApplication.sSpUtil.putString(&quot;userInfo&quot;,new Gson().toJson(data)); // /** // * 取 // */ // String userInfo = MyApplication.sSpUtil.getString(&quot;userInfo&quot;); //// UserInfo u = new Gson().fromJson(userInfo,UserInfo.class);//把new Gson()封住进MyApplication类 // UserInfo u = MyApplication.sGson.fromJson(userInfo,UserInfo.class); // //// ------------------------------ /** * 存用户信息 */ MyApplication.setUserInfo(data); /** * 取用户信息 */ UserInfo mUserInfo = MyApplication.getUserInfo(); mUserInfo.getData().getId(); } @Override public void onFailure(Call&lt;UserInfo&gt; call, Throwable t) { } }); break; case R.id.regist_btn: RetrofitUtil.getInstance().build() .postRegister(&quot;13800000000&quot;,&quot;a13800000000&quot;) .enqueue(new Callback&lt;String&gt;() { @Override public void onResponse(Call&lt;String&gt; call, Response&lt;String&gt; response) { Log.e(TAG,&quot;onSuccess:&quot; +response.body()); } @Override public void onFailure(Call&lt;String&gt; call, Throwable t) { Log.e(TAG,&quot;onFailure:&quot; +t.toString()); // t.printStackTrace(); } }); // Log.e(TAG,&quot;注册&quot;); break; } } } SpUtil.java package com.administrator.testapp; import android.content.Context; import android.content.SharedPreferences; import java.util.Map; public class SpUtil { private SharedPreferences sp; private SharedPreferences.Editor editor; /** * SPUtils构造函数 * &lt;p&gt;在Application中初始化&lt;/p&gt; * * @param context 上下文 * @param spName spName */ public SpUtil(Context context, String spName) { sp = context.getSharedPreferences(spName, Context.MODE_PRIVATE); editor = sp.edit(); editor.apply(); } /** * SP中写入String类型value * * @param key 键 * @param value 值 */ public void putString(String key, String value) { editor.putString(key, value).apply(); } /** * SP中读取String * * @param key 键 * @return 存在返回对应值，不存在返回默认值{@code null} */ public String getString(String key) { return getString(key, null); } /** * SP中读取String * * @param key 键 * @param defaultValue 默认值 * @return 存在返回对应值，不存在返回默认值{@code defaultValue} */ public String getString(String key, String defaultValue) { return sp.getString(key, defaultValue); } /** * SP中写入int类型value * * @param key 键 * @param value 值 */ public void putInt(String key, int value) { editor.putInt(key, value).apply(); } /** * SP中读取int * * @param key 键 * @return 存在返回对应值，不存在返回默认值-1 */ public int getInt(String key) { return getInt(key, -1); } /** * SP中读取int * * @param key 键 * @param defaultValue 默认值 * @return 存在返回对应值，不存在返回默认值{@code defaultValue} */ public int getInt(String key, int defaultValue) { return sp.getInt(key, defaultValue); } /** * SP中写入long类型value * * @param key 键 * @param value 值 */ public void putLong(String key, long value) { editor.putLong(key, value).apply(); } /** * SP中读取long * * @param key 键 * @return 存在返回对应值，不存在返回默认值-1 */ public long getLong(String key) { return getLong(key, -1L); } /** * SP中读取long * * @param key 键 * @param defaultValue 默认值 * @return 存在返回对应值，不存在返回默认值{@code defaultValue} */ public long getLong(String key, long defaultValue) { return sp.getLong(key, defaultValue); } /** * SP中写入float类型value * * @param key 键 * @param value 值 */ public void putFloat(String key, float value) { editor.putFloat(key, value).apply(); } /** * SP中读取float * * @param key 键 * @return 存在返回对应值，不存在返回默认值-1 */ public float getFloat(String key) { return getFloat(key, -1f); } /** * SP中读取float * * @param key 键 * @param defaultValue 默认值 * @return 存在返回对应值，不存在返回默认值{@code defaultValue} */ public float getFloat(String key, float defaultValue) { return sp.getFloat(key, defaultValue); } /** * SP中写入boolean类型value * * @param key 键 * @param value 值 */ public void putBoolean(String key, boolean value) { editor.putBoolean(key, value).apply(); } /** * SP中读取boolean * * @param key 键 * @return 存在返回对应值，不存在返回默认值{@code false} */ public boolean getBoolean(String key) { return getBoolean(key, false); } /** * SP中读取boolean * * @param key 键 * @param defaultValue 默认值 * @return 存在返回对应值，不存在返回默认值{@code defaultValue} */ public boolean getBoolean(String key, boolean defaultValue) { return sp.getBoolean(key, defaultValue); } /** * SP中获取所有键值对 * * @return Map对象 */ public Map&lt;String, ?&gt; getAll() { return sp.getAll(); } /** * SP中移除该key * * @param key 键 */ public void remove(String key) { editor.remove(key).apply(); } /** * SP中是否存在该key * * @param key 键 * @return {@code true}: 存在&lt;br&gt;{@code false}: 不存在 */ public boolean contains(String key) { return sp.contains(key); } /** * SP中清除所有数据 */ public void clear() { editor.clear().apply(); } } Constant.java package com.administrator.testapp; /** * Created by Administrator on 2018/5/18. */ public class Constant { public static final String USERINFO = &quot;userInfo&quot;; } MyApplication.java package com.administrator.testapp; import android.app.Application; import com.google.gson.Gson; /** * Created by Administrator on 2018/5/18. * 这个类随着App的启动而启动随着App的销毁而销毁，不受Activity影响 * 里面的成员变量也不会随Activity销毁而销毁 */ public class MyApplication extends Application { public static SpUtil sSpUtil; public static Gson sGson; @Override public void onCreate() { super.onCreate(); sSpUtil = new SpUtil(this,&quot;config&quot;); sGson = new Gson(); } public static void setUserInfo(UserInfo userInfo){ sSpUtil.putString(Constant.USERINFO,sGson.toJson(userInfo)); } public static UserInfo getUserInfo(){ String userInfo = sSpUtil.getString(Constant.USERINFO); UserInfo u = sGson.fromJson(userInfo,UserInfo.class); return u; } } 别忘了调用MyApplication继承Application类的时候，为了MyApplication类能生效，在AndroidManifest.xml的application标签的name属性处设置值为name=”.MyApplication”,如图： A页面跳B页面传值 定义一个类，继承Application，这个类在App启动时启动，结束时结束 如果把body放在MyApplication里，则app销毁之前都在 该类内的值要确保不会有空指针，外部调用 其他类用 数据存取的方法 进一步提取公共部分 提取后调用发生了变化 如果十几个类都调用了userInfo，修改时候非常麻烦，提取公共部分，写个类Constant.java,修饰成静态的final 外部调用 这样就写活了 那我每次都要 String userInfo = MyApplication.sSpUtil.getString(Constant.USERINFO); User u = MyApplication.sGson.fromJson(userInfo,User.class); 这样写非常麻烦 我们可以吧这个方法写在application里 用的时候 万一你还要存 银行卡信息 或者别的信息 项目Demo： https://download.csdn.net/download/weimeig/10423816","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"Android网络请求，获取数据，解析数据Demo","slug":"NetworkRequest","date":"2018-01-13T01:17:27.000Z","updated":"2018-06-09T05:37:40.853Z","comments":true,"path":"2018/01/13/NetworkRequest/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2018/01/13/NetworkRequest/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 添加依赖 build.gradle dependencies { compile &apos;com.google.code.gson:gson:2.4&apos; } 右上角Sync Now 在AndroidManifest.xml中添加网络访问权限 &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt; 主页面布局 activity_main.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:id=&quot;@+id/activity_main&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; tools:context=&quot;com.example.httpdemo.MainActivity&quot;&gt; &lt;TextView android:id=&quot;@+id/header&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;48dp&quot; android:text=&quot;慕课&quot; android:textSize=&quot;28sp&quot; android:gravity=&quot;center&quot; android:textColor=&quot;#ffffff&quot; android:background=&quot;#3f51b5&quot; android:paddingRight=&quot;15dp&quot;/&gt; &lt;ImageView android:id=&quot;@+id/banner&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:scaleType=&quot;fitXY&quot;/&gt; &lt;ListView android:id=&quot;@+id/essay_view&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt;&lt;/ListView&gt; &lt;/LinearLayout&gt; 被跳转页面布局 activity_detail.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:id=&quot;@+id/content_detail&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:showIn=&quot;@layout/activity_detail&quot; android:orientation=&quot;vertical&quot; &gt; &lt;TextView android:id=&quot;@+id/name&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:textSize=&quot;24sp&quot; android:gravity=&quot;center&quot; android:layout_marginTop=&quot;15dp&quot; /&gt; &lt;TextView android:id=&quot;@+id/author&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:textSize=&quot;20sp&quot; android:gravity=&quot;right&quot; android:paddingRight=&quot;10dp&quot; android:layout_marginTop=&quot;15dp&quot;/&gt; &lt;TextView android:id=&quot;@+id/content&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:layout_margin=&quot;8dp&quot; android:layout_marginTop=&quot;15dp&quot; android:layout_weight=&quot;1&quot; android:lineSpacingMultiplier=&quot;1.5&quot; android:textSize=&quot;20sp&quot; /&gt; &lt;/LinearLayout&gt; 数据实体类 Essay.java package com.administrator.hellodemo; public class Essay { private String title; private String author; private String content; public Essay(String title, String author, String content) { this.title = title; this.author = author; this.content = content; } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } public String getAuthor() { return author; } public void setAuthor(String author) { this.author = author; } public String getContent() { return content; } public void setContent(String content) { this.content = content; } } 主页面Java代码 MainActivity.java package com.administrator.hellodemo; import android.content.Intent; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.view.View; public class MainActivity extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); initView(); } private void initView() { findViewById(R.id.header).setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { startActivity(new Intent(MainActivity.this,DetailActivity.class)); } }); } } 被跳转页Java代码 package com.administrator.hellodemo; import android.app.Activity; import android.content.Intent; import android.os.Handler; import android.os.Message; import android.os.Bundle; import android.util.Log; import android.widget.TextView; import com.google.gson.Gson; import org.json.JSONException; import org.json.JSONObject; import java.io.ByteArrayOutputStream; import java.io.IOException; import java.io.InputStream; import java.net.HttpURLConnection; import java.net.MalformedURLException; import java.net.URL; public class DetailActivity extends Activity { private TextView nameView,authorView,contentView; private int id; private Handler handler = new Handler(){ @Override public void handleMessage(Message msg) { super.handleMessage(msg); Essay e = (Essay) msg.obj; nameView.setText(e.getTitle()); authorView.setText(e.getAuthor()); contentView.setText(e.getContent()); } }; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_detail); Intent it = getIntent(); id = it.getIntExtra(&quot;essay&quot;,1); initView(); initData(); } public void initView(){ nameView = (TextView) findViewById(R.id.name); authorView = (TextView) findViewById(R.id.author); contentView = (TextView) findViewById(R.id.content); } public void initData(){ //HttpUrlConnection /** * 1.实例化一个url对象 * 2.获取HttpUrlConnection对象 * 3.设置请求连接属性 * 4.获取响应码，判断是否连接成功 * 5.读取输入流并解析 */ //参数：你要访问的接口地址 new Thread(){ @Override public void run() { try { URL url = new URL(&quot;http://www.imooc.com/api/teacher?type=3&amp;cid=&quot;+id ); HttpURLConnection coon = (HttpURLConnection) url.openConnection(); coon.setRequestMethod(&quot;GET&quot;); coon.setReadTimeout(6000); //获取响应码 if(coon.getResponseCode() == 200){ //获取输入流 InputStream in = coon.getInputStream(); byte[] b = new byte[1024*512]; int len = 0; //建立缓存流，保存所读取的字节数组 ByteArrayOutputStream baos = new ByteArrayOutputStream(); while ((len = in.read(b)) &gt; -1){ baos.write(b,0,len); } String msg = baos.toString(); Log.e(&quot;TAG&quot;,msg); //JSON数据的解析： JSONObject obj = new JSONObject(msg); //HashMap map = null; //map.get(&quot;age&quot;) int status = obj.getInt(&quot;status&quot;); String msg2 = obj.getString(&quot;msg&quot;); Log.e(&quot;TAG&quot;,status + &quot; &quot; + msg2); //1.创建Gson对象 Gson gson = new Gson(); //参数1：满足json对象格式的字符串 String data = obj.getString(&quot;data&quot;); Essay e = gson.fromJson(data,Essay.class); /*JSONObject data = obj.getJSONObject(&quot;data&quot;); String title = data.getString(&quot;title&quot;); String author = data.getString(&quot;author&quot;); String content = data.getString(&quot;content&quot;); Log.e(&quot;TAG&quot;,&quot;标题：&quot; + title + &quot;，作者：&quot; + author + &quot;，内容：&quot; + content);*/ //将操作权交还给主线程 Message message = handler.obtainMessage(); //Essay e = new Essay(title,author,content); message.obj =e; //调用此方法，则会触发主线程中Handle对象里覆盖了的handleMessage方法 handler.sendMessage(message); } } catch (MalformedURLException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } catch (JSONException e) { e.printStackTrace(); } } }.start(); } }","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"Retrofit封装","slug":"RetrofitEncapsul","date":"2018-01-07T22:16:18.000Z","updated":"2018-06-09T06:33:29.767Z","comments":true,"path":"2018/01/08/RetrofitEncapsul/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2018/01/08/RetrofitEncapsul/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 Api.java package com.onion.retrofit; import retrofit2.Call; import retrofit2.http.Field; import retrofit2.http.FormUrlEncoded; import retrofit2.http.POST; /** * Created by OnionMac on 2018/5/17. */ public interface Api { @POST(&quot;xxx/xxx&quot;) @FormUrlEncoded Call&lt;String&gt; get(@Field(&quot;111&quot;) String name); } RetrofitUtil.java public class RetrofitUtil { private static Retrofit sRetrofit; private static OkHttpClient mOkHttpClient; private RetrofitUtil(){} public static class Hide{ static RetrofitUtil sRetrofitUtil = new RetrofitUtil(); } public static RetrofitUtil getInstance() { return Hide.sRetrofitUtil; } public Api build(){ if(mOkHttpClient == null){ mOkHttpClient = new OkHttpClient.Builder() .connectTimeout(10, TimeUnit.SECONDS) .readTimeout(10, TimeUnit.SECONDS) .writeTimeout(10, TimeUnit.SECONDS) .build(); } if(sRetrofit == null){ sRetrofit = new Retrofit.Builder() .baseUrl(&quot;www.baidu.com&quot;) .client(mOkHttpClient) .addConverterFactory(ScalarsConverterFactory.create()) //数据转换器 .addConverterFactory(GsonConverterFactory.create())//数据转换器 .addCallAdapterFactory(RxJava2CallAdapterFactory.create())//rxjava转换器 .build(); } return sRetrofit.create(Api.class); } } MyCallBack.java package com.onion.retrofit; import java.util.concurrent.TimeUnit; import okhttp3.OkHttpClient; import retrofit2.Retrofit; import retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory; import retrofit2.converter.gson.GsonConverterFactory; import retrofit2.converter.scalars.ScalarsConverterFactory; /** * Created by OnionMac on 2018/5/17. */ package com.onion.retrofit; import android.app.Activity; import retrofit2.Call; import retrofit2.Callback; import retrofit2.Response; /** * Created by OnionMac on 2018/5/17. */ public abstract class MyCallBack&lt;T&gt; implements Callback&lt;T&gt; { private Activity mActivity; public MyCallBack(Activity activity){ mActivity = activity; } @Override public void onResponse(final Call&lt;T&gt; call, final Response&lt;T&gt; response) { /** * 运行在主线程 */ mActivity.runOnUiThread(new Runnable() { @Override public void run() { onSuccess(call,response); } }); } @Override public void onFailure(final Call&lt;T&gt; call, final Throwable t) { /** * 运行在主线程 */ mActivity.runOnUiThread(new Runnable() { @Override public void run() { onFailure(call,t); } }); } protected abstract void onSuccess(Call&lt;T&gt; call, Response&lt;T&gt; response); protected void onFailed(Call&lt;T&gt; call, Throwable t){} } MainActivity.java package com.onion.retrofit; import android.os.Bundle; import android.support.v7.app.AppCompatActivity; import retrofit2.Call; import retrofit2.Response; public class MainActivity extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); /** * 请求接口 */ RetrofitUtil.getInstance().build() .get(&quot;张琦&quot;) .enqueue(new MyCallBack&lt;String&gt;(this){ //传进去activity @Override protected void onSuccess(Call&lt;String&gt; call, Response&lt;String&gt; response) { // 这里已经是主线程 } @Override protected void onFailed(Call&lt;String&gt; call, Throwable t) { //这里已经是主线程 } }); } }","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"RecyclerView实现列表效果和瀑布流效果（RecyclerView强化练习）","slug":"RecyclerView","date":"2018-01-06T05:10:23.000Z","updated":"2018-06-09T06:23:48.372Z","comments":true,"path":"2018/01/06/RecyclerView/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2018/01/06/RecyclerView/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 一、添加依赖 dependencies { compile &apos;com.android.support:recyclerview-v7:26.1.0&apos; } 点击右上角Sync Now 不会添加依赖或添加依赖出现错误，请见这篇文章 https://blog.csdn.net/weimeig/article/details/80244059 二、列表效果实现 (一)、为RecyclerView添加填错数据的item 1、 cardElevation:设置阴影的大小 2、 cardBackgroundColor:卡片布局的背景颜色 3、 cardCornerRadius：卡片布局的圆角的大小 4、 conentPadding：卡片布局和内容之间的距离 5、android:clickable=”true” 6、android:foreground=”?android:attr/selectableItemBackground”设置点击的水波纹效果 7、cardUseCompatPadding:是否设置内边距 item_view.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;android.support.v7.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_gravity=&quot;center&quot; app:cardBackgroundColor=&quot;#eee&quot; app:cardCornerRadius=&quot;10dp&quot; app:contentPadding=&quot;10dp&quot; app:cardElevation=&quot;10dp&quot; app:cardUseCompatPadding=&quot;true&quot;&gt; &lt;ImageView android:id=&quot;@+id/img_icon&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:src=&quot;@mipmap/ic_launcher&quot; android:layout_gravity=&quot;center&quot;/&gt; &lt;TextView android:id=&quot;@+id/tv_name&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;地中海&quot; android:textSize=&quot;20sp&quot; android:textColor=&quot;#716f80&quot; android:layout_gravity=&quot;center_horizontal&quot; /&gt; &lt;/android.support.v7.widget.CardView&gt; (二)、创建使用RecyclerView的布局xml activitity_main.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;android.support.constraint.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;com.administrator.cardvieweaxmple.MainActivity&quot;&gt; &lt;android.support.v7.widget.RecyclerView android:id=&quot;@+id/recyclerview&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;/android.support.v7.widget.RecyclerView&gt; &lt;/android.support.constraint.ConstraintLayout&gt; (三)、创建数据的实体类 CityEntity.java package com.administrator.cardvieweaxmple; /** * Created by Administrator on 2018/5/12. */ public class CityEntity { int iconId; String name; public CityEntity(int iconId, String name) { this.iconId = iconId; this.name = name; } public int getIconId() { return iconId; } public void setIconId(int iconId) { this.iconId = iconId; } public String getName() { return name; } public void setName(String name) { this.name = name; } } (四)、创建生成模拟数据的工具类 DataUtil.java package com.administrator.cardvieweaxmple; import java.util.ArrayList; import java.util.List; /** * Created by Administrator on 2018/5/12. * 定义数据源 */ public class DataUtil { public static List&lt;CityEntity&gt; getData(){ List&lt;CityEntity&gt; cityEntities = new ArrayList&lt;&gt;(); for(int i = 0 ;i&lt;10;i++){ CityEntity city = new CityEntity(R.mipmap.ic_launcher,&quot;地中海&quot;); cityEntities.add(city); CityEntity city2 = new CityEntity(R.mipmap.ic_launcher,&quot;日韩线&quot;); cityEntities.add(city2); CityEntity city3 = new CityEntity(R.mipmap.ic_launcher,&quot;旅游热线&quot;); cityEntities.add(city3); } return cityEntities; } } (五)、界面引用处设置RecyclerView的适配器和调用 MainActivity.java package com.administrator.cardvieweaxmple; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.support.v7.widget.LinearLayoutManager; import android.support.v7.widget.RecyclerView; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.ImageView; import android.widget.TextView; import java.util.List; public class MainActivity extends AppCompatActivity { private RecyclerView mRecyclerView; private List&lt;CityEntity&gt; cities; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mRecyclerView = (RecyclerView)findViewById(R.id.recyclerview); cities = DataUtil.getData(); //设置RecyclerView布局的样式 new LinearLayoutManager()列表 new GridLayoutManager()网格 new StaggeredGridLayoutManager()瀑布流 mRecyclerView.setLayoutManager(new LinearLayoutManager(this)); //将适配器设置给控件 mRecyclerView.setAdapter(new XueXiAdapter()); } class XueXiAdapter extends RecyclerView.Adapter&lt;XueXiViewHolder&gt;{//这里的泛型使用刚才定义的XueXiViewHolder即可实现接收 @Override public XueXiViewHolder onCreateViewHolder(ViewGroup parent, int viewType) { View view = LayoutInflater.from(MainActivity.this).inflate(R.layout.item_view,null); return new XueXiViewHolder(view); } @Override public void onBindViewHolder(XueXiViewHolder holder, int position) {//这里的holder使用刚才定义的XueXiViewHolder即可实现接收 CityEntity city = cities.get(position); holder.mImgIcon.setImageResource(city.getIconId()); holder.mTvName.setText(city.getName()); } @Override public int getItemCount() { return cities.size(); } } class XueXiViewHolder extends RecyclerView.ViewHolder{ ImageView mImgIcon; TextView mTvName; public XueXiViewHolder(View itemView) { super(itemView); mImgIcon = (ImageView)itemView.findViewById(R.id.img_icon); mTvName = (TextView)itemView.findViewById(R.id.tv_name); } } } 三、瀑布流效果实现 直接在调用的页面，如本Demo中调用的页面MainActivity.java中的onCreate()方法里面增加 mRecyclerView.setLayoutManager(new StaggeredGridLayoutManager(3,StaggeredGridLayoutManager.VERTICAL));//瀑布流 参数1：列数。参数2：方向 即可实现瀑布流效果 但是，这个瀑布流过于规则了，那么，要怎么打乱瀑布流的出现效果实现不规则呢？ 创建瀑布流分割方法XueXiItemDecoation()，继承RecyclerView.ItemDecoration(); /** * 设置分割线的效果 */ class XueXiItemDecoation extends RecyclerView.ItemDecoration{ int space; public XueXiItemDecoation(int space){ this.space = space; } @Override public void getItemOffsets(Rect outRect, View view, RecyclerView parent, RecyclerView.State state) { super.getItemOffsets(outRect, view, parent, state); /** * 设置交错的效果 */ //获取子条目View的位置 if(parent.getChildAdapterPosition(view)%2==0){//如果view是第2条 outRect.top=50; }else{ outRect.top = space; } //设置分割线四个方向的距离 // outRect.top = space; outRect.bottom = space; outRect.left = space; outRect.right = space; } } onCreate方法中调用 //添加一个子条目的分割线 mRecyclerView.addItemDecoration(new XueXiItemDecoation(20)); 完整代码如下：MainActivity.java package com.administrator.cardvieweaxmple; import android.graphics.Rect; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.support.v7.widget.LinearLayoutManager; import android.support.v7.widget.RecyclerView; import android.support.v7.widget.StaggeredGridLayoutManager; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.ImageView; import android.widget.TextView; import java.util.List; public class MainActivity extends AppCompatActivity { private RecyclerView mRecyclerView; private List&lt;CityEntity&gt; cities; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mRecyclerView = (RecyclerView)findViewById(R.id.recyclerview); cities = DataUtil.getData(); //设置RecyclerView布局的样式 new LinearLayoutManager()列表 new GridLayoutManager()网格 new StaggeredGridLayoutManager()瀑布流 mRecyclerView.setLayoutManager(new StaggeredGridLayoutManager(3,StaggeredGridLayoutManager.VERTICAL));//瀑布流 参数1：列数。参数2：方向 //添加一个子条目的分割线 mRecyclerView.addItemDecoration(new XueXiItemDecoation(20)); //将适配器设置给控件 mRecyclerView.setAdapter(new XueXiAdapter()); } /** * 设置分割线的效果 */ class XueXiItemDecoation extends RecyclerView.ItemDecoration{ int space; public XueXiItemDecoation(int space){ this.space = space; } @Override public void getItemOffsets(Rect outRect, View view, RecyclerView parent, RecyclerView.State state) { super.getItemOffsets(outRect, view, parent, state); /** * 设置交错的效果 */ //获取子条目View的位置 if(parent.getChildAdapterPosition(view)%2==0){//如果view是第2条 outRect.top=50; }else{ outRect.top = space; } //设置分割线四个方向的距离 // outRect.top = space; outRect.bottom = space; outRect.left = space; outRect.right = space; } } class XueXiAdapter extends RecyclerView.Adapter&lt;XueXiViewHolder&gt;{//这里的泛型使用刚才定义的XueXiViewHolder即可实现接收 @Override public XueXiViewHolder onCreateViewHolder(ViewGroup parent, int viewType) { View view = LayoutInflater.from(MainActivity.this).inflate(R.layout.item_view,null); return new XueXiViewHolder(view); } @Override public void onBindViewHolder(XueXiViewHolder holder, int position) {//这里的holder使用刚才定义的XueXiViewHolder即可实现接收 CityEntity city = cities.get(position); holder.mImgIcon.setImageResource(city.getIconId()); holder.mTvName.setText(city.getName()); } @Override public int getItemCount() { return cities.size(); } } class XueXiViewHolder extends RecyclerView.ViewHolder{ ImageView mImgIcon; TextView mTvName; public XueXiViewHolder(View itemView) { super(itemView); mImgIcon = (ImageView)itemView.findViewById(R.id.img_icon); mTvName = (TextView)itemView.findViewById(R.id.tv_name); } } }","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"RecyclerView基础写法简单实现","slug":"RecyclerViewBasics","date":"2018-01-05T23:10:23.000Z","updated":"2018-06-09T07:12:46.647Z","comments":true,"path":"2018/01/06/RecyclerViewBasics/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2018/01/06/RecyclerViewBasics/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 转帖请注明本文出自weimeig的博客（https://blog.csdn.net/weimeig/article/details/80244059），请尊重他人的辛勤劳动成果，谢谢 一、添加依赖 dependencies { compile &apos;com.android.support:recyclerview-v7:23.1.1&apos; } 点击右上角Sync Now，此时如果不报红，直接跳过下面步骤，可以开始编写RecyclerView控件了。 但，如果点击了右上角的Sync Now，却还是出现报红不用怕 修改后 点击右上角Sync Now 二、定义本地数据源Menu类，为RecyclerView提供数据源。Menu.java package com.administrator.taolvyou.entity; /** * 数据源 * Created by Administrator on 2018/5/8. */ public class Menu { public int icon; public String menuName; public Menu(int icon, String menuName) { this.icon = icon; this.menuName = menuName; } } 三、定义DataUtil工具类，将数据源转换成集合形式存储并返回该集合对象。 DataUtil.java package com.administrator.taolvyou.util; import com.administrator.taolvyou.entity.Menu; import java.util.ArrayList; import java.util.List; /** * 数据源 * Created by Administrator on 2018/5/8. */ public class DataUtil { /** * 主菜单 * @param icons * @param names * @return */ public static List&lt;Menu&gt; getMainMenus(int icons[],String names[]){//导包导入我们刚才建立的实体类的包 List&lt;Menu&gt; menus = new ArrayList&lt;&gt;(); for(int i=0;i&lt;icons.length;i++){ Menu menu = new Menu(icons[i],names[i]); menus.add(menu); } return menus; } } 四、在strings文件中定义数组数据 &lt;resources&gt; &lt;string name=&quot;app_name&quot;&gt;TaoLvYou&lt;/string&gt; &lt;string-array name=&quot;main_menu&quot;&gt; &lt;item&gt;飞机票&lt;/item&gt; &lt;item&gt;住酒店&lt;/item&gt; &lt;item&gt;去旅游&lt;/item&gt; &lt;item&gt;周边游&lt;/item&gt; &lt;item&gt;买门票&lt;/item&gt; &lt;item&gt;火车票&lt;/item&gt; &lt;item&gt;汽车票&lt;/item&gt; &lt;item&gt;领里程&lt;/item&gt; &lt;/string-array&gt; &lt;/resources&gt; 五、在fragment_main中引入该RecyelerView控件 fragment.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:orientation=&quot;vertical&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; &gt; &lt;android.support.v7.widget.RecyclerView android:id=&quot;@+id/recycleview_main_menu&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot;&gt; &lt;/android.support.v7.widget.RecyclerView&gt; &lt;/RelativeLayout&gt; 六、为数据与视图之间定义适配器MainMenuAdapter MainMenuAdapter.java package com.administrator.taolvyou.adapter; import android.content.Context; import android.support.v7.widget.RecyclerView; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.ImageView; import android.widget.TextView; import com.administrator.taolvyou.R; import com.administrator.taolvyou.entity.Menu; import java.util.List; /** * Created by Administrator on 2018/5/8. */ public class MainMenuAdapter extends RecyclerView.Adapter&lt;MainMenuAdapter.MainMenuViewHolder&gt; { protected Context context; protected List&lt;Menu&gt; menus; class MainMenuViewHolder extends RecyclerView.ViewHolder{ public ImageView mImgMenuIcon; public TextView mTxtMenuName; public MainMenuViewHolder(View itemView) { super(itemView); mImgMenuIcon=(ImageView) itemView.findViewById(R.id.img_menu_icon); mTxtMenuName=(TextView) itemView.findViewById(R.id.txt_menu_name); } } public MainMenuAdapter(Context context, List&lt;Menu&gt; menus){ this.context=context; this.menus=menus; } @Override public MainMenuViewHolder onCreateViewHolder(ViewGroup parent, int viewType) { return new MainMenuViewHolder(LayoutInflater.from(context).inflate(R.layout.item_main_menu,null));//将布局渲染成一个视图的形式 } @Override public void onBindViewHolder(MainMenuViewHolder holder, int position) { Menu menu=menus.get(position);//返还每一个菜单的对象 holder.mImgMenuIcon.setImageResource(menu.icon); holder.mTxtMenuName.setText(menu.menuName); } @Override public int getItemCount() { return null!=menus?menus.size():0; } } 七、在主界面视图中使用该布局 MainFragment.java package com.administrator.taolvyou.fragment; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.support.v7.widget.GridLayoutManager; import android.support.v7.widget.RecyclerView; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import com.administrator.taolvyou.R; import com.administrator.taolvyou.adapter.MainMenuAdapter; import com.administrator.taolvyou.util.DataUtil; /** * 主界面视图 */ public class MainFragment extends Fragment{ protected RecyclerView mRecyclerViewMenu; //菜单图标 protected int [] menuIons={R.mipmap.menu_airport,R.mipmap.menu_car ,R.mipmap.menu_course,R.mipmap.menu_hatol, R.mipmap.menu_nearby, R.mipmap.menu_ticket, R.mipmap.menu_train,R.mipmap.menu_trav}; String[] menus; @Nullable @Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) { return inflater.inflate(R.layout.fragment_main,container,false); } @Override public void onActivityCreated(@Nullable Bundle savedInstanceState) { super.onActivityCreated(savedInstanceState); menus=this.getActivity().getResources().getStringArray(R.array.main_menu);//从string文件中，将数组数据拿出来 mRecyclerViewMenu = (RecyclerView) getView().findViewById(R.id.recycleview_main_menu); //设置RecyclerView布局的样式 mRecyclerViewMenu.setLayoutManager(new GridLayoutManager(getActivity(),4));//第一个参数是context对象，第二个参数是列数 //另有线性布局写法可另行百度 //菜单 MainMenuAdapter mainMenuAdapter = new MainMenuAdapter(getActivity(), DataUtil.getMainMenus(menuIons,menus)); mRecyclerViewMenu.setAdapter(mainMenuAdapter); } } 运行效果： 项目Demo下载： https://download.csdn.net/download/weimeig/10401154","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"OrmLite数据库操作框架","slug":"OrmLite","date":"2018-01-02T00:15:13.000Z","updated":"2018-06-09T06:10:34.328Z","comments":true,"path":"2018/01/02/OrmLite/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2018/01/02/OrmLite/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 一、运行前配置 在http://ormlite.com/releases/下载两个jar包 打开AndroidStudio，选择 ctrl+v将jar包复制进libs文件夹下 点击ctrl键，鼠标左键选择两个jar包后，鼠标右键，选择 二、编写实体类 Student.java package com.administrator.ormlitedemo; import com.j256.ormlite.field.DataType; import com.j256.ormlite.field.DatabaseField; import com.j256.ormlite.table.DatabaseTable; /** * Created by Administrator on 2018/5/16. */ @DatabaseTable(tableName = &quot;tb_student&quot;)//tableName可以不写，不写默认表名是类名即Student，写了是改写表名 public class Student { @DatabaseField(generatedId = true)//字段 generatedId = true自动增长标识列 private int id; @DatabaseField(columnName = &quot;name&quot;,dataType = DataType.STRING,canBeNull = false)//列名 canBeNull = false不能为空 private String name; @DatabaseField //使用默认属性 private int age; @DatabaseField private String phone; public Student() { } public Student(String name, int age, String phone) { this.name = name; this.age = age; this.phone = phone; } public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public String getPhone() { return phone; } public void setPhone(String phone) { this.phone = phone; } @Override public String toString() { return &quot;Student{&quot; + &quot;id=&quot; + id + &quot;, name=&apos;&quot; + name + &apos;\\&apos;&apos; + &quot;, age=&quot; + age + &quot;, phone=&apos;&quot; + phone + &apos;\\&apos;&apos; + &apos;}&apos;; } } 三、实现数据库帮助类 DatabaseHelper.java package com.administrator.ormlitedemo; import android.content.Context; import android.database.sqlite.SQLiteDatabase; import com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper; import com.j256.ormlite.support.ConnectionSource; import com.j256.ormlite.table.TableUtils; import java.sql.SQLException; /** * Created by Administrator on 2018/5/16. */ public class DatabaseHelper extends OrmLiteSqliteOpenHelper { private DatabaseHelper(Context context){ super(context,&quot;test.db&quot;,null,1);//当版本值变化时， onUpgrade方法会被调用 } private static DatabaseHelper sHelper = null; public static synchronized DatabaseHelper getInstance(Context context){ if (sHelper == null){ sHelper = new DatabaseHelper(context); } return sHelper; } @Override public void onCreate(SQLiteDatabase sqLiteDatabase, ConnectionSource connectionSource) { try { /** * 建表 */ TableUtils.clearTable(connectionSource,Student.class);// connectionSource连接源，传入的实体类建表 } catch (SQLException e) { e.printStackTrace(); } } @Override public void onUpgrade(SQLiteDatabase sqLiteDatabase, ConnectionSource connectionSource, int i, int i1) { try { TableUtils.dropTable(connectionSource,Student.class,true);//参数3：是否忽略错误 } catch (SQLException e) { e.printStackTrace(); } } } 四、增删改查测试 建立单元测试用例类 OrmLiteTest.java package com.administrator.ormlitedemo; import android.test.InstrumentationTestCase; import android.util.Log; import com.j256.ormlite.dao.Dao; import com.j256.ormlite.stmt.UpdateBuilder; import java.sql.SQLException; import java.util.List; /** * Created by Administrator on 2018/5/16. */ public class OrmLiteTest extends InstrumentationTestCase { public DatabaseHelper getHelper(){ return DatabaseHelper.getInstance(this.getInstrumentation().getTargetContext());//this.getInstrumentation().getTargetContext()获取测试对象的上下文 } public Dao&lt;Student,Integer&gt; getStudentDao() throws SQLException {//参数1：对象类型，参数2：ID类型 return getHelper().getDao(Student.class);//创建学生表的Dao数据访问对象 } /** * 添加 * @throws SQLException */ public void testInsert() throws SQLException { Dao&lt;Student,Integer&gt; stuDao = getStudentDao(); Student stu1 = new Student(&quot;测试1&quot;,21,&quot;8888888888&quot;); Student stu2 = new Student(&quot;测试2&quot;,22,&quot;1111111111&quot;); Student stu3 = new Student(&quot;测试3&quot;,23,&quot;2222222222&quot;); stuDao.create(stu1); stuDao.create(stu2); stuDao.create(stu3); // stuDao.createOrUpdate(stu1);//创建或更新 } /** * 查询 */ public void testQuery() throws SQLException { Dao&lt;Student,Integer&gt; stuDao = getStudentDao(); List&lt;Student&gt; students = stuDao.queryForAll(); for (Student stu:students){ Log.i(&quot;test&quot;,stu.toString()); } // Student stu1 = stuDao.queryForId(3);//根据ID查询 // Log.i(&quot;test&quot;,&quot;ForId&quot;+stu1.toString()); // // List&lt;Student&gt; students1 = stuDao.queryForEq(&quot;name&quot;,&quot;测试2&quot;); // for(Student stu : students1){ // Log.i(&quot;test&quot;,&quot;stu1:&quot;+stu.toString()); // } } /** * 更新 */ public void testUpdate() throws SQLException { Dao&lt;Student,Integer&gt; stuDao = getStudentDao(); UpdateBuilder update = stuDao.updateBuilder(); update.setWhere(update.where().eq(&quot;phone&quot;,&quot;8888888888&quot;).and().gt(&quot;age&quot;,22));//大于多少gt，小于多少lt update.updateColumnValue(&quot;name&quot;,&quot;测试更新&quot;); update.updateColumnValue(&quot;phone&quot;,&quot;100&quot;); update.update(); // stuDao.updateRaw(&quot;update tb_student set name=&apos;测试更新2&apos;,phone = &apos;119&apos; where id=?&quot;,&quot;1&quot;); } /** * 删除 */ public void testDelete() throws SQLException { Dao&lt;Student,Integer&gt; stuDao = getStudentDao(); stuDao.deleteById(1);//删除Id为1的元素 } } 四、一对多的关系 (一)、DatabaseHelper.java package com.administrator.ormlitedemo; import android.content.Context; import android.database.sqlite.SQLiteDatabase; import com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper; import com.j256.ormlite.support.ConnectionSource; import com.j256.ormlite.table.TableUtils; import java.sql.SQLException; /** * Created by Administrator on 2018/5/16. */ public class DatabaseHelper extends OrmLiteSqliteOpenHelper { private DatabaseHelper(Context context){ super(context,&quot;test.db&quot;,null,5);//当版本值变化时， onUpgrade方法会被调用 } private static DatabaseHelper sHelper = null; public static synchronized DatabaseHelper getInstance(Context context){ if (sHelper == null){ sHelper = new DatabaseHelper(context); } return sHelper; } @Override public void onCreate(SQLiteDatabase sqLiteDatabase, ConnectionSource connectionSource) { try { /** * 建表 */ TableUtils.clearTable(connectionSource,Student.class);// connectionSource连接源，传入的实体类建表 TableUtils.clearTable(connectionSource,School.class); } catch (SQLException e) { e.printStackTrace(); } } @Override public void onUpgrade(SQLiteDatabase sqLiteDatabase, ConnectionSource connectionSource, int i, int i1) { try { TableUtils.dropTable(connectionSource,Student.class,true);//参数3：是否忽略错误 TableUtils.dropTable(connectionSource,School.class,true); } catch (SQLException e) { e.printStackTrace(); } } } (二)、School.java package com.administrator.ormlitedemo; import com.j256.ormlite.field.DataType; import com.j256.ormlite.field.DatabaseField; import com.j256.ormlite.field.ForeignCollectionField; import com.j256.ormlite.table.DatabaseTable; import java.util.Collection; /** * Created by Administrator on 2018/5/16. */ @DatabaseTable(tableName = &quot;tb_school&quot;) public class School { @DatabaseField(generatedId = true) private int id; @DatabaseField private String name; @DatabaseField private String iocation; @ForeignCollectionField//外键集合 private Collection&lt;Student&gt; students; public School(String name, String iocation) { this.name = name; this.iocation = iocation; } public School() {}//习惯性增加无参构造方法，不然可能有错 public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getIocation() { return iocation; } public void setIocation(String iocation) { this.iocation = iocation; } public Collection&lt;Student&gt; getStudents() { return students; } public void setStudents(Collection&lt;Student&gt; students) { this.students = students; } @Override public String toString() { return &quot;School{&quot; + &quot;id=&quot; + id + &quot;, name=&apos;&quot; + name + &apos;\\&apos;&apos; + &quot;, iocation=&apos;&quot; + iocation + &apos;\\&apos;&apos; + &quot;, students=&quot; + students + &apos;}&apos;; } } (三)、Student.java package com.administrator.ormlitedemo; import com.j256.ormlite.field.DataType; import com.j256.ormlite.field.DatabaseField; import com.j256.ormlite.table.DatabaseTable; /** * Created by Administrator on 2018/5/16. */ @DatabaseTable(tableName = &quot;tb_student&quot;)//tableName可以不写，不写默认表名是类名即Student，写了是改写表名 public class Student { @DatabaseField(generatedId = true)//字段 generatedId = true自动增长标识列 private int id; @DatabaseField(columnName = &quot;name&quot;,dataType = DataType.STRING,canBeNull = false)//列名 canBeNull = false不能为空 private String name; @DatabaseField //使用默认属性 private int age; @DatabaseField private String phone; @DatabaseField(columnName = &quot;school_id&quot;,foreign = true,foreignAutoRefresh = true)//foreign = true外键 foreignAutoRefresh刷新查询学生时顺带把学校信息填充 private School school; public Student() {//习惯性增加无参构造方法，不然可能有错 } public Student(String name, int age, String phone ,School school) { this.name = name; this.age = age; this.phone = phone; this.school = school; } public int getId() { return id; } public void setId(int id) { this.id = id; } public School getSchool() { return school; } public void setSchool(School school) { this.school = school; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public String getPhone() { return phone; } public void setPhone(String phone) { this.phone = phone; } @Override public String toString() { return &quot;Student{&quot; + &quot;id=&quot; + id + &quot;, name=&apos;&quot; + name + &apos;\\&apos;&apos; + &quot;, age=&quot; + age + &quot;, phone=&apos;&quot; + phone + &apos;\\&apos;&apos; + &apos;}&apos;; } } (四)、OrmLiteTest.java package com.administrator.ormlitedemo; import android.test.InstrumentationTestCase; import android.util.Log; import com.j256.ormlite.dao.Dao; import com.j256.ormlite.stmt.UpdateBuilder; import java.sql.SQLException; import java.util.List; /** * Created by Administrator on 2018/5/16. */ public class OrmLiteTest extends InstrumentationTestCase { public DatabaseHelper getHelper(){ return DatabaseHelper.getInstance(this.getInstrumentation().getTargetContext());//this.getInstrumentation().getTargetContext()获取测试对象的上下文 } public Dao&lt;Student,Integer&gt; getStudentDao() throws SQLException {//参数1：对象类型，参数2：ID类型 return getHelper().getDao(Student.class);//创建学生表的Dao数据访问对象 } /** * 添加 * @throws SQLException */ public void testInsert() throws SQLException { Dao&lt;Student,Integer&gt; stuDao = getStudentDao(); Dao&lt;School,Integer&gt; schDao = getShoolDao(); School school = new School(&quot;北京大学&quot;,&quot;北京&quot;); Student stu1 = new Student(&quot;测试1&quot;,21,&quot;8888888888&quot;,school); Student stu2 = new Student(&quot;测试2&quot;,22,&quot;1111111111&quot;,school); Student stu3 = new Student(&quot;测试3&quot;,23,&quot;2222222222&quot;,school); schDao.create(school); stuDao.create(stu1); stuDao.create(stu2); stuDao.create(stu3); // stuDao.createOrUpdate(stu1);//创建或更新 } public Dao&lt;School,Integer&gt; getShoolDao() throws SQLException { return getHelper().getDao(School.class); } /** * 查询 */ public void testQuery() throws SQLException { Dao&lt;Student,Integer&gt; stuDao = getStudentDao(); List&lt;Student&gt; students = stuDao.queryForAll(); for (Student stu:students){ Log.i(&quot;test&quot;,stu.toString()+stu.getSchool()); } Dao&lt;School,Integer&gt; schDao = getShoolDao(); List&lt;School&gt; schools = schDao.queryForAll(); for (School s:schools){ Log.i(&quot;test&quot;,s.toString()); for(Student stu:s.getStudents()){ Log.i(&quot;test&quot;,&quot;school stu:&quot;+stu); } } // Student stu1 = stuDao.queryForId(3);//根据ID查询 // Log.i(&quot;test&quot;,&quot;ForId&quot;+stu1.toString()); // // List&lt;Student&gt; students1 = stuDao.queryForEq(&quot;name&quot;,&quot;测试2&quot;); // for(Student stu : students1){ // Log.i(&quot;test&quot;,&quot;stu1:&quot;+stu.toString()); // } } /** * 更新 */ public void testUpdate() throws SQLException { Dao&lt;Student,Integer&gt; stuDao = getStudentDao(); UpdateBuilder update = stuDao.updateBuilder(); update.setWhere(update.where().eq(&quot;phone&quot;,&quot;8888888888&quot;).and().gt(&quot;age&quot;,22));//大于多少gt，小于多少lt update.updateColumnValue(&quot;name&quot;,&quot;测试更新&quot;); update.updateColumnValue(&quot;phone&quot;,&quot;100&quot;); update.update(); // stuDao.updateRaw(&quot;update tb_student set name=&apos;测试更新2&apos;,phone = &apos;119&apos; where id=?&quot;,&quot;1&quot;); } /** * 删除 */ public void testDelete() throws SQLException { Dao&lt;Student,Integer&gt; stuDao = getStudentDao(); stuDao.deleteById(1);//删除Id为1的元素 } } 五、事务操作，批量操作 /** * 事务操作、批量操作 * 保证事务的整体性，一旦出现异常，所有语句都不成功，只有全部都成功，才成功 * @throws SQLException */ public void testTransaction() throws SQLException { final Dao&lt;Student,Integer&gt; stuDao = getStudentDao(); final Student stu = new Student(&quot;测试事务&quot;,20,&quot;100&quot;,new School(&quot;清华大学&quot;,&quot;北京&quot;)); TransactionManager.callInTransaction(getHelper().getConnectionSource(), new Callable&lt;Void&gt;() { @Override public Void call() throws Exception { for(int i = 0 ;i&lt;20;i++){ stuDao.create(stu); // if(i==10){ // throw new SQLException(&quot;test....&quot;); // } } return null; } }); }","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"OkHttp网络请求框架","slug":"Okhttp","date":"2018-01-01T03:10:23.000Z","updated":"2018-06-09T05:03:50.234Z","comments":true,"path":"2018/01/01/Okhttp/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2018/01/01/Okhttp/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 添加依赖方式见 https://blog.csdn.net/weimeig/article/details/78656734 https://blog.csdn.net/weimeig/article/details/79712595一、Get请求 创建menu action.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;item android:title=&quot;Get&quot; android:id=&quot;@+id/menuGet&quot; /&gt; &lt;item android:id=&quot;@+id/menuResponse&quot; android:title=&quot;Response&quot; /&gt; &lt;item android:id=&quot;@+id/menuPost&quot; android:title=&quot;post&quot; /&gt; &lt;/menu&gt; activity_main.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;android.support.constraint.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;com.administrator.picassodemo.MainActivity&quot;&gt; &lt;ScrollView android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;TextView android:id=&quot;@+id/tvContent&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; /&gt; &lt;/ScrollView&gt; &lt;/android.support.constraint.ConstraintLayout&gt; MainActivity.java package com.administrator.picassodemo; import android.media.Image; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.util.Log; import android.view.Menu; import android.view.MenuItem; import android.widget.ImageView; import android.widget.TextView; import java.io.IOException; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import okhttp3.Call; import okhttp3.OkHttpClient; import okhttp3.Request; import okhttp3.Response; public class MainActivity extends AppCompatActivity { private TextView mTextView; private OkHttpClient mClient; private static final String TAG = &quot;MainActivity&quot;; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mTextView = (TextView)findViewById(R.id.tvContent); mClient = new OkHttpClient(); } @Override public boolean onCreateOptionsMenu(Menu menu) { getMenuInflater().inflate(R.menu.action,menu); return super.onCreateOptionsMenu(menu); } @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()){ case R.id.menuGet: get(); break; } return super.onOptionsItemSelected(item); } private void get() { ExecutorService executor = Executors.newSingleThreadExecutor(); executor.submit(new Runnable() { @Override public void run() { // ------------------------------- Request.Builder builder = new Request.Builder(); builder.url(&quot;https://raw.githubusercontent.com/square/okhttp/master/README.md&quot;); Request request = builder.build(); Log.d(TAG, &quot;run: &quot; + request); Call call = mClient.newCall(request); try { Response response = call.execute(); if (response.isSuccessful()) { final String string = response.body().string(); // -------- runOnUiThread(new Runnable() { @Override public void run() { mTextView.setText(string); } }); // -------- } } catch (IOException e) { e.printStackTrace(); } // ------------------------------- } }); executor.shutdown(); } } 二、get-Response private void respsonse() { Request request = new Request.Builder() .url(&quot;https://raw.githubusercontent.com/square/okhttp/master/README.md&quot;) .build(); Call call = mClient.newCall(request); call.enqueue(new Callback() { @Override public void onFailure(Call call, IOException e) { Log.d(TAG,&quot;onFailure() called with:call=[&quot; +call +&quot;],e=[&quot;+ e +&quot;]&quot;); } @Override public void onResponse(Call call, Response response) throws IOException { Log.d(TAG,&quot;onResponse() called with:call=[&quot; +call +&quot;],response=[&quot;+ response +&quot;]&quot;); int code = response.code(); Headers headers = response.headers(); String content = response.body().string(); String contentType = headers.get(&quot;Content-Type&quot;); final StringBuilder buf = new StringBuilder(); buf.append(&quot;code&quot;+code); buf.append(&quot;\\nHeaders&quot;+headers); buf.append(&quot;\\nBody&quot;+content); runOnUiThread(new Runnable() { @Override public void run() { mTextView.setText(buf.toString()); } }); } }); } 三、Post请求 private void respsonse() { Request request = new Request.Builder() .url(&quot;https://raw.githubusercontent.com/square/okhttp/master/README.md&quot;) .build(); Call call = mClient.newCall(request); call.enqueue(new Callback() { @Override public void onFailure(Call call, IOException e) { Log.d(TAG,&quot;onFailure() called with:call=[&quot; +call +&quot;],e=[&quot;+ e +&quot;]&quot;); } @Override public void onResponse(Call call, Response response) throws IOException { Log.d(TAG,&quot;onResponse() called with:call=[&quot; +call +&quot;],response=[&quot;+ response +&quot;]&quot;); int code = response.code(); Headers headers = response.headers(); String content = response.body().string(); String contentType = headers.get(&quot;Content-Type&quot;); final StringBuilder buf = new StringBuilder(); buf.append(&quot;code&quot;+code); buf.append(&quot;\\nHeaders&quot;+headers); buf.append(&quot;\\nBody&quot;+content); runOnUiThread(new Runnable() { @Override public void run() { mTextView.setText(buf.toString()); } }); } }); } MainActivity完整代码 MainActivity.java package com.administrator.picassodemo; import android.media.Image; import android.preference.PreferenceActivity; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.util.Log; import android.view.Menu; import android.view.MenuItem; import android.widget.ImageView; import android.widget.TextView; import java.io.IOException; import java.time.LocalDate; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import okhttp3.Call; import okhttp3.Callback; import okhttp3.Headers; import okhttp3.MediaType; import okhttp3.OkHttpClient; import okhttp3.Request; import okhttp3.RequestBody; import okhttp3.Response; public class MainActivity extends AppCompatActivity { private TextView mTextView; private OkHttpClient mClient; private static final String TAG = &quot;MainActivity&quot;; private static final MediaType MEDIA_TYPE_MARKDOWN = MediaType.parse(&quot;text/x-markdown; charset=utf-8&quot;); private static final String POST_URL = &quot;https://api.github.com/markdown/raw&quot;; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mTextView = (TextView)findViewById(R.id.tvContent); mClient = new OkHttpClient(); } @Override public boolean onCreateOptionsMenu(Menu menu) { getMenuInflater().inflate(R.menu.action,menu); return super.onCreateOptionsMenu(menu); } @Override public boolean onOptionsItemSelected(MenuItem item) { switch (item.getItemId()){ case R.id.menuGet: get(); break; case R.id.menuResponse: respsonse(); break; case R.id.menuPost: post(); break; } return super.onOptionsItemSelected(item); } private void respsonse() { Request request = new Request.Builder() .url(&quot;https://raw.githubusercontent.com/square/okhttp/master/README.md&quot;) .build(); Call call = mClient.newCall(request); call.enqueue(new Callback() { @Override public void onFailure(Call call, IOException e) { Log.d(TAG,&quot;onFailure() called with:call=[&quot; +call +&quot;],e=[&quot;+ e +&quot;]&quot;); } @Override public void onResponse(Call call, Response response) throws IOException { Log.d(TAG,&quot;onResponse() called with:call=[&quot; +call +&quot;],response=[&quot;+ response +&quot;]&quot;); int code = response.code(); Headers headers = response.headers(); String content = response.body().string(); String contentType = headers.get(&quot;Content-Type&quot;); final StringBuilder buf = new StringBuilder(); buf.append(&quot;code&quot;+code); buf.append(&quot;\\nHeaders&quot;+headers); buf.append(&quot;\\nBody&quot;+content); runOnUiThread(new Runnable() { @Override public void run() { mTextView.setText(buf.toString()); } }); } }); } private void get() { ExecutorService executor = Executors.newSingleThreadExecutor(); executor.submit(new Runnable() { @Override public void run() { // ------------------------------- Request.Builder builder = new Request.Builder(); builder.url(&quot;https://raw.githubusercontent.com/square/okhttp/master/README.md&quot;); Request request = builder.build(); Log.d(TAG, &quot;run: &quot; + request); Call call = mClient.newCall(request); try { Response response = call.execute(); if (response.isSuccessful()) { final String string = response.body().string(); // -------- runOnUiThread(new Runnable() { @Override public void run() { mTextView.setText(string); } }); // -------- } } catch (IOException e) { e.printStackTrace(); } // ------------------------------- } }); executor.shutdown(); } private void post(){ Request.Builder builder = new Request.Builder() .url(POST_URL) .post(RequestBody.create(MEDIA_TYPE_MARKDOWN,&quot;Hello world github/linguist#1 **cool**, and #1!&quot;)); Request request = builder.build(); Call call = mClient.newCall(request); call.enqueue(new Callback() { @Override public void onFailure(Call call, IOException e) { } @Override public void onResponse(Call call, Response response) throws IOException { if(response.isSuccessful()){ final String content = response.body().string(); runOnUiThread(new Runnable() { @Override public void run() { mTextView.setText(content); } }); } } }); } }","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"Gson数据解析","slug":"Gson","date":"2017-09-23T00:10:23.000Z","updated":"2018-06-09T05:19:15.414Z","comments":true,"path":"2017/09/23/Gson/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2017/09/23/Gson/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 转帖请注明本文出自weimeig的博客（https://blog.csdn.net/weimeig/article/details/80251365），请尊重他人的辛勤劳动成果，谢谢 添加依赖 build.gradle dependencies { compile &apos;com.google.code.gson:gson:2.4&apos; } 右上角Sync Now AndroidStudio自带了将Json数据自动生成实体类的工具，详情可百度，这里不详述 初步入门案例1： 定义模拟的需要解析的数据 String cniao = &quot;{\\n&quot; + &quot;\\&quot;sites\\&quot;: [\\n&quot; + &quot;{ \\&quot;name\\&quot;:\\&quot;菜鸟教程\\&quot; , \\&quot;url\\&quot;:\\&quot;m.runoob.com\\&quot; }, \\n&quot; + &quot;{ \\&quot;name\\&quot;:\\&quot;google\\&quot; , \\&quot;url\\&quot;:\\&quot;www.google.com\\&quot; }, \\n&quot; + &quot;{ \\&quot;name\\&quot;:\\&quot;微博\\&quot; , \\&quot;url\\&quot;:\\&quot;www.weibo.com\\&quot; }\\n&quot; + &quot;]\\n&quot; + &quot;}&quot;; 定义存放被解析的数据的实体类对象 cainiao.java /** * 存放被解析的数据的实体类对象 * cainiao.java */ public static class cainiao{ private List&lt;SitesBean&gt; sites; public List&lt;SitesBean&gt; getSites() { return sites; } public void setSites(List&lt;SitesBean&gt; sites) { this.sites = sites; } public static class SitesBean { private String name; private String url; public String getName() { return name; } public void setName(String name) { this.name = name; } public String getUrl() { return url; } public void setUrl(String url) { this.url = url; } } } 数据解析 //参数1：网络请求所返还的需要解析的数据对象，参数2：要把数据解析到的实体类对象 cainiao st= new Gson().fromJson(cniao,cainiao.class); 强化练习案例2：定义模拟的需要解析的数据 String login = &quot;{\\n&quot; + &quot; \\&quot;code\\&quot;: \\&quot;200\\&quot;,\\n&quot; + &quot; \\&quot;info\\&quot;: \\&quot;登录成功\\&quot;,\\n&quot; + &quot; \\&quot;data\\&quot;: {\\n&quot; + &quot; \\&quot;userId\\&quot;: \\&quot;10000\\&quot;,\\n&quot; + &quot; \\&quot;userName\\&quot;: \\&quot;刘德华\\&quot;,\\n&quot; + &quot; \\&quot;userDeteilInfo\\&quot;: {\\n&quot; + &quot; \\&quot;sex\\&quot;: \\&quot;男\\&quot;\\n&quot; + &quot; }\\n&quot; + &quot; }\\n&quot; + &quot;}\\n&quot;; 定义存放被解析的数据的实体类对象 public static class Login{ private String code; private String info; private DataBean data; public String getCode() { return code; } public void setCode(String code) { this.code = code; } public String getInfo() { return info; } public void setInfo(String info) { this.info = info; } public DataBean getData() { return data; } public void setData(DataBean data) { this.data = data; } public static class DataBean { private String userId; private String userName; private UserDeteilInfoBean userDeteilInfo; public String getUserId() { return userId; } public void setUserId(String userId) { this.userId = userId; } public String getUserName() { return userName; } public void setUserName(String userName) { this.userName = userName; } public UserDeteilInfoBean getUserDeteilInfo() { return userDeteilInfo; } public void setUserDeteilInfo(UserDeteilInfoBean userDeteilInfo) { this.userDeteilInfo = userDeteilInfo; } public static class UserDeteilInfoBean { private String sex; public String getSex() { return sex; } public void setSex(String sex) { this.sex = sex; } } } } 数据解析 Login loginTest = new Gson().fromJson(login,Login.class); System.out.print(loginTest.getData().getUserName()); 对象中包含集合数据的获取方法： 当数据包含状态码，数据体等信息时，复制数据到实体类中使用AndroidStudio生成实体类为下类代码时， /** * 数据实体类 */ public static class music{ private AudioinfosBean audioinfos; public AudioinfosBean getAudioinfos() { return audioinfos; } public void setAudioinfos(AudioinfosBean audioinfos) { this.audioinfos = audioinfos; } public static class AudioinfosBean { private List&lt;CatsBean&gt; cats; public List&lt;CatsBean&gt; getCats() { return cats; } public void setCats(List&lt;CatsBean&gt; cats) { this.cats = cats; } public static class CatsBean { /** * cat_count : 3 * cat_icon_url : http://img.idaddy.cn/f/h/4/xs4ozwyc.jpg * cat_name : 热门儿歌 * cat_id : 8118 * cat_group_age_scope : -1-6 * cat_parent : 6707 */ private String cat_count; private String cat_icon_url; private String cat_name; private int cat_id; private String cat_group_age_scope; private int cat_parent; public String getCat_count() { return cat_count; } public void setCat_count(String cat_count) { this.cat_count = cat_count; } public String getCat_icon_url() { return cat_icon_url; } public void setCat_icon_url(String cat_icon_url) { this.cat_icon_url = cat_icon_url; } public String getCat_name() { return cat_name; } public void setCat_name(String cat_name) { this.cat_name = cat_name; } public int getCat_id() { return cat_id; } public void setCat_id(int cat_id) { this.cat_id = cat_id; } public String getCat_group_age_scope() { return cat_group_age_scope; } public void setCat_group_age_scope(String cat_group_age_scope) { this.cat_group_age_scope = cat_group_age_scope; } public int getCat_parent() { return cat_parent; } public void setCat_parent(int cat_parent) { this.cat_parent = cat_parent; } } } } 使用类名.方法名，直到找到包含该数据的代码块，取出数据并存到list集合中，遍历输出观察效果 music sc = new Gson().fromJson(msc,music.class); List&lt;music.AudioinfosBean.CatsBean&gt; list =sc.getAudioinfos().getCats(); for (int i = 0; i &lt; list.size(); i++) { System.out.println(list.get(i).cat_name); } 定义模拟的需要解析的数据源 String msc = &quot;{\\n&quot; + &quot; \\&quot;audioinfos\\&quot;: {\\n&quot; + &quot; \\&quot;cats\\&quot;: [\\n&quot; + &quot; {\\n&quot; + &quot; \\&quot;cat_count\\&quot;: \\&quot;3\\&quot;,\\n&quot; + &quot; \\&quot;cat_icon_url\\&quot;: \\&quot;http://img.idaddy.cn/f/h/4/xs4ozwyc.jpg \\n&quot; + &quot;\\n&quot; + &quot;\\&quot;,\\n&quot; + &quot; \\&quot;cat_name\\&quot;: \\&quot;热门儿歌\\&quot;,\\n&quot; + &quot; \\&quot;cat_id\\&quot;: 8118,\\n&quot; + &quot; \\&quot;cat_group_age_scope\\&quot;: \\&quot;-1-6\\&quot;,\\n&quot; + &quot; \\&quot;cat_parent\\&quot;: 6707\\n&quot; + &quot; },\\n&quot; + &quot; {\\n&quot; + &quot; \\&quot;cat_count\\&quot;: \\&quot;0\\&quot;,\\n&quot; + &quot; \\&quot;cat_icon_url\\&quot;: \\&quot;http://img.idaddy.cn/f/h/4/nl9ezckp.jpg \\n&quot; + &quot;\\n&quot; + &quot;\\&quot;,\\n&quot; + &quot; \\&quot;cat_name\\&quot;: \\&quot;早教儿歌\\&quot;,\\n&quot; + &quot; \\&quot;cat_id\\&quot;: 10719,\\n&quot; + &quot; \\&quot;cat_group_age_scope\\&quot;: \\&quot;1-6\\&quot;,\\n&quot; + &quot; \\&quot;cat_parent\\&quot;: 6707\\n&quot; + &quot; },\\n&quot; + &quot; {\\n&quot; + &quot; \\&quot;cat_count\\&quot;: \\&quot;1\\&quot;,\\n&quot; + &quot; \\&quot;cat_icon_url\\&quot;: \\&quot;http://img.idaddy.cn/f/h/4/dsws0q0o.jpg \\n&quot; + &quot;\\n&quot; + &quot;\\&quot;,\\n&quot; + &quot; \\&quot;cat_name\\&quot;: \\&quot;幼儿园童谣\\&quot;,\\n&quot; + &quot; \\&quot;cat_id\\&quot;: 11423,\\n&quot; + &quot; \\&quot;cat_group_age_scope\\&quot;: \\&quot;1-6\\&quot;,\\n&quot; + &quot; \\&quot;cat_parent\\&quot;: 6707\\n&quot; + &quot; },\\n&quot; + &quot; {\\n&quot; + &quot; \\&quot;cat_count\\&quot;: \\&quot;1\\&quot;,\\n&quot; + &quot; \\&quot;cat_icon_url\\&quot;: \\&quot;http://img.idaddy.cn/f/h/6/f5i1z0n9.jpg \\n&quot; + &quot;\\n&quot; + &quot;\\&quot;,\\n&quot; + &quot; \\&quot;cat_name\\&quot;: \\&quot;韵律童谣\\&quot;,\\n&quot; + &quot; \\&quot;cat_id\\&quot;: 13945,\\n&quot; + &quot; \\&quot;cat_group_age_scope\\&quot;: \\&quot;2-6\\&quot;,\\n&quot; + &quot; \\&quot;cat_parent\\&quot;: 6707\\n&quot; + &quot; },\\n&quot; + &quot; {\\n&quot; + &quot; \\&quot;cat_count\\&quot;: \\&quot;0\\&quot;,\\n&quot; + &quot; \\&quot;cat_icon_url\\&quot;: \\&quot;http://img.idaddy.cn/f/h/4/k5xrsszd.jpg \\n&quot; + &quot;\\n&quot; + &quot;\\&quot;,\\n&quot; + &quot; \\&quot;cat_name\\&quot;: \\&quot;幼小衔接\\&quot;,\\n&quot; + &quot; \\&quot;cat_id\\&quot;: 14655,\\n&quot; + &quot; \\&quot;cat_group_age_scope\\&quot;: \\&quot;2-6\\&quot;,\\n&quot; + &quot; \\&quot;cat_parent\\&quot;: 6707\\n&quot; + &quot; }\\n&quot; + &quot; ]\\n&quot; + &quot; }\\n&quot; + &quot;}\\n&quot;; 含有集合对象的数据解析： （当Json数据中含有[]中括号时，说明该括号内的数据为集合数据，因此需要使用集合数据的数据解析方法进行解析）练习1： 服务器返回的Json数据为： [ &quot;111&quot;, &quot;222&quot;, &quot;333&quot; ] 看到中括号，说明是一段集合数据 定义模拟的需要解析的数据 String test = &quot;[\\n&quot; + &quot; \\&quot;111\\&quot;,\\n&quot; + &quot; \\&quot;222\\&quot;,\\n&quot; + &quot;\\&quot;333\\&quot;\\n&quot; + &quot;]&quot;; 这段数据不是键值对，直接定义一个String类型接收即可 Type type = new TypeToken&lt;List&lt;String&gt;&gt;(){}.getType();//这里的泛型将会决定你的json字符串转化的类型，一般是传实体类的对象 //参数1：满足json数组形式的字符串 //参数2：Type对象 List&lt;String&gt; list = new Gson().fromJson(test,type); System.out.println(list.get(2)); 那么问题来了，如果返回的数据是键值对类型的集合数据呢？ 比如 [ { &quot;name&quot;: &quot;宝宝乐&quot;, &quot;cast&quot;: &quot;98&quot; }, { &quot;name&quot;: &quot;宝宝乐1&quot;, &quot;cast&quot;: &quot;1289&quot; }, { &quot;name&quot;: &quot;宝宝乐2&quot;, &quot;cast&quot;: &quot;154&quot; } ] 定义模拟的需要解析的数据 String shop = &quot;[\\n&quot; + &quot; {\\n&quot; + &quot; \\&quot;name\\&quot;: \\&quot;宝宝乐\\&quot;,\\n&quot; + &quot; \\&quot;cast\\&quot;: \\&quot;98\\&quot;\\n&quot; + &quot; },\\n&quot; + &quot; {\\n&quot; + &quot; \\&quot;name\\&quot;: \\&quot;宝宝乐1\\&quot;,\\n&quot; + &quot; \\&quot;cast\\&quot;: \\&quot;1289\\&quot;\\n&quot; + &quot; },\\n&quot; + &quot; {\\n&quot; + &quot; \\&quot;name\\&quot;: \\&quot;宝宝乐2\\&quot;,\\n&quot; + &quot; \\&quot;cast\\&quot;: \\&quot;154\\&quot;\\n&quot; + &quot; }\\n&quot; + &quot;]&quot;; 定义存放被解析的数据的实体类对象 /** * 被解析的数据的实体类对象 */ public static class BabyShop{ private String name; private String cast; public String getName() { return name; } public void setName(String name) { this.name = name; } public String getCast() { return cast; } public void setCast(String cast) { this.cast = cast; } } 数据解析 Type type = new TypeToken&lt;List&lt;BabyShop&gt;&gt;(){}.getType();//这里的泛型将会决定你的json字符串转化的类型，一般是传实体类的对象 //参数1：满足json数组形式的字符串 //参数2：Type对象 List&lt;BabyShop&gt; list= new Gson().fromJson(shop,type); 练习2： 定义模拟的需要解析的数据 String integralss = &quot;{ \\&quot;userIntegralss\\&quot;:\\&quot;8000\\&quot;,&quot; + &quot;\\&quot;List\\&quot;:[ {\\&quot;integralss\\&quot;:\\&quot;50\\&quot;,&quot; + &quot;\\&quot;name\\&quot;:\\&quot;zhangqi\\&quot;},{\\&quot;integralss&quot; + &quot;\\&quot;:\\&quot;60\\&quot;,\\&quot;name\\&quot;:\\&quot;lisi\\&quot;}]}&quot;; 定义存放被解析的数据的实体类对象 Integrals.class public static class Integrals{ private String userIntegralss; private java.util.List&lt;ListBean&gt; List; public String getUserIntegralss() { return userIntegralss; } public void setUserIntegralss(String userIntegralss) { this.userIntegralss = userIntegralss; } public List&lt;ListBean&gt; getList() { return List; } public void setList(List&lt;ListBean&gt; List) { this.List = List; } public static class ListBean { private String integralss; private String name; public String getIntegralss() { return integralss; } public void setIntegralss(String integralss) { this.integralss = integralss; } public String getName() { return name; } public void setName(String name) { this.name = name; } } } 数据解析 Integrals jfw = new Gson().fromJson(integralss,Integrals.class); List&lt;Integrals.ListBean&gt; list =jfw.getList(); System.out.println(list.get(0).getIntegralss()); 将数据转换为Json数据格式 上面讲述了，服务器的Json数据如何解析到本地实体类，那么本地实体类的数据，又要怎么解析成Json数据呢？ 定义存放本地数据的实体类 public class Info{ private int code; private String info; private int data; public int getData() { return data; } public void setData(int data) { this.data = data; } public String getInfo() { return info; } public void setInfo(String info) { this.info = info; } public int getCode() { return code; } public void setCode(int code) { this.code = code; } } 定义模拟用户操作数据后，并将数据解析为Json数据的解析方法 public String login(){ Info info = new Info(); info.setCode(200); info.setData(10000); info.setInfo(&quot;注册失败&quot;); String result = new Gson().toJson(info); return result; } 调用该解析方法，并将其赋值给result对象保存 String result = login(); 那么这个result对象，便是被解析为Json数据的对象了","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"Handler实践的三种效果及Handler内存泄漏","slug":"HandlerDemo","date":"2017-08-27T12:10:23.000Z","updated":"2018-06-09T04:54:52.534Z","comments":true,"path":"2017/08/27/HandlerDemo/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2017/08/27/HandlerDemo/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 一、异步下载更新进度条 activity_down_load.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:orientation=&quot;vertical&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;New Button&quot; android:id=&quot;@+id/button&quot;/&gt; &lt;ProgressBar style=&quot;?android:attr/progressBarStyleHorizontal&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/progressBar&quot; android:max=&quot;100&quot; android:layout_gravity=&quot;center_horizontal&quot;/&gt; &lt;/LinearLayout&gt; DownloadActivity.java package com.administrator.handlerproject; import android.app.Activity; import android.os.Bundle; import android.os.Environment; import android.os.Handler; import android.os.Message; import android.view.View; import android.widget.ProgressBar; import java.io.File; import java.io.FileOutputStream; import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import java.net.MalformedURLException; import java.net.URL; import java.net.URLConnection; public class DownloadActivity extends Activity { private Handler mHandler; public static final int DOWNLOAD_MESSAGE_CODE = 100001; public static final int DOWNLOAD_MESSAGE_FAIL_CODE = 100002; @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_down_load); final ProgressBar progressBar = (ProgressBar)findViewById(R.id.progressBar); /** * 主线程 --&gt;start * 点击按钮 | * 发起下载 | * 开启子线程做下载 | * 下载完成后通知主线程 | --&gt;主线程更新进度条 */ findViewById(R.id.button).setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { new Thread(new Runnable() { @Override public void run() { download(&quot;http://download.sj.qq.com/upload/connAssitantDownload/upload/MobileAssistant_1.apk&quot;); } }).start(); } }); mHandler = new Handler(){ @Override public void handleMessage(Message msg) { super.handleMessage(msg); switch (msg.what){ case DOWNLOAD_MESSAGE_CODE: progressBar.setProgress((Integer) msg.obj); case DOWNLOAD_MESSAGE_FAIL_CODE: } } }; } private void download(String appUrl){ try { URL url = new URL(appUrl); URLConnection urlConnection = url.openConnection(); InputStream inputStream = urlConnection.getInputStream(); /** * 获取文件的总长度 */ int contentLength = urlConnection.getContentLength(); String downloadFolderName = Environment.getExternalStorageDirectory() + File.separator+&quot;imooc&quot;+File.separator; File file = new File(downloadFolderName); if (!file.exists()){ file.mkdir(); } String fileName = downloadFolderName + &quot;imooc.apk&quot;; File apkFile = new File(fileName); if (apkFile.exists()){ apkFile.delete(); } int downloadSize = 0; byte[] bytes = new byte[1024]; int length = 0; OutputStream outputStream = new FileOutputStream(fileName); while ((length = inputStream.read(bytes)) != -1){ outputStream.write(bytes,0,length); downloadSize += length; /** * update UI */ Message message = Message.obtain(); message.obj = downloadSize * 100 / contentLength; message.what = DOWNLOAD_MESSAGE_CODE; mHandler .sendMessage(message); } inputStream.close(); outputStream.close(); }catch (MalformedURLException e){ notifyDownloadFaild(); e.printStackTrace(); }catch (IOException e){ notifyDownloadFaild(); e.printStackTrace(); } } private void notifyDownloadFaild(){ Message message = Message.obtain(); message.what = DOWNLOAD_MESSAGE_FAIL_CODE; mHandler .sendMessage(message); } } 二、倒计时效果（内存泄漏处理） 当Activity被销毁的时候，被延时的消息会在被处理之前存在于主线程的消息队列中，而这个消息中又包含了Handler的引用，而Handler是一个匿名内部类的实例，其持有外面的MainActivity的引用。这些引用会一直保持到该消息被处理，从而阻止了MainActivity被垃圾回收器回收。因此这就导致了MainActivity无法被回收，进而导致MainActivity持有的很多资源都无法回收，这就是我们常说的内存泄漏。 activity_main.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;android.support.constraint.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;com.administrator.handlerxuexi.MainActivity&quot;&gt; &lt;TextView android:id=&quot;@+id/countdownTimeTextView&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;@null&quot; app:layout_constraintBottom_toBottomOf=&quot;parent&quot; app:layout_constraintLeft_toLeftOf=&quot;parent&quot; app:layout_constraintRight_toRightOf=&quot;parent&quot; app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt; &lt;/android.support.constraint.ConstraintLayout&gt; MainActivity.java package com.administrator.handlerxuexi; import android.os.Handler; import android.os.Message; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.widget.TextView; import java.lang.ref.WeakReference; public class MainActivity extends AppCompatActivity { /** * 倒计时标记handle code */ public static final int COUNTDOWN_TIME_CODE = 100001; /** * 倒计时间隔 */ public static final int DELAY_MILLIS = 1000; /** * 倒计时最大值 */ public static final int MAX_COUNT = 10; private TextView mCountdownTimeTextView; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); //得到控件 mCountdownTimeTextView= (TextView)findViewById(R.id.countdownTimeTextView); //创建了一个handler CountdownTimeHandler handler = new CountdownTimeHandler(this); // Handler handler = new Handler(){}强引用会出现内存泄漏， //新建了一个message Message message = Message.obtain(); message.what = COUNTDOWN_TIME_CODE; message.arg1 = MAX_COUNT; //第一次发送这个message handler.sendMessageDelayed(message,DELAY_MILLIS); } /** * 创建弱引用的CountdownTimeHandler类继承Handler * */ public static class CountdownTimeHandler extends Handler{ static final int MIN_COUNT = 0; final WeakReference&lt;MainActivity&gt; mWeakReference;//括号内参数是当前Activity对象 CountdownTimeHandler(MainActivity activity){//括号内参数是当前Activity对象 mWeakReference = new WeakReference&lt;&gt; (activity ); } @Override public void handleMessage(Message msg) { super.handleMessage(msg); //创建一个当前的Activity接收 MainActivity activity =mWeakReference.get();//获得上面CountdownTimeHandler内定义的mWeakReference对象 switch (msg.what){ case COUNTDOWN_TIME_CODE: int value = msg.arg1; activity.mCountdownTimeTextView.setText(String.valueOf(value --)); //循环发的消息控制 if (value &gt;= MIN_COUNT) { Message message = Message.obtain(); message.what = COUNTDOWN_TIME_CODE; message.arg1 = value; sendMessageDelayed(message, DELAY_MILLIS); } break; } } } } 三、用Handler实现打地鼠游戏 activity_main.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:background=&quot;#FFFFFF&quot;&gt; &lt;ImageView android:id=&quot;@+id/image_view&quot; android:layout_width=&quot;80dp&quot; android:layout_height=&quot;80dp&quot; android:src=&quot;@mipmap/ic_launcher&quot; android:visibility=&quot;gone&quot;/&gt; &lt;Button android:id=&quot;@+id/start_button&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_alignParentBottom=&quot;true&quot; android:layout_centerHorizontal=&quot;true&quot; android:text=&quot;点击开始&quot;/&gt; &lt;TextView android:id=&quot;@+id/text_view&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_centerHorizontal=&quot;true&quot; android:layout_centerVertical=&quot;true&quot; android:textAppearance=&quot;?android:attr/textAppearanceLarge&quot;/&gt; &lt;/RelativeLayout&gt; MainActivity.java package com.administrator.diglett; import android.app.Activity; import android.content.DialogInterface; import android.os.Handler; import android.os.Message; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.view.MotionEvent; import android.view.View; import android.widget.Button; import android.widget.ImageView; import android.widget.TextView; import android.widget.Toast; import java.lang.ref.WeakReference; import java.util.Random; public class MainActivity extends AppCompatActivity implements View.OnClickListener,View.OnTouchListener{ public static final int CODE = 123; private TextView mResultTextView; private ImageView mDiglettImageView; private Button mStarrButton; public int[][] mPosition = new int[][]{ {342,180},{432,880}, {521,256},{429,780}, {456,976},{145,665}, {123,678},{564,567}, }; private int mTotalCount; private int mSuccessCount; public static final int MAX_COUNT = 10; private DialettHandler mHandler = new DialettHandler(this); @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); initView(); setTitle(&quot;打地鼠&quot;); } private void initView(){ mResultTextView = (TextView)findViewById(R.id.text_view); mDiglettImageView = (ImageView)findViewById(R.id.image_view); mStarrButton = (Button)findViewById(R.id.start_button); mStarrButton.setOnClickListener(this); mDiglettImageView.setOnTouchListener(this); } @Override public void onClick(View v) { switch (v.getId()){ case R.id.start_button: start(); break; } } private void start() { //发送消息 handler.sendmessagedelayer mResultTextView.setText(&quot;开始啦&quot;); mStarrButton.setText(&quot;游戏中.....&quot;); mStarrButton.setEnabled(false); next(0); } private void next(int delayTime){ //让地鼠每次都会有下一个 int position = new Random().nextInt(mPosition.length); Message message = Message.obtain(); message.what = CODE; message.arg1 = position; mHandler.sendMessageDelayed(message,delayTime); mTotalCount ++; } @Override public boolean onTouch(View v, MotionEvent event) { v.setVisibility(View.GONE); mSuccessCount ++; mResultTextView.setText(&quot;打到了&quot;+mSuccessCount + &quot;只，共&quot; +(MAX_COUNT-1) + &quot;只&quot;); return false; } /** * 创建弱引用的CountdownTimeHandler类继承Handler来处理Handler的内存泄漏问题 */ public static class DialettHandler extends Handler{ public static final int RANDOM_NUBER = 500; public final WeakReference&lt;MainActivity&gt; mWeakReference;//括号内参数是当前Activity对象 public DialettHandler(MainActivity activity) {//括号内参数是当前Activity对象 mWeakReference = new WeakReference&lt;&gt;(activity); } @Override public void handleMessage(Message msg) { super.handleMessage(msg); //创建一个当前的Activity接收 MainActivity activity = mWeakReference.get();//拿到上面的Activity switch (msg.what){ case CODE: if(activity.mTotalCount&gt;MAX_COUNT){ activity.clear(); Toast.makeText(activity,&quot;地鼠打完了！&quot;,Toast.LENGTH_LONG).show(); return; } int position =msg.arg1; activity.mDiglettImageView.setX(activity.mPosition[position][0]); activity.mDiglettImageView.setY(activity.mPosition[position][1]); activity.mDiglettImageView.setVisibility(View.VISIBLE); int randomTime = new Random().nextInt(RANDOM_NUBER) + RANDOM_NUBER; activity.next(randomTime); break; } } } private void clear() { mTotalCount = 0; mSuccessCount = 0; mDiglettImageView.setVisibility(View.GONE); mStarrButton.setText(&quot;点击开始&quot;); mStarrButton.setEnabled(true); } }","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"Handler常见发送消息方法","slug":"Handler","date":"2017-08-27T01:10:23.000Z","updated":"2018-06-09T04:53:06.671Z","comments":true,"path":"2017/08/27/Handler/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2017/08/27/Handler/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 代码实现最简单的Handler activity_main.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; android:layout_height=&quot;match_parent&quot; android:gravity=&quot;center_horizontal&quot; tools:context=&quot;com.administrator.handlerproject.MainActivity&quot;&gt; &lt;TextView android:id=&quot;@+id/textView&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;text&quot;/&gt; &lt;Button android:id=&quot;@+id/btn1&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;按钮&quot;/&gt; &lt;/LinearLayout&gt; MainActivity.java package com.administrator.handlerproject; import android.os.Handler; import android.os.Message; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.util.Log; import android.view.View; import android.widget.TextView; public class MainActivity extends AppCompatActivity { /** * UI线程 */ private static final String TAG = &quot;MainActivity&quot;; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); final TextView textView = findViewById(R.id.textView); //创建一个Handler final Handler handler = new Handler() { @Override public void handleMessage(Message msg) { super.handleMessage(msg); if (msg.what==1001)//得到这个消息标记开始处理消息 // //处理消息 textView.setText(&quot;weimei&quot;); // Log.d(TAG,&quot;handleMessage:&quot; + msg.what); } }; findViewById(R.id.btn1).setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { //有可能做大量耗时操作 /** * 子线程 */ new Thread(new Runnable() { @Override public void run() { try { Thread.sleep(2000); } catch (InterruptedException e) { e.printStackTrace(); } handler.sendEmptyMessage(1001);//向消息队列发送一个标记 } }).start(); } }); } } Handler的一些常用标记键，以及延时方法。 xml布局同上不变 MainActivity.java package com.administrator.handlerproject; import android.os.Handler; import android.os.Message; import android.os.SystemClock; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.util.Log; import android.view.View; import android.widget.TextView; public class MainActivity extends AppCompatActivity { /** * UI线程 */ private static final String TAG = &quot;MainActivity&quot;; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); final TextView textView = findViewById(R.id.textView); //创建一个Handler final Handler handler = new Handler() { @Override public void handleMessage(Message msg) {//接收到完整的包裹 super.handleMessage(msg); if (msg.what==1002)//拆解包裹拿值 // //处理消息 textView.setText(&quot;weimei&quot;); Log.d(TAG,&quot;handleMessage:&quot; + msg.arg1); } }; findViewById(R.id.btn1).setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { //有可能做大量耗时操作 /** * 子线程 */ new Thread(new Runnable() { @Override public void run() { try { Thread.sleep(2000); } catch (InterruptedException e) { e.printStackTrace(); } handler.sendEmptyMessage(1001); Message message = Message.obtain(); message.what=1002; message.arg1=1003; message.arg2=1004;//将每个消息组装 message.obj=MainActivity.this;//打包发出去 handler.sendMessage(message); /** * 定时任务 */ handler.sendMessageAtTime(message, SystemClock.uptimeMillis()+3000);//计时,SystemClock.uptimeMillis()获取当前时间 handler.sendMessageDelayed(message,2000);//上面的是绝对时间，下面的是相对时间，即消息送走时间 final Runnable runnable = new Runnable() { @Override public void run() { int a = 1 + 2 + 3; } }; handler.post(runnable); runnable.run(); handler.postDelayed(runnable,2000);//延迟两秒 } }).start(); } }); } }","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"SharedPreferences数据存储及内外部存储空间的读写方式","slug":"SharedPreferences","date":"2017-08-27T01:10:23.000Z","updated":"2018-06-09T05:01:36.348Z","comments":true,"path":"2017/08/27/SharedPreferences/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2017/08/27/SharedPreferences/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 一、简单案例 package com.administrator.cachedemo; import android.content.Context; import android.content.SharedPreferences; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.util.Log; public class MainActivity extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); } /** * SharedPreferences存储数据 */ private void testSharedPreferences(){ /** * 第一个参数：存放在私有空间里的文件名称 * Context.MODE_PRIVATE支持读和写 */ SharedPreferences sharedPreferences = getSharedPreferences(&quot;sharedpreferences&quot;, Context.MODE_PRIVATE); /** * 存储 */ sharedPreferences.edit().putInt(&quot;test&quot;, 1).commit(); // sharedPreferences.edit().putInt(&quot;test&quot;, 1).putInt(&quot;test2&quot;, 2).commit();// editor.apply(); // sharedPreferences.getString(&quot;name&quot;,null);//第二个参数是获取的时候，没有时，传null /** * 读取 */ int value = sharedPreferences.getInt(&quot;test&quot;, 0); Log.e(&quot;lxn&quot;, &quot;value:&quot; + value); } } 二、读取内外部存储空间 MainAvtivity.java package com.administrator.cachedemo; import android.os.Environment; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.text.TextUtils; import android.util.Log; import java.io.BufferedReader; import java.io.File; import java.io.FileReader; import java.io.FileWriter; public class MainActivity extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); } /** * 读写内部存储空间 */ private void testInternalStorage() { File cacheDir = getCacheDir(); File parentDir = new File(cacheDir, &quot;mycache&quot;); if (!parentDir.exists()) {//判断文件夹是否存在 parentDir.mkdirs();//mkdir()创建单个目录，mkdirs()创建多个逐级目录 } File file = new File(parentDir,&quot;text.txt&quot;); try { FileReader fileReader = new FileReader(file); BufferedReader bufferedReader = new BufferedReader(fileReader); String line = null; while ((line = bufferedReader.readLine()) != null) { Log.e(&quot;lxn&quot;, &quot;line:&quot; + line); } bufferedReader.close(); fileReader.close(); } catch (Exception e) { Log.e(&quot;lxn&quot;, &quot;testInternalStorage&quot;, e); } } /** * 读写外部存储空间 */ private void testRxternalStorage(){ if(TextUtils.equals(Environment.getExternalStorageState(),Environment.MEDIA_MOUNTED)){//判断SD卡是否挂载上 return; } File cacheDir = Environment.getExternalStorageDirectory();//获取外部存储目录 File parentDir = new File(cacheDir, &quot;mycache&quot;); if (!parentDir.exists()) { parentDir.mkdirs(); } File file = new File(parentDir, &quot;test.txt&quot;); try { FileWriter fileWriter = new FileWriter(file); fileWriter.write(&quot;this is test2&quot;); fileWriter.flush(); fileWriter.close(); } catch (Exception e) { Log.e(&quot;lxn&quot;, &quot;testInternalStorage&quot;, e); } try { FileReader fileReader = new FileReader(file); BufferedReader bufferedReader = new BufferedReader(fileReader); String line = null; while ((line = bufferedReader.readLine()) != null) { Log.e(&quot;lxn&quot;, &quot;line:&quot; + line); } bufferedReader.close(); fileReader.close(); } catch (Exception e) { Log.e(&quot;lxn&quot;, &quot;testInternalStorage&quot;, e); } } }","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"Fragment的静态加载","slug":"FragmentStaLoading","date":"2017-08-27T01:10:23.000Z","updated":"2018-06-09T05:29:28.049Z","comments":true,"path":"2017/08/27/FragmentStaLoading/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2017/08/27/FragmentStaLoading/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 xml布局文件 fragment_list.xml （控制fragment里面的内容） &lt;?xml version=”1.0” encoding=”utf-8”?&gt; activity_static_load_fragment.xml （控制fragment控件所处于Activity页面中的位置） &lt;?xml version=”1.0” encoding=”utf-8”?&gt; &lt;fragment android:id=&quot;@+id/listFragment&quot; android:name=&quot;com.administrator.fragmentdemo.ListFragment&quot; android:layout_width=&quot;100dp&quot; android:layout_height=&quot;100dp&quot;/&gt; &lt;fragment android:id=&quot;@+id/listFragmentTow&quot; android:name=&quot;com.administrator.fragmentdemo.ListFragment&quot; android:layout_width=&quot;100dp&quot; android:layout_height=&quot;100dp&quot; android:layout_centerInParent=&quot;true&quot;/&gt; &lt;/RelativeLayout&gt; Fragment的Java代码管理类 package com.administrator.fragmentdemo; import android.content.Context; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.TextView; /** * 列表fragment */ public class ListFragment extends Fragment { //创建视图 @Nullable @Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) { //new view View view = inflater.inflate(R.layout.fragment_list,container,false); TextView textView = view.findViewById(R.id.textView);//需要根据根视图view进行findViewById textView.setText(&quot;hi&quot;); return view; } @Override public void onAttach(Context context) { super.onAttach(context); } @Override public void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); } @Override public void onActivityCreated(@Nullable Bundle savedInstanceState) { super.onActivityCreated(savedInstanceState); } @Override public void onStart() { super.onStart(); } @Override public void onPause() { super.onPause(); } @Override public void onStop() { super.onStop(); } @Override public void onDestroyView() { super.onDestroyView(); } @Override public void onDestroy() { super.onDestroy(); } } 装载Fragment的Activity的Java代码 package com.administrator.fragmentdemo; import android.content.Context; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.TextView; /** * 列表fragment */ public class ListFragment extends Fragment { //创建视图 @Nullable @Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) { //new view View view = inflater.inflate(R.layout.fragment_list,container,false); TextView textView = view.findViewById(R.id.textView);//需要根据根视图view进行findViewById textView.setText(&quot;hi&quot;); return view; } @Override public void onAttach(Context context) { super.onAttach(context); } @Override public void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); } @Override public void onActivityCreated(@Nullable Bundle savedInstanceState) { super.onActivityCreated(savedInstanceState); } @Override public void onStart() { super.onStart(); } @Override public void onPause() { super.onPause(); } @Override public void onStop() { super.onStop(); } @Override public void onDestroyView() { super.onDestroyView(); } @Override public void onDestroy() { super.onDestroy(); } }","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"Fragment实现底部切换标签","slug":"FragmentTab","date":"2017-07-27T05:15:23.000Z","updated":"2018-06-09T06:36:57.625Z","comments":true,"path":"2017/07/27/FragmentTab/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2017/07/27/FragmentTab/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 一、首先需要为在drawable目录下为每个按钮添加底部选择器 根据不同的需要可以为选择器设定如下不同的状态 android:state_pressed 是否按下，如一个按钮触摸或者点击。 android:state_focused 是否取得焦点，比如用户选择了一个文本框。 android:state_hovered 光标是否悬停，通常与focused state相同，它是4.0的新特性 android:state_selected 被选中，它与focus state并不完全一样，如一个list view 被选中的时候，它里面的各个子组件可能通过方向键，被选中了。 android:state_checkable 组件是否能被check。如：RadioButton是可以被check的。 android:state_checked 被checked了，如：一个RadioButton可以被check了。 android:state_enabled 能够接受触摸或者点击事件 android:state_activated 被激活，一个布尔值，如果设置为ture，那么这个项目应该在对象被持久选择时使用（如对象的高亮状态），否则应该在对象没有被激活时使用这个状态。 android:state_window_focused 应用程序是否在前台，当有通知栏被拉下来或者一个对话框弹出的时候应用程序就不在前台了 二、将选择器设置到布局文件中 三、创建每一个Fragment对应的布局 如：fragment_main &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;这是首页&quot;/&gt; &lt;/RelativeLayout&gt; 其余同上。四、创建每一个按钮对应的Fragment 如:MainFragment.java package com.administrator.taolvyou.fragment; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import com.administrator.taolvyou.R; /** * Created by Administrator on 2018/5/8. */ public class MainFragment extends Fragment { @Nullable @Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, Bundle savedInstanceState) { return inflater.inflate(R.layout.fragment_main,container,false); } } 其余同上。五、在MainActivity中加载Fragment MainActivity.java package com.administrator.taolvyou; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.view.View; import android.widget.LinearLayout; import com.administrator.taolvyou.fragment.FindFragment; import com.administrator.taolvyou.fragment.MainFragment; import com.administrator.taolvyou.fragment.MeFragment; public class MainActivity extends AppCompatActivity implements View.OnClickListener { protected LinearLayout mMenuMain; protected LinearLayout mMenuFind; protected LinearLayout mMenuMe; protected MainFragment mMainFragment = new MainFragment();//首页 protected FindFragment mFindFragment = new FindFragment();//发现 protected MeFragment mMeFragment = new MeFragment();//关于我的 @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); initView(); //获取管理类 this.getSupportFragmentManager() .beginTransaction() .add(R.id.container_content,mMainFragment) .show(mMainFragment)//设置显示状态 .add(R.id.container_content,mFindFragment) .hide(mFindFragment)//设置隐藏状态 .add(R.id.container_content,mMeFragment) .hide(mMeFragment).commit(); //事物添加 默认：显示首页 其他页面：隐藏 //提交 } /** * 初始化视图 */ public void initView(){ mMenuMain = this.findViewById(R.id.menu_main); mMenuFind = this.findViewById(R.id.menu_find); mMenuMe = this.findViewById(R.id.menu_me); mMenuMain.setOnClickListener(this); mMenuFind.setOnClickListener(this); mMenuMe.setOnClickListener(this); } @Override public void onClick(View v) { switch (v.getId()){ case R.id.menu_main: this.getSupportFragmentManager() .beginTransaction() .show(mMainFragment) .hide(mFindFragment) .hide(mMeFragment) .commit(); break; case R.id.menu_find: this.getSupportFragmentManager() .beginTransaction() .hide(mMainFragment) .show(mFindFragment) .hide(mMeFragment) .commit(); break; case R.id.menu_me: this.getSupportFragmentManager() .beginTransaction() .hide(mMainFragment) .hide(mFindFragment) .show(mMeFragment) .commit(); break; } } }","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"GridView实现图片加载","slug":"GridViewPicLoding","date":"2017-07-27T01:10:23.000Z","updated":"2018-06-09T04:46:35.311Z","comments":true,"path":"2017/07/27/GridViewPicLoding/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2017/07/27/GridViewPicLoding/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 一、简单写法 activity_example.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot;&gt; &lt;GridView android:id=&quot;@+id/gridview&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:columnWidth=&quot;90dp&quot; android:numColumns=&quot;auto_fit&quot; android:verticalSpacing=&quot;10dp&quot; android:horizontalSpacing=&quot;10dp&quot; android:stretchMode=&quot;columnWidth&quot; android:gravity=&quot;center&quot; &gt;&lt;/GridView&gt; &lt;/LinearLayout&gt; ExampleActivity.java package com.administrator.gridviewdemo; import android.app.Activity; import android.os.Bundle; import android.widget.ArrayAdapter; import android.widget.GridView; import java.util.ArrayList; import java.util.List; /** * GridView展示文字 */ public class ExampleActivity extends Activity { private GridView gridView; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_example); gridView= (GridView) findViewById(R.id.gridview); List&lt;String&gt; strList=new ArrayList&lt;String&gt;(); for(int i=0;i&lt;9;i++) { strList.add(&quot;haha&quot;+i); } //最简单的适配器，数组适配器 ArrayAdapter&lt;String&gt;arrayAdapter=new ArrayAdapter&lt;String&gt;(this,android.R.layout.simple_expandable_list_item_1,strList); gridView.setAdapter(arrayAdapter); } } 二、用GridView展示已安装的应用 (一)、首先需要GridView展示的单条条目布局： item_grid_view.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;ImageView android:id=&quot;@+id/img_appIcon&quot; android:layout_width=&quot;50dp&quot; android:layout_height=&quot;50dp&quot; android:scaleType=&quot;centerCrop&quot;/&gt; &lt;TextView android:id=&quot;@+id/tv_appName&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginLeft=&quot;5dp&quot; android:text=&quot;测试&quot; android:layout_marginTop=&quot;5dp&quot;/&gt; &lt;/LinearLayout&gt; (二)、然后需要把在主要引用的页面中，创建GridView用于加载条目的布局位置 activity_example2.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:orientation=&quot;vertical&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;GridView android:id=&quot;@+id/gridview&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:columnWidth=&quot;90dp&quot; android:numColumns=&quot;3&quot; android:verticalSpacing=&quot;10dp&quot; android:horizontalSpacing=&quot;10dp&quot; android:stretchMode=&quot;columnWidth&quot; android:gravity=&quot;center&quot; /&gt; &lt;/LinearLayout&gt; (三)、需要为GridView增加用于接收数据的实体类 AppInfo.class package com.administrator.gridviewdemo; import android.graphics.drawable.Drawable; /** * Created by Administrator on 2018/5/11. */ public class AppInfo { /** * 应用名称 */ private String appName; /** * 应用包名 */ private String pacjageName; /** * 版本名称 */ private String versionName; /** * 版本号 */ private int versionCode; /** * 应用图标 */ private Drawable appIcon; public String getAppName() { return appName; } public void setAppName(String appName) { this.appName = appName; } public String getPacjageName() { return pacjageName; } public void setPacjageName(String pacjageName) { this.pacjageName = pacjageName; } public String getVersionName() { return versionName; } public void setVersionName(String versionName) { this.versionName = versionName; } public int getVersionCode() { return versionCode; } public void setVersionCode(int versionCode) { this.versionCode = versionCode; } public Drawable getAppIcon() { return appIcon; } public void setAppIcon(Drawable appIcon) { this.appIcon = appIcon; } } (四)、设置GridView的适配器 GridViewAdapter.java package com.administrator.gridviewdemo; import android.content.Context; import android.view.View; import android.view.ViewGroup; import android.widget.BaseAdapter; import android.widget.ImageView; import android.widget.TextView; import java.util.List; /** * Created by Administrator on 2018/5/11. */ public class GridViewAdapter extends BaseAdapter { private Context context; private List&lt;AppInfo&gt;appInfoList; public GridViewAdapter(Context context, List&lt;AppInfo&gt; appInfoList) { this.appInfoList=appInfoList; this.context=context; } @Override public int getCount() { return appInfoList.size(); } @Override public Object getItem(int position) { return appInfoList.get(position); } @Override public long getItemId(int position) { return position; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if(convertView==null) { convertView=View.inflate(context, R.layout.item_grid_view,null); holder=new ViewHolder(); holder.img_appIcon= (ImageView) convertView.findViewById(R.id.img_appIcon); holder.tv_appName= (TextView) convertView.findViewById(R.id.tv_appName); convertView.setTag(holder); } else { holder= (ViewHolder) convertView.getTag(); } AppInfo appInfo=appInfoList.get(position); holder.img_appIcon.setImageDrawable(appInfo.getAppIcon()); holder.tv_appName.setText(appInfo.getAppName()+&quot; &quot;+appInfo.getVersionName()); return convertView; } public class ViewHolder { ImageView img_appIcon; TextView tv_appName; } } (五)、创建的函数中调用 ExampleActivity2.java package com.administrator.gridviewdemo; import android.content.pm.PackageInfo; import android.content.pm.PackageManager; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.widget.GridView; import java.util.ArrayList; import java.util.List; /** * 获取应用列表展示 */ public class ExampleActivity2 extends AppCompatActivity { private GridView gridView; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_example2); gridView = (GridView)findViewById(R.id.gridview); GridViewAdapter gridViewAdapter = new GridViewAdapter(this,getAppList()); gridView.setAdapter(gridViewAdapter); } public List&lt;AppInfo&gt; getAppList() { List&lt;AppInfo&gt; appInfoList = new ArrayList&lt;AppInfo&gt;(); PackageManager packageManager = getPackageManager(); List&lt;PackageInfo&gt; installedPackages = packageManager.getInstalledPackages(0); for (int i = 0; i &lt; installedPackages.size(); i++) { PackageInfo packageInfo = installedPackages.get(i); AppInfo appInfo = new AppInfo(); appInfo.setAppName(packageInfo.applicationInfo.loadLabel(packageManager).toString()); appInfo.setAppIcon(packageInfo.applicationInfo.loadIcon(packageManager)); appInfo.setPacjageName(packageInfo.packageName); appInfo.setVersionCode(packageInfo.versionCode); appInfo.setVersionName(packageInfo.versionName); // if ((packageInfo.applicationInfo.flags&amp; ApplicationInfo.FLAG_SYSTEM)==0) {//过滤系统应用的判断 appInfoList.add(appInfo); // } } return appInfoList; } } 三、用GridView加载网络图片 (一)、添加依赖 build.gradle dependencies { compile &apos;com.github.bumptech.glide:glide:3.7.0&apos; } 点击右上角Sync Now (二)、首先需要GridView展示的单条条目布局： item_grid_view.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;ImageView android:id=&quot;@+id/img_appIcon&quot; android:layout_width=&quot;50dp&quot; android:layout_height=&quot;50dp&quot; android:scaleType=&quot;centerCrop&quot;/&gt; &lt;TextView android:id=&quot;@+id/tv_appName&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginLeft=&quot;5dp&quot; android:text=&quot;测试&quot; android:layout_marginTop=&quot;5dp&quot;/&gt; &lt;/LinearLayout&gt; (三)、然后需要把在主要引用的页面中，创建GridView用于加载条目的布局位置 activity_example.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:orientation=&quot;vertical&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;GridView android:id=&quot;@+id/gridview&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:columnWidth=&quot;90dp&quot; android:numColumns=&quot;3&quot; android:verticalSpacing=&quot;10dp&quot; android:horizontalSpacing=&quot;10dp&quot; android:stretchMode=&quot;columnWidth&quot; android:gravity=&quot;center&quot; /&gt; &lt;/LinearLayout&gt; (四)、需要为GridView增加用于接收数据的实体类 ImageInfo.java package com.administrator.gridviewdemo; import android.graphics.Bitmap; /** * Created by Administrator on 2018/5/11. */ public class ImageInfo { private String imagePath; private Bitmap bitmap; private String text; public String getText() { return text; } public void setText(String text) { this.text = text; } public String getImagePath() { return imagePath; } public void setImagePath(String imagePath) { this.imagePath = imagePath; } public Bitmap getBitmap() { return bitmap; } public void setBitmap(Bitmap bitmap) { this.bitmap = bitmap; } } (五)、设置GridView的适配器 GridViewAdapter.java package com.administrator.gridviewdemo; import android.content.Context; import android.view.View; import android.view.ViewGroup; import android.widget.BaseAdapter; import android.widget.ImageView; import android.widget.TextView; import com.bumptech.glide.Glide; import java.util.List; /** * Created by Administrator on 2018/5/11. */ public class GridViewAdapter extends BaseAdapter { private Context context; private List&lt;ImageInfo&gt;imageInfoList; public GridViewAdapter(Context context, List&lt;ImageInfo&gt; appImageInfoList) { this.imageInfoList=appImageInfoList; this.context=context; } @Override public int getCount() { return imageInfoList.size(); } @Override public Object getItem(int position) { return imageInfoList.get(position); } @Override public long getItemId(int position) { return position; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if(convertView==null) { convertView=View.inflate(context, R.layout.item_grid_view,null); holder=new ViewHolder(); holder.imageView= (ImageView) convertView.findViewById(R.id.img_appIcon); holder.textView= (TextView) convertView.findViewById(R.id.tv_appName); convertView.setTag(holder); } else { holder= (ViewHolder) convertView.getTag(); } ImageInfo imageInfo=imageInfoList.get(position); //placeholder()是图片的占位符，网络还没下载下来的时候占着位置 //centerCrop()缓存 Glide.with(context).load(imageInfo.getImagePath()).placeholder(R.mipmap.ic_launcher).centerCrop().into(holder.imageView); // /** // * 加载图片 // */ // if(imageInfo.getBitmap()==null){//如果网络还没下载好 // holder.imageView.setImageResource(R.mipmap.ic_launcher); // }else { // holder.imageView.setImageBitmap(imageInfo.getBitmap()); // } holder.textView.setText(imageInfo.getText()); return convertView; } public class ViewHolder { ImageView imageView; TextView textView; } } (六)创建的函数中调用 ExampleActivity.java package com.administrator.gridviewdemo; import android.content.Context; import android.graphics.Bitmap; import android.graphics.BitmapFactory; import android.os.AsyncTask; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.widget.GridView; import java.io.IOException; import java.io.InputStream; import java.net.HttpURLConnection; import java.net.MalformedURLException; import java.net.URL; import java.util.ArrayList; import java.util.List; public class ExampleActivity extends AppCompatActivity { private GridViewAdapter gridAdpter; private GridView gridView; private List&lt;String&gt; imgList; private List&lt;ImageInfo&gt; imageInfoList; private ImageLoadTask imageLoadTask; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_example); initUi(); initData(); } private void initData() { imgList=new ArrayList&lt;String&gt;(); imgList.add(&quot;http://img5.duitang.com/uploads/item/201406/26/20140626164837_dzKds.jpeg&quot;); imgList.add(&quot;http://img2.imgtn.bdimg.com/it/u=3980629563,3881837630&amp;fm=21&amp;gp=0.jpg&quot;); imgList.add(&quot;http://img5q.duitang.com/uploads/item/201505/08/20150508155052_XJaNW.jpeg&quot;); imgList.add(&quot;http://img4.duitang.com/uploads/item/201407/02/20140702105736_FdN5P.jpeg&quot;); imgList.add(&quot;http://img2.imgtn.bdimg.com/it/u=2866652161,3841912673&amp;fm=21&amp;gp=0.jpg&quot;); imgList.add(&quot;http://img4.imgtn.bdimg.com/it/u=883757693,2063816225&amp;fm=21&amp;gp=0.jpg&quot;); imgList.add(&quot;http://cdn.duitang.com/uploads/item/201309/26/20130926110955_QtUdX.jpeg&quot;); imgList.add(&quot;http://zjimg.5054399.com/allimg/160815/14_160815161625_9.jpg&quot;); imgList.add(&quot;http://i-7.vcimg.com/trim/09ce7067d2467c54cf05bbd271ee3ec8430415/trim.jpg&quot;); imageInfoList = new ArrayList&lt;ImageInfo&gt;(); for(int i = 0;i&lt;9;i++){ ImageInfo imageInfo = new ImageInfo(); imageInfo.setImagePath(imgList.get(i)); imageInfo.setText(&quot;图片&quot;+); imageInfoList.add(imageInfo); } gridAdpter = new GridViewAdapter(this,imageInfoList); gridView.setAdapter(gridAdpter); // imageLoadTask = new ImageLoadTask(this,gridAdpter); // imageLoadTask.execute();//启动 } private void initUi() { gridView = (GridView)findViewById(R.id.gridview); } public Bitmap getImagefromNetWork(String path){ try { URL url = new URL(path);i HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection(); urlConnection.setDoInput(true); urlConnection.setConnectTimeout(10*1000); urlConnection.connect(); InputStream inputStream = urlConnection.getInputStream(); Bitmap bitmap = BitmapFactory.decodeStream(inputStream); inputStream.close(); return bitmap; } catch (MalformedURLException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } return null; } public class ImageLoadTask extends AsyncTask&lt;String,Void,Void&gt;{ private GridViewAdapter gridViewAdapter; public ImageLoadTask(Context context,GridViewAdapter gridViewAdapter){ this.gridViewAdapter=gridViewAdapter; } @Override protected void onPreExecute() { super.onPreExecute(); } @Override protected Void doInBackground(String... strings) { for (int i = 0;i&lt;gridViewAdapter.getCount();i++){ ImageInfo imageInfo = (ImageInfo) gridViewAdapter.getItem(i); String imagePath = imageInfo.getImagePath(); Bitmap bitmap = getImagefromNetWork(imagePath); imageInfo.setBitmap(bitmap); publishProgress(); } return null; } @Override protected void onProgressUpdate(Void... values) { super.onProgressUpdate(values); gridViewAdapter.notifyDataSetChanged(); } } }","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"Fragment向Activity传值","slug":"FragmentToAty","date":"2017-07-02T11:10:23.000Z","updated":"2018-06-09T07:42:39.663Z","comments":true,"path":"2017/07/02/FragmentToAty/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2017/07/02/FragmentToAty/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 xml布局文件 fragment_list.xml （控制fragment里面的内容） &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:background=&quot;#ffff00&quot;&gt; &lt;TextView android:id=&quot;@+id/textView&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_centerInParent=&quot;true&quot; android:text=&quot;TextView&quot; android:textColor=&quot;#000000&quot; android:textSize=&quot;20sp&quot;/&gt; &lt;/RelativeLayout&gt; Fragment的Java代码管理类 package com.administrator.fragmentdemo; import android.content.Context; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.TextView; /** * 列表fragment */ public class ListFragment extends Fragment { public static final String BUNDLE_TITLE = &quot;bundle_title&quot;; private String mTitle = &quot;mo_ren_zhi&quot;; public static ListFragment newInstance(String title){ ListFragment fragment = new ListFragment(); Bundle bundle = new Bundle();//创建一个bundle对象对数据封装 bundle.putString(BUNDLE_TITLE,title);//put一下，有很多比如char，int等基础数据，比如这里用String(key,Value)，还可以比如putChar(); fragment.setArguments(bundle);//将封装好的bundle数据，通过fragment的setArgument方法传递。 return fragment; } //创建视图 @Nullable @Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) { //new view View view = inflater.inflate(R.layout.fragment_list,container,false); TextView textView = view.findViewById(R.id.textView);//需要根据根视图view进行findViewById textView.setText(mTitle); textView.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { if(mOnTitleClickListener!=null){ mOnTitleClickListener.onClick(mTitle); } } }); return view; } @Override public void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); if(getArguments() != null){ mTitle = getArguments().getString(BUNDLE_TITLE); } } //设置接口的方法 public void setOnTitleClickListener(OnTitleClickListener onTitleClickListener){ mOnTitleClickListener = onTitleClickListener; } //定义变量 private OnTitleClickListener mOnTitleClickListener; /** * 当title被点击时，将title传递出去 */ //定义接口 public interface OnTitleClickListener{ void onClick(String title); } } 在容器activity_main.xml中为fragment设置可以展示的区域 分别设置了listContainer和detailContainer这两个容器 &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; tools:context=&quot;com.administrator.fragmentdemo.MainActivity&quot;&gt; &lt;TextView android:id=&quot;@+id/textView&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;100dp&quot; android:gravity=&quot;center&quot; android:text=&quot;static load fragment&quot;/&gt; &lt;LinearLayout android:orientation=&quot;horizontal&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;LinearLayout android:id=&quot;@+id/listContainer&quot; android:layout_width=&quot;150dp&quot; android:layout_margin=&quot;1dp&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:id=&quot;@+id/detailContainer&quot; android:layout_width=&quot;200dp&quot; android:layout_margin=&quot;1dp&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt; 装载Fragment的Activity的Java代码 package com.administrator.fragmentdemo; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; public class MainActivity extends AppCompatActivity implements ListFragment.OnTitleClickListener{ @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); //1.container容器 2.fragment 3.fragment--&gt;container把fragment放到容器container中去 //getSupportFragmentManager()获取一个fragment容器，beginTransaction()开启一个事物,add()把fragment放进去(关联进去)。commit()向系统提交 //R.id.listContainer,listContainer是刚才设置的容器id，add里面把容器和fragment关联 //fragment---&gt; activity value fragment往activity里传值 ListFragment listFragment = ListFragment.newInstance(&quot;list&quot;); getSupportFragmentManager() .beginTransaction() .add(R.id.listContainer,listFragment) .commit(); listFragment.setOnTitleClickListener(this); ListFragment detail = new ListFragment().newInstance(&quot;detail&quot;); getSupportFragmentManager() .beginTransaction() .add(R.id.detailContainer,detail) .commit(); detail.setOnTitleClickListener(this); } @Override public void onClick(String title) { setTitle(title); } } 比如说要传一个对象，不能用bundle传的时候 更改ListFragment.java文件 package com.administrator.fragmentdemo; import android.content.Context; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.TextView; /** * 列表fragment */ public class ListFragment extends Fragment { public static final String BUNDLE_TITLE = &quot;bundle_title&quot;; private String mTitle = &quot;mo_ren_zhi&quot;; /** * 构建模拟的User对象 */ private User mUser; public void setUser(User user){ mUser = user; } public class User{ } public static ListFragment newInstance(String title,User user){//添加User参数 ListFragment fragment = new ListFragment(); Bundle bundle = new Bundle();//创建一个bundle对象对数据封装 bundle.putString(BUNDLE_TITLE,title);//put一下，有很多比如char，int等基础数据，比如这里用String(key,Value)，还可以比如putChar(); fragment.setArguments(bundle);//将封装好的bundle数据，通过fragment的setArgument方法传递。 fragment.setUser(user);//设置User对象 return fragment; } //创建视图 @Nullable @Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) { //new view View view = inflater.inflate(R.layout.fragment_list,container,false); TextView textView = view.findViewById(R.id.textView);//需要根据根视图view进行findViewById textView.setText(mTitle); textView.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { if(mOnTitleClickListener!=null){ mOnTitleClickListener.onClick(mTitle); } } }); return view; } @Override public void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); if(getArguments() != null){ mTitle = getArguments().getString(BUNDLE_TITLE); } } //设置接口的方法 public void setOnTitleClickListener(OnTitleClickListener onTitleClickListener){ mOnTitleClickListener = onTitleClickListener; } //定义变量 private OnTitleClickListener mOnTitleClickListener; /** * 当title被点击时，将title传递出去 */ //定义接口 public interface OnTitleClickListener{ void onClick(String title); } }","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"ExpandableListView实现手风琴特效及其点击事件","slug":"ExpandableListView","date":"2017-06-27T01:10:23.000Z","updated":"2018-06-09T06:05:05.032Z","comments":true,"path":"2017/06/27/ExpandableListView/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2017/06/27/ExpandableListView/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 组条目布局 item_elv_group.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;TextView android:id=&quot;@+id/txt_group_data&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:textSize=&quot;28sp&quot; android:text=&quot;学习&quot; android:textColor=&quot;#423f4d&quot;/&gt; &lt;/LinearLayout&gt; 子条目布局 item_elv_child.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;TextView android:id=&quot;@+id/txt_child_data&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:textSize=&quot;20sp&quot; android:text=&quot;Activity生命周期&quot; android:textColor=&quot;#d69842&quot;/&gt; &lt;/LinearLayout&gt; 主布局 activity_main.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;com.administrator.shoufengqindemo.MainActivity&quot;&gt; &lt;ExpandableListView android:id=&quot;@+id/elv_local_data&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:groupIndicator=&quot;@null&quot;&gt; &lt;/ExpandableListView&gt; &lt;/RelativeLayout&gt; 设置groupIndicator属性去掉ExpandableListView 默认的箭头 用到ExpandableListView时有个箭头图标系统自带的在你自定义布局也不能去掉只要设置一个属性即可，如下：settingLists.setGroupIndicator(null); 此处就是设置自定义的箭头图标的。置空则没有了。也可以自定义但是位置还是在那个地方（不推荐）如下： 首先，自定义一个expandablelistviewselector.xml文件： &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;item android:state_expanded=&quot;true&quot; android:drawable=&quot;@drawable/expandablelistviewindicatordown&quot; /&gt; &lt;item android:drawable=&quot;@drawable/expandablelistviewindicator&quot; /&gt; &lt;/selector&gt; &lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt; an&gt;&lt;/span&gt; 在Java中设置 settingLists.setGroupIndicator(this.getResources().getDrawable(R.layout.expandablelistviewselector)); 或xml设置 android:groupIndicator=&quot;@drawable/groupIndicator_selector&quot; 本地数据源 LacalData,java package com.administrator.shoufengqindemo; import java.util.ArrayList; import java.util.List; /** * Created by Administrator on 2018/5/15. */ public class LocalData { /** * 获取列表组数据 * @return */ public static List&lt;String&gt; getGroupData(){ List&lt;String&gt; groups = new ArrayList&lt;String&gt;(); groups.add(&quot;学习&quot;); groups.add(&quot;看书&quot;); return groups; } /** * 获取子条目 * @return */ public static List&lt;List&lt;String&gt;&gt; getChildData(){ List&lt;List&lt;String&gt;&gt; childs = new ArrayList&lt;List&lt;String&gt;&gt;(); List&lt;String&gt; item1 = new ArrayList&lt;String&gt;(); item1.add(&quot;Android属性动画&quot;); item1.add(&quot;Android Activity生命周期&quot;); childs.add(item1); List&lt;String&gt; item2 = new ArrayList&lt;String&gt;(); item2.add(&quot;面向对象&quot;); item2.add(&quot;接口&quot;); item2.add(&quot;集合&quot;); childs.add(item2); return childs; } } 装载数据适配器 LocalAdapter.java package com.administrator.shoufengqindemo; /** * Created by Administrator on 2018/5/15. */ import android.content.Context; import android.view.View; import android.widget.TextView; /* 本地数据适配器 */ class LocalAdapter extends MyBaseAdapter { public LocalAdapter(Context context) { super(context); } @Override public View MyGroupView(int groupPosition, View groupView) { View view = minInflater.inflate(R.layout.item_elv_group, null); TextView txtTitle = (TextView) view.findViewById(R.id.txt_group_data); txtTitle.setText(getGroup(groupPosition)); txtTitle.setPadding(30, 0, 0, 0); return view; } @Override public View MyChildView(int groupPosition, int childPosition, View childView) { View cView = minInflater.inflate(R.layout.item_elv_child, null); TextView txtContent = (TextView) cView.findViewById(R.id.txt_child_data); txtContent.setText(getChild(groupPosition,childPosition)); txtContent.setPadding(30, 0, 0, 0); return cView; } } 视图适配器 MyBaseAdapter.java package com.administrator.shoufengqindemo; import android.content.Context; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.BaseExpandableListAdapter; import java.util.List; /** * Created by Administrator on 2018/5/15. */ public abstract class MyBaseAdapter extends BaseExpandableListAdapter { Context mContext; LayoutInflater minInflater; private List&lt;String&gt; groups; private List&lt;List&lt;String&gt;&gt; childs; public MyBaseAdapter(Context context){ mContext=context; minInflater = LayoutInflater.from(mContext); } public void addNewData(List&lt;String&gt; groups,List&lt;List&lt;String&gt;&gt; childs){ this.groups = groups; this.childs = childs; } /** *获取组的数量 */ @Override public int getGroupCount() { return groups.size(); } /** * 获取组的具体内容 */ @Override public String getGroup(int groupPosition) { return groups.get(groupPosition); } /** * 获取组的id */ @Override public long getGroupId(int groupPosition) { return 0; } /** * 获取组的视图 */ @Override public View getGroupView(int groupPosition, boolean isExpanded, View groupView, ViewGroup parent) { return MyGroupView(groupPosition,groupView); } /** * 获取子条目数量 */ @Override public int getChildrenCount(int groupPosition) { return childs.get(groupPosition).size(); } /** * 获取具体的子条目 */ @Override public String getChild(int groupPosition, int childPosition) { return childs.get(groupPosition).get(childPosition); } /** * 获取子条目的视图 */ @Override public View getChildView(int groupPosition, int childPosition, boolean isLastChild, View convertView, ViewGroup parent) { return MyChildView(groupPosition,childPosition,convertView); } public abstract View MyGroupView(int groupPosition, View grounpView); public abstract View MyChildView(int groupPosition, int childPosition , View childView); /** * 获取子条目的id */ @Override public long getChildId(int groupPosition, int childPosition) { return 0; } @Override public boolean hasStableIds() { return false; } /** * 子集是否可选，true为可选，如子条目需要设置点击事件，则返回值应为true * @param groupPosition * @param childPosition * @return */ @Override public boolean isChildSelectable(int groupPosition, int childPosition) { return true; } } 主调用界面 MainActivity.java package com.administrator.shoufengqindemo; import android.app.Activity; import android.os.Bundle; import android.view.View; import android.widget.ExpandableListView; import android.widget.Toast; public class MainActivity extends Activity { private ExpandableListView mElv; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mElv = (ExpandableListView) this.findViewById(R.id.elv_local_data); //第二种方式获取对象 //MainActivity继承ExpandableListActivity // mElv = this.getExpandableListView(); loadLocal(); /** *设置组的点击事件 */ mElv.setOnGroupClickListener(new ExpandableListView.OnGroupClickListener() { @Override public boolean onGroupClick(ExpandableListView parent, View v, int groupPosition, long id) { Toast.makeText(MainActivity.this,&quot;您点击的是：&quot;+LocalData.getGroupData().get(groupPosition),Toast.LENGTH_SHORT).show(); return false; } }); /** * 设置子条目的点击事件 * 注意，设置子条目点击事件时，应到适配器MyBaseAdapter中观察 * isChildSelectable()方法设置的子集是否可选，可选应返回true */ mElv.setOnChildClickListener(new ExpandableListView.OnChildClickListener() { @Override public boolean onChildClick(ExpandableListView parent, View v, int groupPosition, int childPosition, long id) { Toast.makeText(MainActivity.this, &quot;您点击的是：&quot; + LocalData.getChildData().get(groupPosition).get(childPosition), Toast.LENGTH_SHORT).show(); return false; } }); } /** * 加载本地数据 */ public void loadLocal(){ LocalAdapter adapter = new LocalAdapter(this); //添加数据 adapter.addNewData(LocalData.getGroupData(),LocalData.getChildData()); mElv.setAdapter(adapter); } } 效果如图：","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"Fragment的动态加载","slug":"FragmentDynLoading","date":"2017-06-05T03:10:23.000Z","updated":"2018-06-09T07:43:46.441Z","comments":true,"path":"2017/06/05/FragmentDynLoading/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2017/06/05/FragmentDynLoading/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 xml布局文件 fragment_list.xml （控制fragment里面的内容） &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:background=&quot;#ffff00&quot;&gt; &lt;TextView android:id=&quot;@+id/textView&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_centerInParent=&quot;true&quot; android:text=&quot;TextView&quot; android:textColor=&quot;#000000&quot; android:textSize=&quot;20sp&quot;/&gt; &lt;/RelativeLayout&gt; Fragment的Java代码管理类 package com.administrator.fragmentdemo; import android.content.Context; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.TextView; /** * 列表fragment */ public class ListFragment extends Fragment { //创建视图 @Nullable @Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) { //new view View view = inflater.inflate(R.layout.fragment_list,container,false); TextView textView = view.findViewById(R.id.textView);//需要根据根视图view进行findViewById textView.setText(&quot;hi&quot;); return view; } @Override public void onAttach(Context context) { super.onAttach(context); } @Override public void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); } @Override public void onActivityCreated(@Nullable Bundle savedInstanceState) { super.onActivityCreated(savedInstanceState); } @Override public void onStart() { super.onStart(); } @Override public void onPause() { super.onPause(); } @Override public void onStop() { super.onStop(); } @Override public void onDestroyView() { super.onDestroyView(); } @Override public void onDestroy() { super.onDestroy(); } } 在容器activity_main.xml中为fragment设置可以展示的区域 分别设置了listContainer和detailContainer这两个容器 &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; tools:context=&quot;com.administrator.fragmentdemo.MainActivity&quot;&gt; &lt;LinearLayout android:orientation=&quot;horizontal&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;LinearLayout android:id=&quot;@+id/listContainer&quot; android:layout_width=&quot;150dp&quot; android:layout_margin=&quot;1dp&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:id=&quot;@+id/detailContainer&quot; android:layout_width=&quot;200dp&quot; android:layout_margin=&quot;1dp&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt; 装载Fragment的Activity的Java代码 package com.administrator.fragmentdemo; import android.content.Context; import android.content.Intent; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.Button; public class MainActivity extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); //1.container容器 2.fragment 3.fragment--&gt;container把fragment放到容器container中去 //getSupportFragmentManager()获取一个fragment容器，beginTransaction()开启一个事物,add()把fragment放进去(关联进去)。commit()向系统提交 //R.id.listContainer,listContainer是刚才设置的容器id，add里面把容器和fragment关联 ListFragment fragment = new ListFragment(); getSupportFragmentManager() .beginTransaction() .add(R.id.listContainer,fragment) .commit(); getSupportFragmentManager() .beginTransaction() .add(R.id.detailContainer,new ListFragment()) .commit(); //new ListFragment()新建一个fragment // //移除fragment // getSupportFragmentManager() // .beginTransaction() // .remove(fragment) // .commit(); // //替换fragment // getSupportFragmentManager() // .beginTransaction() // .replace(R.id.listContainer,new ListFragment()) // .commit(); } }","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"AsyncTask异步","slug":"AsyncTask","date":"2017-03-27T01:10:23.000Z","updated":"2018-06-09T06:41:50.529Z","comments":true,"path":"2017/03/27/AsyncTask/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2017/03/27/AsyncTask/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 一、简单理解Demo import android.app.Activity; import android.os.AsyncTask; import android.os.Bundle; public class MainActivity extends Activity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); /* * 运行TestAsyncTask */ new TestAsyncTask().execute(); } private class TestAsyncTask extends AsyncTask{ //一般用于初始化，首先运行 @Override protected void onPreExecute() { // TODO Auto-generated method stub super.onPreExecute(); } //一般处理耗时操作，第二运行,不要在这里面运行与ui控件有关的操作 @Override protected Object doInBackground(Object... params) { return null; } /* * 一般用于处理UI界面变化，最后运行 * result是上面doInBackground返回值 */ @Override protected void onPostExecute(Object result) { // TODO Auto-generated method stub super.onPostExecute(result); } } } 二、实践熟悉Demoactivity_main.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:orientation=&quot;vertical&quot; android:layout_width=&quot;fill_parent&quot; android:layout_height=&quot;fill_parent&quot; &gt; &lt;TextView android:layout_width=&quot;fill_parent&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;Hello , Welcome to Andy&apos;s Blog!&quot;/&gt; &lt;Button android:id=&quot;@+id/download&quot; android:layout_width=&quot;fill_parent&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;Download&quot;/&gt; &lt;TextView android:id=&quot;@+id/tv&quot; android:layout_width=&quot;fill_parent&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;当前进度显示&quot;/&gt; &lt;ProgressBar android:id=&quot;@+id/pb&quot; android:layout_width=&quot;fill_parent&quot; android:layout_height=&quot;wrap_content&quot; style=&quot;?android:attr/progressBarStyleHorizontal&quot;/&gt; &lt;/LinearLayout&gt; MainActivity.java import android.app.Activity; import android.os.AsyncTask; import android.os.Bundle; import android.view.View; import android.widget.Button; import android.widget.ProgressBar; import android.widget.TextView; public class MainActivity extends Activity { Button download; ProgressBar pb; TextView tv; /** Called when the activity is first created. */ @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); pb=(ProgressBar)findViewById(R.id.pb); tv=(TextView)findViewById(R.id.tv); download = (Button)findViewById(R.id.download); download.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { DownloadTask dTask = new DownloadTask(); dTask.execute(100); } }); } class DownloadTask extends AsyncTask&lt;Integer, Integer, String&gt;{ //后面尖括号内分别是参数（例子里是线程休息时间），进度(publishProgress用到)，返回值 类型 @Override protected void onPreExecute() { //第一个执行方法 super.onPreExecute(); } @Override protected String doInBackground(Integer... params) { //第二个执行方法,onPreExecute()执行完后执行 for(int i=0;i&lt;=100;i++){ pb.setProgress(i); publishProgress(i); try { Thread.sleep(params[0]); } catch (InterruptedException e) { e.printStackTrace(); } } return &quot;执行完毕&quot;; } @Override protected void onProgressUpdate(Integer... progress) { //这个函数在doInBackground调用publishProgress时触发，虽然调用时只有一个参数 //但是这里取到的是一个数组,所以要用progesss[0]来取值 //第n个参数就用progress[n]来取值 tv.setText(progress[0]+&quot;%&quot;); super.onProgressUpdate(progress); } @Override protected void onPostExecute(String result) { //doInBackground返回时触发，换句话说，就是doInBackground执行完后触发 //这里的result就是上面doInBackground执行后的返回值，所以这里是&quot;执行完毕&quot; setTitle(result); super.onPostExecute(result); } } } 三、简单学习Demo activity.xml使用系统默认即可， Java学习代码如下 MainActivity.java package com.administrator.asynctaskdemo; import android.os.AsyncTask; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.util.Log; public class MainActivity extends AppCompatActivity { private static final String TAG = &quot;MainActivity&quot;;//键盘在空白处输入logt，AndroidStudio会快速生成这行代码 @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); // new DownloadAsyncTask().execute(&quot;XueXi&quot;,&quot;KanShu&quot;); new DownloadAsyncTask().execute(&quot;XueXi&quot;); } public class DownloadAsyncTask extends AsyncTask&lt;String,Integer,Boolean&gt;{ /** * 在异步任务之前，在主线程中 */ @Override protected void onPreExecute() { super.onPreExecute(); //可操作UI } /** * 在另外一个线程中处理事件 * @param params 入参 * @return 结果 */ @Override protected Boolean doInBackground(String... params) {//String... strings表示长度是可变参数， // 比如外部调用时，doInBackground(&quot;a&quot;）;doInBackground(&quot;a&quot;,&quot;b&quot;）; // doInBackground(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;);等，参数的数量是可变的 for (int i = 0;i&lt;10000;i++){ Log.i(TAG,&quot;doInBackground:&quot;+params[0]); //抛出进度 publishProgress(i); } try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } return true; } @Override protected void onPostExecute(Boolean aBoolean) { super.onPostExecute(aBoolean); //也是在主线程中，执行结果处理 } @Override protected void onProgressUpdate(Integer... values) { super.onProgressUpdate(values); //收到上面抛出的进度，然后处理：也是在UI线程中 } // @Override // protected void onCancelled() { // super.onCancelled(); // } // // @Override // protected void onCancelled(Boolean aBoolean) { // super.onCancelled(aBoolean); // } } } 四、AsyncTask实现异步下载步骤1.网络上请求数据：申请网络权限 读写存储权限2.布局我们的layout3.下载之前我们要做什么？ UI4.下载中我们要做什么？ 数据5.下载后我们要做什么？ UI 在MainManifest.xml中申请网络权限和读写权限 &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt; &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot;/&gt; &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;/&gt; activity_main &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:id=&quot;@+id/activity_main&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:padding=&quot;10dp&quot; android:orientation=&quot;vertical&quot; tools:context=&quot;com.administrator.asynctaskdemo.MainActivity&quot;&gt; &lt;ProgressBar style=&quot;?android:attr/progressBarStyleHorizontal&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;15dp&quot; android:id=&quot;@+id/progressBar&quot;/&gt; &lt;Button android:text=&quot;点击下载&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/button&quot;/&gt; &lt;TextView android:text=&quot;Hello world! imooc.&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/textView&quot;/&gt; &lt;/LinearLayout&gt; MainActivity.java package com.administrator.asynctaskdemo; import android.os.AsyncTask; import android.os.Environment; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.util.Log; import android.view.View; import android.widget.Button; import android.widget.ProgressBar; import android.widget.TextView; import org.w3c.dom.Text; import java.io.File; import java.io.FileOutputStream; import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import java.net.URL; import java.net.URLConnection; /** * 1.网络上请求数据：申请网络权限 读写存储权限 * 2.布局我们的layout * 3.下载之前我们要做什么？ UI * 4.下载中我们要做什么？ 数据 * 5.下载后我们要做什么？ UI */ public class MainActivity extends AppCompatActivity { private static final String TAG = &quot;MainActivity&quot;;//键盘在空白处输入logt，AndroidStudio会快速生成这行代码 public static final String APK_URL = &quot;http://download.sj.qq.com/upload/connAssitantDownload/upload/MobileAssistant_1.apk&quot;; private ProgressBar mProgressBar; private Button mDownloadButton; private TextView mResultTextView; private int INIT_PROGRESSBAR; private String FILE_NAME = &quot;XueXi.apk&quot;; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); //初始化视图 initView(); //设置点击监听 setListener(); //初始化UI数据 setData(); } private void setListener() { mDownloadButton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { //TODO 18/5/10 下载任务 DownloadAsyncTask asyncTask = new DownloadAsyncTask(); asyncTask.execute(APK_URL); } }); } private void setData() { mProgressBar.setProgress(INIT_PROGRESSBAR); mDownloadButton.setText(&quot;点击下载&quot;); mResultTextView.setText(&quot;准备下载&quot;); } /** * 初始化视图 */ private void initView() { mProgressBar = (ProgressBar) findViewById(R.id.progressBar); mDownloadButton = (Button) findViewById(R.id.button); mResultTextView = (TextView) findViewById(R.id.textView); } /** * String 入参 * Integer 进度 * Boolean 返回值 */ public class DownloadAsyncTask extends AsyncTask&lt;String, Integer, Boolean&gt; { String mFilePath; /** * 在异步任务之前，在主线程中 */ @Override protected void onPreExecute() { super.onPreExecute(); //可操作UI 类似淘米，之前的准备工作 mDownloadButton.setText(&quot;下载中&quot;); mResultTextView.setText(&quot;下载中&quot;); mProgressBar.setProgress(INIT_PROGRESSBAR); } /** * 在另外一个线程中处理事件 * * @param params 入参 煮米 * @return 结果 */ @Override protected Boolean doInBackground(String... params) {//String... strings表示长度是可变参数， if(params != null&amp;¶ms.length&gt;0){ String apkUrl = params[0]; try { //构造URL URL url = new URL(apkUrl); //构造连接，并打开 URLConnection urlConnection = url.openConnection(); InputStream inputStream =urlConnection.getInputStream(); //获取下载内容的总长度 int contentlength = urlConnection.getContentLength(); //下载地址准备 mFilePath = Environment.getExternalStorageDirectory() // File.separator是字符串/ + File.separator + FILE_NAME; //对下载地址进行处理 File apkFile = new File(mFilePath); if(apkFile.exists()){ boolean result = apkFile.delete(); if(!result){ //如果失败了 return false; } } //已下载的大小 已下载大小/总长度*100等于下载进度 int downloadSize = 0; //byte数组 byte[] bytes = new byte[1024]; int length; //创建一个输入管道 OutputStream outputStream = new FileOutputStream(mFilePath); length = inputStream.read(bytes); //不断的一车一车挖土，直到挖不倒为止 while ((length = inputStream.read(bytes))!= -1){ //挖到的放到我们的文件管道里 outputStream.write(bytes,0,length); //累加我们的大小 downloadSize += length; //发送进度 publishProgress(downloadSize*100/contentlength); } inputStream.close(); outputStream.close(); } catch (IOException e) { e.printStackTrace(); return false; } }else{ return false; } return true; } @Override protected void onPostExecute(Boolean result) { super.onPostExecute(result); //也是在主线程中，执行结果处理 mDownloadButton.setText(result?&quot;下载完成&quot;+ mFilePath:&quot;下载失败&quot;); mResultTextView.setText(result?&quot;下载完成&quot;+ mFilePath:&quot;下载失败&quot;); } @Override protected void onProgressUpdate(Integer... values) { super.onProgressUpdate(values); //收到进度，然后处理：也是在UI线程中 if(values!=null&amp;&amp;values.length&gt;0){} mProgressBar.setProgress(values[0]); } } } 五、封装成工具类 xml布局如上不变 创建下载工具类 DownloadHelper.java package com.administrator.asynctaskdemo; import android.os.AsyncTask; import java.io.File; import java.io.FileOutputStream; import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import java.net.URL; import java.net.URLConnection; /** * 1.download方法 url localPath listener * 2.listener :start success fail progress * 3.用asynctask封装 * Created by Administrator on 2018/5/10. */ public class DownloadHelper { public static void download(String url,String localPath,OnDownloadListener listener) { DownloadAsyncTask task = new DownloadAsyncTask(url,localPath,listener); task.execute(); } /** * String 入参 * Integer 进度 * Boolean 返回值 */ public static class DownloadAsyncTask extends AsyncTask&lt;String, Integer, Boolean&gt; { String mUrl; String mFilePath; OnDownloadListener mListener; public DownloadAsyncTask(String mUrl, String mFilePath, OnDownloadListener mListener) { this.mUrl = mUrl; this.mFilePath = mFilePath; this.mListener = mListener; } /** * 在异步任务之前，在主线程中 */ @Override protected void onPreExecute() { super.onPreExecute(); //可操作UI 类似淘米，之前的准备工作 if(mListener != null){ mListener.onStart(); } } /** * 在另外一个线程中处理事件 * * @param params 入参 煮米 * @return 结果 */ @Override protected Boolean doInBackground(String... params) {//String... strings表示长度是可变参数， String apkUrl = mUrl; try { //构造URL URL url = new URL(apkUrl); //构造连接，并打开 URLConnection urlConnection = url.openConnection(); InputStream inputStream =urlConnection.getInputStream(); //获取下载内容的总长度 int contentlength = urlConnection.getContentLength(); //对下载地址进行处理 File apkFile = new File(mFilePath); if(apkFile.exists()){ boolean result = apkFile.delete(); if(!result){ //如果失败了 if(mListener != null){ mListener.onFail(-1,apkFile,&quot;文件删除失败&quot;); } return false; } } //已下载的大小 已下载大小/总长度*100等于下载进度 int downloadSize = 0; //byte数组 byte[] bytes = new byte[1024]; int length; //创建一个输入管道 OutputStream outputStream = new FileOutputStream(mFilePath); length = inputStream.read(bytes); //不断的一车一车挖土，直到挖不倒为止 while ((length = inputStream.read(bytes))!= -1){ //挖到的放到我们的文件管道里 outputStream.write(bytes,0,length); //累加我们的大小 downloadSize += length; //发送进度 publishProgress(downloadSize*100/contentlength); } inputStream.close(); outputStream.close(); } catch (IOException e) { e.printStackTrace(); if(mListener != null){ mListener.onFail(-2,new File(mFilePath),e.getMessage()); } return false; } if(mListener != null){ mListener.onSuccess(0,new File(mFilePath)); } return true; } @Override protected void onPostExecute(Boolean result) { super.onPostExecute(result); //也是在主线程中，执行结果处理 if (mListener != null){ if(result){ mListener.onSuccess(0,new File(mFilePath)); }else { mListener.onFail(-1,new File(mFilePath),&quot;下载失败&quot;); } } } @Override protected void onProgressUpdate(Integer... values) { super.onProgressUpdate(values); //收到进度，然后处理：也是在UI线程中 if(values!=null&amp;&amp;values.length&gt;0){ if(mListener != null){ mListener.onProgress(values[0]); } } } } public interface OnDownloadListener{ void onStart(); void onSuccess(int code,File file); void onFail(int code,File file,String message); void onProgress(int progress); /** * 如果加写下面这个子类实现了OnDownloadListener的抽象方法，则外部创建该接口时，如通过 * new DownloadHelper.OnDownloadListener.SimpleDownloadListener()调用该方法时， * 不需要每次都重写已在SimpleDownloadListener类中实现的onStart()和onProgress()这两个方法 */ abstract class SimpleDownloadListener implements OnDownloadListener{ @Override public void onStart() { } @Override public void onProgress(int progress) { } } } } 外部调用 MainActivity.java package com.administrator.asynctaskdemo; import android.os.AsyncTask; import android.os.Environment; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.util.Log; import android.view.View; import android.widget.Button; import android.widget.ProgressBar; import android.widget.TextView; import org.w3c.dom.Text; import java.io.File; import java.io.FileOutputStream; import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import java.net.URL; import java.net.URLConnection; import java.time.LocalDate; /** * 1.网络上请求数据：申请网络权限 读写存储权限 * 2.布局我们的layout * 3.下载之前我们要做什么？ UI * 4.下载中我们要做什么？ 数据 * 5.下载后我们要做什么？ UI */ public class MainActivity extends AppCompatActivity { private static final String TAG = &quot;MainActivity&quot;;//键盘在空白处输入logt，AndroidStudio会快速生成这行代码 public static final String APK_URL = &quot;http://download.sj.qq.com/upload/connAssitantDownload/upload/MobileAssistant_1.apk&quot;; private ProgressBar mProgressBar; private Button mDownloadButton; private TextView mResultTextView; private int INIT_PROGRESSBAR; private String FILE_NAME = &quot;XueXi.apk&quot;; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); //初始化视图 initView(); //设置点击监听 setListener(); //初始化UI数据 setData(); } private void setListener() { mDownloadButton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { //TODO 18/5/10 下载任务 DownloadHelper.download(APK_URL,&quot; &quot;, new DownloadHelper.OnDownloadListener.SimpleDownloadListener() { @Override public void onSuccess(int code, File file) { Log.e(&quot;TAG&quot;,String.valueOf(code)); } @Override public void onFail(int code, File file, String message) { Log.e(&quot;TAG&quot;,String.valueOf(code)); Log.e(&quot;TAG&quot;,message); } }); } }); } private void setData() { mProgressBar.setProgress(INIT_PROGRESSBAR); mDownloadButton.setText(&quot;点击下载&quot;); mResultTextView.setText(&quot;准备下载&quot;); } /** * 初始化视图 */ private void initView() { mProgressBar = (ProgressBar) findViewById(R.id.progressBar); mDownloadButton = (Button) findViewById(R.id.button); mResultTextView = (TextView) findViewById(R.id.textView); } }","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"Android新特性ConstraintLayout约束布局读书笔记","slug":"ConstraintLayout","date":"2017-03-27T01:10:23.000Z","updated":"2018-06-09T08:46:59.664Z","comments":true,"path":"2017/03/27/ConstraintLayout/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2017/03/27/ConstraintLayout/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 转帖请注明本文出自weimeig的博客（https://blog.csdn.net/weimeig/article/details/79706819），请尊重他人的辛勤劳动成果，谢谢 本来打算自己写一篇，看到郭霖大神已经写了，不打算重复造轮子，决定参考郭神的文章下，写一篇学习ConstraintLayout约束布局的读书笔记。同时感谢《第一行代码》作者郭霖大神的无私分享。 首先说一下什么是约束布局 在2016年的Google I/O大会上 , Google 发布了Android Studio 2.2预览版，同时也发布了Android 新的布局方案 ConstraintLayout ， 但是最近的一年也没有大规模的使用。2017年Google发布了 Android Studio 2.3 正式版，在 Android Studio 2.3 版本中新建的Module中默认的布局就是 ConstraintLayout 。如下所示： &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;android.support.constraint.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;com.constraintlayout.app.Main2Activity&quot;&gt; &lt;/android.support.constraint.ConstraintLayout&gt; 下面我们开始用边学边练的方式来进行学习，首先打开你的Android Studio，并新建一个ConstraintLayoutTest项目。另外，确保你的Android Studio是2.2或以上版本。 dependencies { compile &apos;com.android.support.constraint:constraint-layout:1.0.0-beta4&apos; } 现在打开res/layout/activity_main.xml文件，由于这是一个新建的空项目，Android Studio会自动帮我们创建好一个布局，如下图所示。 不过，Android Studio自动创建的这个布局默认使用的是RelativeLayout，我们可以通过如下操作将它转换成ConstraintLayout。 转换完成之后，原RelativeLayout中的内容也会自动转换到ConstraintLayout中，比如图中的TextView。如果你不需要它的话，可以选中这个控件，然后按键盘上的Delete键即可删除 我们可以看到，现在主操作区域内有两个类似于手机屏幕的界面，左边的是预览界面，右边的是蓝图界面。这两部分都可以用于进行布局编辑工作，区别是左边部分主要用于预览最终的界面效果，右边部分主要用于观察界面内各个控件的约束情况。 基本操作下面我们来学习一些具体的操作吧，ConstraintLayout的基本用法很简单，比如我们想要向布局中添加一个按钮，那么只需要从左侧的Palette区域拖一个Button进去就可以了，如下图所示。 虽说现在Button已经添加到界面上了，但是由于我们还没有给Button添加任何的约束，因此Button并不知道自己应该出现在什么位置。现在我们在预览界面上看到的Button位置并不是它最终运行后的实际位置，如果一个控件没有添加任何约束的话，它在运行之后会自动位于界面的左上角。 那么下面我们就来给Button添加约束，每个控件的约束都分为垂直和水平两类，一共可以在四个方向上给控件添加约束，如下图所示。 上图中Button的上下左右各有一个圆圈，这圆圈就是用来添加约束的，我们可以将约束添加到ConstraintLayout，也可以将约束添加到另一个控件。比如说，想让Button位于布局的右下角，就可以这样添加约束，如下图所示。 我们给Button的右边和下边添加了约束，因此Button就会将自己定位到布局的右下角了。类似地，如果我们想要让Button居中显示，那么就需要给它的上下左右都添加约束，如下图所示。 这就是添加约束最基本的用法了。 除此之外，我们还可以使用约束让一个控件相对于另一个控件进行定位。比如说，我们希望再添加一个Button，让它位于第一个Button的正下方，并且间距64dp，那么操作如下所示。 现在添加约束的方式我们已经学完了，那么该怎样删除约束呢？其实也很简单，删除约束的方式一共有三种，第一种用于删除一个单独的约束，将鼠标悬浮在某个约束的圆圈上，然后该圆圈会变成红色，这个时候单击一下就能删除了，如下图所示。 第二种用于删除某一个控件的所有约束，选中一个控件，然后它的左下角会出现一个删除约束的图标，点击该图标就能删除当前控件的所有约束了，如下所示。 第三种用于删除当前界面中的所有约束，点击工具栏中的删除约束图标即可，如下图所示。 Inspector这样我们就把ConstraintLayout的基本用法学完了，接下来我们开始学习一些进阶的内容。 当你选中任意一个控件的时候，在右侧的Properties区域就会出现很多的属性选项，如下图所示。 在这里我们就可以设置当前控件的所有属性，如文本内容、颜色、点击事件等等。这些功能都非常简单，我就不再进行详细介绍，大家自己点一点就会操作了。 需要我们重点掌握的是Properties区域的上半部分，这部分也被称为Inspector。 首先可以看到，在Inspector中有一个纵向的轴和一个横向的轴，这两个轴也是用于确定控件的位置的。我们刚才给Button的上下左右各添加了一个约束，然后Button就能居中显示了，其实就是因为这里纵横轴的值都是50。如果调整了纵横轴的比例，那么Button的位置也会随之改变，如下图所示。 不过，虽然我们将横轴的值拖动到了100，但是Button并没有紧贴到布局的最右侧，这是为什么呢？实际上，Android Studio给控件的每个方向上的约束都默认添加了一个16dp的间距，从Inspector上面也可以明显地看出来这些间距的值。如果这些默认值并不是你想要的，可以直接在Inspector上进行修改，如下图所示： 可以看到，修改成0之后Button右侧的间距就没了。 接下来我们再来学习一下位于Inspector最中间的那个正方形区域，它是用来控制控件大小的。一共有三种模式可选，每种模式都使用了一种不同的符号表示，点击符号即可进行切换。 表示wrap content，这个我们很熟悉了，不需要进行什么解释。 表示固定值，也就是给控件指定了一个固定的长度或者宽度值。 表示any size，它有点类似于match parent，但和match parent并不一样，是属于ConstraintLayout中特有的一种大小控制方式，下面我们来重点讲解一下。 首先需要说明，在ConstraintLayout中是有match parent的，只不过用的比较少，因为ConstraintLayout的一大特点就是为了解决布局嵌套，既然没有了布局嵌套，那么match parent也就没有多大意义了。 而any size就是用于在ConstraintLayout中顶替match parent的，先看一下我们怎样使用any size实现和match parent同样的效果吧。比如说我想让Button的宽度充满整个布局，操作如下图所示。 可以看到，我们将Button的宽度指定成any size，它就会自动充满整个布局了。当然还要记得将Button左侧的间距设置成0才行。 那有的朋友可能会问了，这和match parent有什么区别呢？其实最大的区别在于，match parent是用于填充满当前控件的父布局，而any size是用于填充满当前控件的约束规则。举个例子更好理解，如果我们有一个新的Button，它的其中一个约束是添加到当前这个Button上的，那么any size的效果也会发生改变，如下图所示。 通过上图的演示，相信你已经很好地理解any size的作用了。 Guidelines现在你已经对ConstraintLayout比较熟悉，并且能使用ConstraintLayout来编写一些简单的界面了。不过目前有一个问题可能还比较头疼，刚才我们已经实现了让一个按钮居中对齐的功能，如果我们想让两个按钮共同居中对齐该怎么实现呢？ 其实这个需求很常见，比如说在应用的登录界面，都会有一个登录按钮和一个注册按钮，不管它们是水平居中也好还是垂直居中也好，但肯定都是两个按钮共同居中的。 想要实现这个功能，仅仅用我们刚刚学的那些知识是不够的，这需要用到ConstraintLayout中的一个新的功能，Guidelines。 下面我们还是通过实际操作来学习一下Guidelines的用法吧。比如现在已经向界面中添加了登录和注册这两个按钮，如下图所示。 然后我们希望让这两个按钮在水平方向上居中显示，在垂直方向上都距离底部64dp，那么就需要先添加一个垂直方向上的Guideline，如下图所示。 我来对上图中的操作进行一下解释。首先点击通知栏中的Guidelines图标可以添加一个垂直或水平方向上的Guideline，这里我们需要的是垂直方向上的。而Guideline默认是使用的dp尺，我们需要选中Guideline，并点击一下最上面的箭头图标将它改成百分比尺，然后将垂直方向上的Guideline调整到50%的位置，这样就将准备工作做好了。 接下来我们开始实现让两个按钮在水平方向上居中显示，并距离底部64dp的功能，如下图所示。 可以看到，我们给登录按钮的右边向Guideline添加约束，登录按钮的下面向底部添加约束，并拖动按钮让它距离底部64dp。然后给注册按钮的左边向Guideline添加约束，注册按钮的下面向登录按钮的下面添加约束。这样就实现了让两个按钮在水平方向上居中显示，在垂直方向上都距离底部64dp的功能了。 自动添加约束不过如果界面中的内容变得复杂起来，给每个控件一个个地添加约束也是一件很繁琐的事情。为此，ConstraintLayout中支持自动添加约束的功能，可以极大程度上简化那些繁琐的操作。 自动添加约束的方式主要有两种，一种叫Autoconnect，一种叫Inference，我们先来看第一种。 想要使用Autoconnect，首先需要在工具栏中将这个功能启用，默认情况下Autoconnect是不启用的，如下图所示。 Autoconnect可以根据我们拖放控件的状态自动判断应该如何添加约束，比如我们将Button放到界面的正中央，那么它的上下左右都会自动地添加上约束，如下图所示。 然后我们在这个Button的下方再放置一个Button，效果如下。 可以看到，只需要将Button拖放到界面上，Autoconnect会判断我们的意图，并自动给控件添加约束。不过Autoconnect是无法保证百分百准确判断出我们的意图的，如果自动添加的约束并不是你想要的话，还可以在任何时候进行手动修改。总之，可以把它当成一个辅助工具，但不能完全靠它去添加控件的约束。 以上是Autoconnect的用法，接下来我们看一下Inference的用法。Inference也是用于自动添加约束的，但它比Autoconnect的功能要更为强大，因为AutoConnect只能给当前操作的控件自动添加约束，而Inference会给当前界面中的所有元素自动添加约束。因而Inference比较适合用来实现复杂度比较高的界面，它可以一键自动生成所有的约束。 下面我们就通过一个例子来演示一下Inference的用法，比如界面上现在有两个TextView，两个EditText，和两个Button，如下图所示。 接下来我们先将各个控件按照界面设计的位置进行摆放，摆放完成之后点击一下工具栏上的Infer Constraints按钮，就能为所有控件自动添加约束了，如下图所示。 现在运行一下程序，最终效果如下图所示： ConstraintLayout约束布局的常用方法layout_constraintTop_toTopOf // 将所需视图的顶部与另一个视图的顶部对齐。 layout_constraintTop_toBottomOf // 将所需视图的顶部与另一个视图的底部对齐。 layout_constraintBottom_toTopOf // 将所需视图的底部与另一个视图的顶部对齐。 layout_constraintBottom_toBottomOf // 将所需视图的底部与另一个视图的底部对齐。 layout_constraintLeft_toTopOf // 将所需视图的左侧与另一个视图的顶部对齐。 layout_constraintLeft_toBottomOf // 将所需视图的左侧与另一个视图的底部对齐。 layout_constraintLeft_toLeftOf // 将所需视图的左边与另一个视图的左边对齐。 layout_constraintLeft_toRightOf // 将所需视图的左边与另一个视图的右边对齐。 layout_constraintRight_toTopOf // 将所需视图的右对齐到另一个视图的顶部。 layout_constraintRight_toBottomOf // 将所需视图的右对齐到另一个的底部。 layout_constraintRight_toLeftOf // 将所需视图的右边与另一个视图的左边对齐。 layout_constraintRight_toRightOf // 将所需视图的右边与另一个视图的右边对齐。 当控件刚拖进布局时候，有如下两行代码。通常是没有添加约束的后果，添加约束熟悉后，可以考虑删除以下意义不大的两条 tools:layout_editor_absoluteX=&quot;8dp&quot; tools:layout_editor_absoluteY=&quot;8dp&quot; 我们来看一下以下代码 我们会问，为什么Button 是居中显示的？因为在上面的布局中有两个重要的属性没有写出来，但是却有默认的属性值，那就是水平、垂直的偏移比例。 我们通过设置偏移量，可以控制控件的偏移位置 使用ConstraintLayout约束布局可以有效减少布局的嵌套层数，如下（观看效果请切换至横屏）： &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;android.support.constraint.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:layout_editor_absoluteY=&quot;81dp&quot; tools:layout_editor_absoluteX=&quot;0dp&quot;&gt; &lt;android.support.constraint.Guideline android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/guideline2&quot; android:orientation=&quot;horizontal&quot; app:layout_constraintGuide_percent=&quot;0.67&quot; /&gt; &lt;android.support.constraint.Guideline android:id=&quot;@+id/guideline3&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;horizontal&quot; app:layout_constraintGuide_percent=&quot;0.34&quot; /&gt; &lt;android.support.constraint.Guideline android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/guideline4&quot; android:orientation=&quot;vertical&quot; app:layout_constraintGuide_percent=&quot;0.75&quot; /&gt; &lt;android.support.constraint.Guideline android:id=&quot;@+id/guideline5&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;vertical&quot; app:layout_constraintGuide_percent=&quot;0.58&quot; /&gt; &lt;android.support.constraint.Guideline android:id=&quot;@+id/guideline7&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;vertical&quot; app:layout_constraintGuide_percent=&quot;0.41&quot; /&gt; &lt;android.support.constraint.Guideline android:id=&quot;@+id/guideline6&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;vertical&quot; app:layout_constraintGuide_percent=&quot;0.25&quot; /&gt; &lt;ImageView android:id=&quot;@+id/imageView&quot; android:layout_width=&quot;0dp&quot; android:layout_height=&quot;0dp&quot; android:layout_marginTop=&quot;2dp&quot; app:srcCompat=&quot;@color/colorAccent&quot; android:layout_marginRight=&quot;2dp&quot; android:layout_marginLeft=&quot;2dp&quot; android:layout_marginBottom=&quot;2dp&quot; app:layout_constraintHorizontal_bias=&quot;0.0&quot; app:layout_constraintVertical_bias=&quot;0.0&quot; app:layout_constraintTop_toTopOf=&quot;parent&quot; app:layout_constraintBottom_toTopOf=&quot;@+id/imageView6&quot; app:layout_constraintLeft_toRightOf=&quot;@+id/imageView2&quot; app:layout_constraintRight_toLeftOf=&quot;@+id/imageView10&quot; /&gt; &lt;ImageView android:id=&quot;@+id/imageView10&quot; android:layout_width=&quot;0dp&quot; android:layout_height=&quot;0dp&quot; android:layout_marginBottom=&quot;2dp&quot; android:layout_marginLeft=&quot;0dp&quot; android:layout_marginRight=&quot;2dp&quot; android:layout_marginTop=&quot;2dp&quot; app:layout_constraintBottom_toTopOf=&quot;@+id/guideline3&quot; app:layout_constraintHorizontal_bias=&quot;0.0&quot; app:layout_constraintLeft_toLeftOf=&quot;@+id/guideline4&quot; app:layout_constraintRight_toRightOf=&quot;parent&quot; app:layout_constraintTop_toTopOf=&quot;parent&quot; app:layout_constraintVertical_bias=&quot;0.0&quot; app:srcCompat=&quot;@color/colorAccent&quot; /&gt; &lt;ImageView android:id=&quot;@+id/imageView9&quot; android:layout_width=&quot;0dp&quot; android:layout_height=&quot;0dp&quot; android:layout_marginBottom=&quot;2dp&quot; android:layout_marginLeft=&quot;0dp&quot; android:layout_marginRight=&quot;2dp&quot; android:layout_marginTop=&quot;2dp&quot; app:layout_constraintBottom_toTopOf=&quot;@+id/imageView8&quot; app:layout_constraintHorizontal_bias=&quot;0.0&quot; app:layout_constraintLeft_toLeftOf=&quot;@+id/guideline4&quot; app:layout_constraintRight_toRightOf=&quot;parent&quot; app:layout_constraintTop_toTopOf=&quot;@+id/guideline3&quot; app:layout_constraintVertical_bias=&quot;0.0&quot; app:srcCompat=&quot;@color/colorAccent&quot; /&gt; &lt;ImageView android:id=&quot;@+id/imageView8&quot; android:layout_width=&quot;0dp&quot; android:layout_height=&quot;0dp&quot; android:layout_marginBottom=&quot;2dp&quot; android:layout_marginLeft=&quot;0dp&quot; android:layout_marginRight=&quot;2dp&quot; android:layout_marginTop=&quot;2dp&quot; app:layout_constraintBottom_toBottomOf=&quot;parent&quot; app:layout_constraintHorizontal_bias=&quot;0.0&quot; app:layout_constraintLeft_toLeftOf=&quot;@+id/guideline4&quot; app:layout_constraintRight_toRightOf=&quot;parent&quot; app:layout_constraintTop_toBottomOf=&quot;@+id/imageView3&quot; app:layout_constraintVertical_bias=&quot;0.0&quot; app:srcCompat=&quot;@color/colorAccent&quot; /&gt; &lt;ImageView android:id=&quot;@+id/imageView7&quot; android:layout_width=&quot;0dp&quot; android:layout_height=&quot;0dp&quot; android:layout_marginBottom=&quot;2dp&quot; android:layout_marginLeft=&quot;2dp&quot; android:layout_marginRight=&quot;2dp&quot; android:layout_marginTop=&quot;2dp&quot; app:layout_constraintBottom_toBottomOf=&quot;parent&quot; app:layout_constraintHorizontal_bias=&quot;0.0&quot; app:layout_constraintLeft_toRightOf=&quot;@+id/imageView6&quot; app:layout_constraintRight_toLeftOf=&quot;@+id/guideline4&quot; app:layout_constraintTop_toBottomOf=&quot;@+id/imageView3&quot; app:layout_constraintVertical_bias=&quot;0.0&quot; app:srcCompat=&quot;@color/colorAccent&quot; /&gt; &lt;ImageView android:id=&quot;@+id/imageView6&quot; android:layout_width=&quot;0dp&quot; android:layout_height=&quot;0dp&quot; android:layout_marginBottom=&quot;2dp&quot; android:layout_marginLeft=&quot;2dp&quot; android:layout_marginRight=&quot;2dp&quot; android:layout_marginTop=&quot;2dp&quot; app:layout_constraintBottom_toBottomOf=&quot;parent&quot; app:layout_constraintHorizontal_bias=&quot;0.0&quot; app:layout_constraintLeft_toLeftOf=&quot;@+id/guideline7&quot; app:layout_constraintRight_toLeftOf=&quot;@+id/guideline5&quot; app:layout_constraintTop_toBottomOf=&quot;@+id/imageView3&quot; app:layout_constraintVertical_bias=&quot;0.0&quot; app:srcCompat=&quot;@color/colorAccent&quot; /&gt; &lt;ImageView android:id=&quot;@+id/imageView5&quot; android:layout_width=&quot;0dp&quot; android:layout_height=&quot;0dp&quot; android:layout_marginBottom=&quot;2dp&quot; android:layout_marginLeft=&quot;2dp&quot; android:layout_marginRight=&quot;2dp&quot; android:layout_marginTop=&quot;2dp&quot; app:layout_constraintBottom_toBottomOf=&quot;parent&quot; app:layout_constraintHorizontal_bias=&quot;0.0&quot; app:layout_constraintLeft_toRightOf=&quot;@+id/imageView4&quot; app:layout_constraintRight_toLeftOf=&quot;@+id/guideline7&quot; app:layout_constraintTop_toBottomOf=&quot;@+id/imageView3&quot; app:layout_constraintVertical_bias=&quot;0.0&quot; app:srcCompat=&quot;@color/colorAccent&quot; /&gt; &lt;ImageView android:id=&quot;@+id/imageView4&quot; android:layout_width=&quot;0dp&quot; android:layout_height=&quot;0dp&quot; android:layout_marginBottom=&quot;2dp&quot; android:layout_marginLeft=&quot;2dp&quot; android:layout_marginRight=&quot;0dp&quot; android:layout_marginTop=&quot;2dp&quot; app:layout_constraintBottom_toBottomOf=&quot;parent&quot; app:layout_constraintHorizontal_bias=&quot;0.0&quot; app:layout_constraintLeft_toLeftOf=&quot;parent&quot; app:layout_constraintRight_toLeftOf=&quot;@+id/guideline6&quot; app:layout_constraintTop_toBottomOf=&quot;@+id/imageView3&quot; app:layout_constraintVertical_bias=&quot;0.0&quot; app:srcCompat=&quot;@color/colorAccent&quot; /&gt; &lt;ImageView android:id=&quot;@+id/imageView3&quot; android:layout_width=&quot;0dp&quot; android:layout_height=&quot;0dp&quot; android:layout_marginBottom=&quot;2dp&quot; android:layout_marginLeft=&quot;2dp&quot; android:layout_marginRight=&quot;0dp&quot; android:layout_marginTop=&quot;2dp&quot; app:layout_constraintBottom_toTopOf=&quot;@+id/guideline2&quot; app:layout_constraintHorizontal_bias=&quot;0.0&quot; app:layout_constraintLeft_toLeftOf=&quot;parent&quot; app:layout_constraintRight_toLeftOf=&quot;@+id/guideline6&quot; app:layout_constraintTop_toBottomOf=&quot;@+id/imageView2&quot; app:layout_constraintVertical_bias=&quot;0.0&quot; app:srcCompat=&quot;@color/colorAccent&quot; /&gt; &lt;ImageView android:id=&quot;@+id/imageView2&quot; android:layout_width=&quot;0dp&quot; android:layout_height=&quot;0dp&quot; android:layout_marginBottom=&quot;2dp&quot; android:layout_marginLeft=&quot;2dp&quot; android:layout_marginRight=&quot;0dp&quot; android:layout_marginTop=&quot;2dp&quot; app:layout_constraintBottom_toTopOf=&quot;@+id/guideline3&quot; app:layout_constraintLeft_toLeftOf=&quot;parent&quot; app:layout_constraintRight_toLeftOf=&quot;@+id/guideline6&quot; app:layout_constraintTop_toTopOf=&quot;parent&quot; app:srcCompat=&quot;@color/colorAccent&quot; /&gt; &lt;/android.support.constraint.ConstraintLayout&gt; &lt;!--app:layout_constraintHorizontal_bias 水平偏移量，取值0~1 ,默认0.5 app:layout_constraintVertical_bias 竖直偏移量 app:layout_contraint本源_to目标=&quot;目标id&quot; --&gt; 运行效果如下：","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"CardView实现列表效果（含圆角阴影等效果）","slug":"CardView","date":"2017-03-16T01:39:23.000Z","updated":"2018-06-09T06:19:30.751Z","comments":true,"path":"2017/03/16/CardView/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2017/03/16/CardView/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 一、添加依赖 dependencies { compile &apos;com.android.support:cardview-v7:26.1.0&apos; } 不会添加依赖或添加依赖出现错误，请见这篇文章 https://blog.csdn.net/weimeig/article/details/80244059 二、简单效果实现 1、 cardElevation:设置阴影的大小 2、 cardBackgroundColor:卡片布局的背景颜色 3、 cardCornerRadius：卡片布局的圆角的大小 4、 conentPadding：卡片布局和内容之间的距离 5、android:clickable=”true” 6、android:foreground=”?android:attr/selectableItemBackground”设置点击的水波纹效果 7、cardUseCompatPadding:是否设置内边距 CardView简单效果 代码如下： &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;android.support.constraint.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;com.administrator.cardvieweaxmple.MainActivity&quot;&gt; &lt;android.support.v7.widget.CardView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; app:cardBackgroundColor=&quot;@null&quot; app:cardCornerRadius=&quot;10dp&quot; app:cardElevation=&quot;20dp&quot; app:cardUseCompatPadding=&quot;true&quot;&gt; &lt;ImageView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:src=&quot;@mipmap/ic_launcher&quot;/&gt; &lt;/android.support.v7.widget.CardView&gt; &lt;/android.support.constraint.ConstraintLayout&gt;","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"【ViewPager学习3】Fragment配合ViewPager","slug":"ViewPagerThree","date":"2017-03-13T02:10:23.000Z","updated":"2018-06-09T05:44:27.059Z","comments":true,"path":"2017/03/13/ViewPagerThree/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2017/03/13/ViewPagerThree/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 一、Fragment配合ViewPagerfragment_test.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;TextView android:id=&quot;@+id/text_view&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:textSize=&quot;36sp&quot; android:text=&quot;@string/app_name&quot; android:layout_centerInParent=&quot;true&quot; android:gravity=&quot;center&quot;/&gt; &lt;/RelativeLayout&gt; activity_tab_viewpager.xml package com.administrator.viewpagerproject; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.support.v4.app.FragmentPagerAdapter; import android.support.v4.view.ViewPager; import android.support.v7.app.AppCompatActivity; /** * Created by Administrator on 2018/5/17. */ public class TabViewPagerActivity extends AppCompatActivity{ private ViewPager mViewPager; @Override protected void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_tab_viewpager); mViewPager = findViewById(R.id.viewpager); mViewPager.setAdapter(new FragmentPagerAdapter(getSupportFragmentManager()) { @Override public Fragment getItem(int position) { return TestFragment.newInstance(position); } @Override public int getCount() { return 4; } }); } } TestFragment.java package com.administrator.viewpagerproject; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.TextView; import android.widget.Toast; import org.w3c.dom.Text; /** * Created by Administrator on 2018/5/17. */ public class TestFragment extends Fragment { private String mPosition; private static final String POSITION = &quot;position&quot;; public static TestFragment newInstance(int position){ TestFragment fragment = new TestFragment(); Bundle bundle = new Bundle(); bundle.putInt(POSITION,position); fragment.setArguments(bundle); return fragment; } @Override public void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); if (getArguments()!= null){ mPosition = String.valueOf(getArguments().getInt(POSITION)); } } @Nullable @Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) { View view = inflater.inflate(R.layout.fragment_test,null); TextView textView = (TextView) view.findViewById(R.id.text_view); textView.setText(mPosition); return view; } } TabViewPagerActivity.java package com.administrator.viewpagerproject; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.TextView; import android.widget.Toast; import org.w3c.dom.Text; /** * Created by Administrator on 2018/5/17. */ public class TestFragment extends Fragment { private String mPosition; private static final String POSITION = &quot;position&quot;; public static TestFragment newInstance(int position){ TestFragment fragment = new TestFragment(); Bundle bundle = new Bundle(); bundle.putInt(POSITION,position); fragment.setArguments(bundle); return fragment; } @Override public void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); if (getArguments()!= null){ mPosition = String.valueOf(getArguments().getInt(POSITION)); } } @Nullable @Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) { View view = inflater.inflate(R.layout.fragment_test,null); TextView textView = (TextView) view.findViewById(R.id.text_view); textView.setText(mPosition); return view; } } 二、ViewPager+Fragment实现滑动控制底部Tab标签，点击标签控制ViewPager滑动 图片资源文件请下载底部Demo获取。 drawable文件夹下添加三个文件 main_tab_icon_home.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;item android:state_pressed=&quot;true&quot; android:drawable=&quot;@mipmap/tabbar_home_pressed&quot; /&gt; &lt;item android:state_selected=&quot;true&quot; android:drawable=&quot;@mipmap/tabbar_home_pressed&quot; /&gt; &lt;item android:drawable=&quot;@mipmap/tabbar_home&quot; /&gt; &lt;/selector&gt; main_tab_icon_me.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;item android:state_selected=&quot;true&quot; android:drawable=&quot;@mipmap/tabbar_my_pressed&quot;/&gt; &lt;item android:state_pressed=&quot;true&quot; android:drawable=&quot;@mipmap/tabbar_my_pressed&quot;/&gt; &lt;item android:drawable=&quot;@mipmap/tabbar_my&quot;/&gt; &lt;/selector&gt; main_tab_icon_message.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;item android:state_selected=&quot;true&quot; android:drawable=&quot;@mipmap/tabbar_msg_pressed&quot;/&gt; &lt;item android:state_pressed=&quot;true&quot; android:drawable=&quot;@mipmap/tabbar_msg_pressed&quot;/&gt; &lt;item android:drawable=&quot;@mipmap/tabbar_msg&quot;/&gt; &lt;/selector&gt; layout文件夹下 main_tab_layout.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:id=&quot;@+id/tab_bg&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:background=&quot;#4dd0c8&quot;&gt; &lt;LinearLayout android:id=&quot;@+id/main_content&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:gravity=&quot;center&quot; android:layout_centerInParent=&quot;true&quot; android:orientation=&quot;vertical&quot;&gt; &lt;ImageView android:id=&quot;@+id/main_tab_icon&quot; android:layout_width=&quot;30dp&quot; android:layout_height=&quot;30dp&quot; android:layout_marginTop=&quot;4dp&quot; android:scaleType=&quot;centerInside&quot; android:src=&quot;@drawable/main_tab_icon_home&quot;/&gt; &lt;TextView android:id=&quot;@+id/main_tab_txt&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginTop=&quot;5dp&quot; android:textColor=&quot;#32CD32&quot; android:text=&quot;@string/home&quot;/&gt; &lt;/LinearLayout&gt; &lt;ImageView android:visibility=&quot;gone&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot;/&gt; &lt;/RelativeLayout&gt; fragment_text.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;TextView android:id=&quot;@+id/text_view&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:textSize=&quot;36sp&quot; android:text=&quot;@string/app_name&quot; android:layout_centerInParent=&quot;true&quot; android:gravity=&quot;center&quot;/&gt; &lt;/RelativeLayout&gt; activity_tab_viewpager.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;TabHost xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:id=&quot;@+id/tab_host&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:background=&quot;#f8f8f8&quot; android:orientation=&quot;vertical&quot;&gt; &lt;RelativeLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;android.support.v4.view.ViewPager android:id=&quot;@+id/view_pager&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:layout_above=&quot;@+id/tab_divider&quot; /&gt; &lt;FrameLayout android:id=&quot;@android:id/tabcontent&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:visibility=&quot;gone&quot; android:layout_above=&quot;@+id/tab_divider&quot; &gt; &lt;/FrameLayout&gt; &lt;View android:id=&quot;@+id/tab_divider&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;1dp&quot; android:layout_above=&quot;@android:id/tabs&quot; android:background=&quot;#dfdfdf&quot; /&gt; &lt;TabWidget android:id=&quot;@android:id/tabs&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;60dp&quot; android:layout_alignParentBottom=&quot;true&quot; android:showDividers=&quot;none&quot; &gt; &lt;/TabWidget&gt; &lt;/RelativeLayout&gt; &lt;/TabHost&gt; activity_image_view_adapter.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:id=&quot;@+id/activity_main&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:paddingBottom=&quot;@dimen/activity_vertical_margin&quot; android:paddingLeft=&quot;@dimen/activity_horizontal_margin&quot; android:paddingRight=&quot;@dimen/activity_horizontal_margin&quot; android:paddingTop=&quot;@dimen/activity_vertical_margin&quot;&gt; &lt;android.support.v4.view.ViewPager android:id=&quot;@+id/view_pager&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; /&gt; &lt;LinearLayout android:id=&quot;@+id/dot_layout&quot; android:layout_width=&quot;120dp&quot; android:layout_height=&quot;30dp&quot; android:gravity=&quot;center&quot; android:layout_alignParentBottom=&quot;true&quot; android:layout_centerHorizontal=&quot;true&quot; android:layout_marginBottom=&quot;30dp&quot; android:orientation=&quot;horizontal&quot;&gt; &lt;/LinearLayout&gt; &lt;/RelativeLayout&gt; TestFragment.java package com.administrator.viewpagerproject; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.TextView; /** * Function: * Create date on 16/9/28. * * @author Conquer * @version 1.0 */ public class TestFragment extends Fragment { public static final String TITLE = &quot;title&quot;; private String mTitle; public static TestFragment newInstance(String title) { TestFragment fragment = new TestFragment(); Bundle bundle = new Bundle(); bundle.putString(TITLE, title); fragment.setArguments(bundle); return fragment; } @Override public void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); if (getArguments() != null) { mTitle = getArguments().getString(TITLE); } } @Nullable @Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) { View view = inflater.inflate(R.layout.fragment_test, null); TextView textView = (TextView) view.findViewById(R.id.text_view); textView.setText(mTitle); return view; } } TabViewPagerActivity.java package com.administrator.viewpagerproject; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.support.v4.app.FragmentPagerAdapter; import android.support.v4.view.ViewPager; import android.support.v7.app.AppCompatActivity; import android.view.View; import android.widget.ImageView; import android.widget.TabHost; import android.widget.TextView; /** * Function: * Create date on 16/9/28. * * @author Conquer * @version 1.0 */ public class TabViewPagerActivity extends AppCompatActivity implements TabHost.TabContentFactory{ private TabHost mTabHost; @Override protected void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_tab_viewpager); // 初始化总布局 mTabHost = (TabHost) findViewById(R.id.tab_host); mTabHost.setup(); // 三个Tab 做处理 // 1. init data int[] titleIDs = { R.string.home, R.string.message, R.string.me }; int[] drawableIDs = { R.drawable.main_tab_icon_home, R.drawable.main_tab_icon_message, R.drawable.main_tab_icon_me }; // data &lt; -- &gt; view for (int index = 0; index &lt; titleIDs.length; index++) { View view = getLayoutInflater().inflate(R.layout.main_tab_layout, null, false); ImageView icon = (ImageView) view.findViewById(R.id.main_tab_icon); TextView title = (TextView) view.findViewById(R.id.main_tab_txt); View tab = view.findViewById(R.id.tab_bg); icon.setImageResource(drawableIDs[index]); title.setText(getString(titleIDs[index])); tab.setBackgroundColor(getResources().getColor(R.color.white)); mTabHost.addTab( mTabHost.newTabSpec(getString(titleIDs[index])) .setIndicator(view) .setContent(this) ); } // 三个fragment组成的viewpager final Fragment[] fragments = new Fragment[]{ TestFragment.newInstance(&quot;home&quot;), TestFragment.newInstance(&quot;message&quot;), TestFragment.newInstance(&quot;me&quot;) }; final ViewPager viewPager = (ViewPager) findViewById(R.id.view_pager); viewPager.setOffscreenPageLimit(fragments.length); viewPager.setAdapter(new FragmentPagerAdapter(getSupportFragmentManager()) { @Override public Fragment getItem(int position) { return fragments[position]; } @Override public int getCount() { return fragments.length; } }); viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() { @Override public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) { } @Override public void onPageSelected(int position) { if(mTabHost != null){ mTabHost.setCurrentTab(position); } } @Override public void onPageScrollStateChanged(int state) { } }); mTabHost.setOnTabChangedListener(new TabHost.OnTabChangeListener() { @Override public void onTabChanged(String s) { if (mTabHost != null) { int position = mTabHost.getCurrentTab(); viewPager.setCurrentItem(position); } } }); } @Override public View createTabContent(String s) { View view = new View(this); view.setMinimumHeight(0); view.setMinimumWidth(0); return view; } } values文件夹下 colors.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;resources&gt; &lt;color name=&quot;colorPrimary&quot;&gt;#3F51B5&lt;/color&gt; &lt;color name=&quot;colorPrimaryDark&quot;&gt;#303F9F&lt;/color&gt; &lt;color name=&quot;colorAccent&quot;&gt;#FF4081&lt;/color&gt; &lt;color name=&quot;white&quot;&gt;#FFFFFF&lt;/color&gt; &lt;/resources&gt; dimens.xml &lt;resources&gt; &lt;!-- Default screen margins, per the Android Design guidelines. --&gt; &lt;dimen name=&quot;activity_horizontal_margin&quot;&gt;16dp&lt;/dimen&gt; &lt;dimen name=&quot;activity_vertical_margin&quot;&gt;16dp&lt;/dimen&gt; &lt;/resources&gt; strings.xml &lt;resources&gt; &lt;string name=&quot;app_name&quot;&gt;ViewPagerProject&lt;/string&gt; &lt;string name=&quot;home&quot;&gt;首页&lt;/string&gt; &lt;string name=&quot;message&quot;&gt;消息&lt;/string&gt; &lt;string name=&quot;me&quot;&gt;我&lt;/string&gt; &lt;/resources&gt; styles.xml &lt;resources&gt; &lt;!-- Base application theme. --&gt; &lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt; &lt;!-- Customize your theme here. --&gt; &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt; &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorPrimaryDark&lt;/item&gt; &lt;item name=&quot;colorAccent&quot;&gt;@color/colorAccent&lt;/item&gt; &lt;/style&gt; &lt;/resources&gt; 运行效果： 如果需要底部Tab标签出现竖直分割线，找到activity_tab_viewpager.xml TabWidget这个控件，即id=”@android:id/tabs”的这个控件 设置android:showDividers=”middle”这条属性，如图： 即可出现竖直分割线。 项目效果图如下 android:showDividers属性可以设置如下4个值：none：不显示分隔线；beginning：在LinearLayout的开始处显示分隔线；end：在Linearlayout的结尾处显示分隔线； middle：在LinearLayout中的每两个组件间显示分隔线； 项目Demo下载： https://download.csdn.net/download/weimeig/10421301","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"【ViewPager学习2】ViewPager入门以及实现APP引导页","slug":"ViewPagerTwo","date":"2017-03-13T01:10:23.000Z","updated":"2018-06-09T05:53:29.999Z","comments":true,"path":"2017/03/13/ViewPagerTwo/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2017/03/13/ViewPagerTwo/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 一、最简单的ViewPager实现 (一)、创建可左右滑动的三个布局 view_first.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;android.support.constraint.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;TextView android:textSize=&quot;20sp&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:text=&quot;first&quot;/&gt; &lt;/android.support.constraint.ConstraintLayout&gt; view_second.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;android.support.constraint.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;TextView android:textSize=&quot;20sp&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:text=&quot;second&quot;/&gt; &lt;/android.support.constraint.ConstraintLayout&gt; view_thrid.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;android.support.constraint.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;TextView android:textSize=&quot;20sp&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:text=&quot;thrid&quot;/&gt; &lt;/android.support.constraint.ConstraintLayout&gt; (二)、activity_main.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;android.support.constraint.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;com.administrator.viewpagerproject.MainActivity&quot;&gt; &lt;android.support.v4.view.ViewPager android:id=&quot;@+id/view_papger&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;/android.support.v4.view.ViewPager&gt; &lt;/android.support.constraint.ConstraintLayout&gt; (三)、MainActivity.java package com.administrator.viewpagerproject; import android.support.v4.view.PagerAdapter; import android.support.v4.view.ViewPager; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.view.View; import android.view.ViewGroup; import android.widget.ImageView; import java.util.ArrayList; import java.util.List; public class MainActivity extends AppCompatActivity { private ViewPager mViewPager; private List&lt;View&gt; mViews; /** *一组视图 */ private int[] mLayoutIDs = { R.layout.view_first, R.layout.view_second, R.layout.view_thrid}; private ImageView mImageView; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); ViewPager mViewPager = findViewById(R.id.view_papger); /** * 一组视图放在列表里 */ //初始化数据 mViews = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; mLayoutIDs.length; i++) { View view = getLayoutInflater().inflate(mLayoutIDs[i], null); mViews.add(view); // mImageView = new ImageView(this); // mImageView.setImageResource(R.mipmap.ic_launcher); // mViews.add(mImageView); } mViewPager.setAdapter(mPagerAdapter);//给Adapter } //设置Adapter PagerAdapter mPagerAdapter = new PagerAdapter() { @Override public int getCount() { return mLayoutIDs.length; } @Override public boolean isViewFromObject(View view, Object object) { return view == object; } //按顺序给页 @Override public Object instantiateItem(ViewGroup container, int position) { View child = mViews.get(position); container.addView(child); return child; } //按顺序销毁页 @Override public void destroyItem(ViewGroup container, int position, Object object) { container.removeView(mViews.get(position)); } }; } 二、使用ViewPager实现App引导页 添加一张图片用于测试，图片名为diglett.png 可鼠标右键另存为保存这张测试图片 (一)、创建可左右滑动的三个布局 view_first.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;android.support.constraint.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;TextView android:textSize=&quot;20sp&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:text=&quot;first&quot;/&gt; &lt;/android.support.constraint.ConstraintLayout&gt; view_second.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;android.support.constraint.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;TextView android:textSize=&quot;20sp&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:text=&quot;second&quot;/&gt; &lt;/android.support.constraint.ConstraintLayout&gt; view_thrid.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;android.support.constraint.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;TextView android:textSize=&quot;20sp&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:text=&quot;thrid&quot;/&gt; &lt;/android.support.constraint.ConstraintLayout&gt; (二)、activity_main.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;android.support.v4.view.ViewPager android:id=&quot;@+id/view_papger&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;/android.support.v4.view.ViewPager&gt; &lt;LinearLayout android:id=&quot;@+id/dot_layout&quot; android:layout_width=&quot;120dp&quot; android:layout_height=&quot;30dp&quot; android:layout_alignParentBottom=&quot;true&quot; android:layout_centerHorizontal=&quot;true&quot; android:layout_marginBottom=&quot;30dp&quot; android:gravity=&quot;center&quot; android:orientation=&quot;horizontal&quot;&gt; &lt;/LinearLayout&gt; &lt;/RelativeLayout&gt; (三)、MainActivity.java package com.administrator.viewpagerproject; import android.support.v4.view.PagerAdapter; import android.support.v4.view.ViewPager; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.view.View; import android.view.ViewGroup; import android.widget.ImageView; import android.widget.LinearLayout; import java.util.ArrayList; import java.util.List; public class MainActivity extends AppCompatActivity { private ViewPager mViewPager; private List&lt;View&gt; mViews; /** *一组视图 */ private int[] mLayoutIDs = { R.layout.view_first, R.layout.view_second, R.layout.view_thrid}; private ImageView mImageView; private ViewGroup mDotViewGroup; private List&lt;ImageView&gt; mDotViews = new ArrayList&lt;&gt;(); @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mViewPager = findViewById(R.id.view_papger); mDotViewGroup = findViewById(R.id.dot_layout); /** * 一组视图放在列表里 */ //初始化数据 mViews = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; mLayoutIDs.length; i++) { ImageView imageView = new ImageView(this); imageView.setImageResource(R.mipmap.ic_launcher); mViews.add(imageView); ImageView dot = new ImageView(this); dot.setImageResource(R.mipmap.ic_launcher); dot.setMaxWidth(100); dot.setMaxHeight(100); LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(50,50);//相距50，50 layoutParams.leftMargin = 20;//每个点距离左边点20 dot.setLayoutParams(layoutParams); dot.setEnabled(false); mDotViewGroup.addView(dot); mDotViews.add(dot); } //设置Adapter mViewPager.setAdapter(mPagerAdapter);//给Adapter mViewPager.setOffscreenPageLimit(4);//屏上的至少有几个 mViewPager.setCurrentItem(0);//控制最开始位置是第个布局，如：mViewPager.setCurrentItem(2); setDotViews(0);//控制最开始位置是第几个点，如setDotViews(2); mViewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() { @Override public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) { //当它被滚动的时候 } @Override public void onPageSelected(int position) { //当它被选中的时候 setDotViews(position); } @Override public void onPageScrollStateChanged(int state) { //当它滚动的状态变化的时候 } }); } public void setDotViews(int position) { for (int index = 0; index &lt; mDotViews.size() ; index++) { mDotViews.get(index).setImageResource(position == index ? R.mipmap.diglett:R.mipmap.ic_launcher); } } PagerAdapter mPagerAdapter = new PagerAdapter() { @Override public int getCount() { return mLayoutIDs.length; } @Override public boolean isViewFromObject(View view, Object object) { return view == object; } //按顺序给页 @Override public Object instantiateItem(ViewGroup container, int position) { View child = mViews.get(position); container.addView(child); return child; } //按顺序销毁页 @Override public void destroyItem(ViewGroup container, int position, Object object) { container.removeView(mViews.get(position)); } }; } 简单效果图： 三、较好用的引导页效果，滑动结束后点击按钮跳转 activity_guide.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;com.example.nanchen.guidepagedemo.GuideActivity&quot;&gt; &lt;android.support.v4.view.ViewPager android:id=&quot;@+id/guide_vp&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;/android.support.v4.view.ViewPager&gt; &lt;LinearLayout android:id=&quot;@+id/guide_ll_point&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;horizontal&quot; android:layout_alignParentBottom=&quot;true&quot; android:layout_marginBottom=&quot;40dp&quot; android:gravity=&quot;center_horizontal&quot;&gt; &lt;/LinearLayout&gt; &lt;ImageButton android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:id=&quot;@+id/guide_ib_start&quot; android:src=&quot;@mipmap/btn_start&quot; android:layout_centerHorizontal=&quot;true&quot; android:layout_above=&quot;@+id/guide_ll_point&quot; android:background=&quot;@null&quot; android:visibility=&quot;gone&quot;/&gt; &lt;/RelativeLayout&gt; GuidePagerAdapter.java import android.support.v4.view.PagerAdapter; import android.view.View; import android.view.ViewGroup; import java.util.List; /** * Created by 南尘 on 2016/7/10. */ public class GuidePageAdapter extends PagerAdapter { private List&lt;View&gt; viewList; public GuidePageAdapter(List&lt;View&gt; viewList) { this.viewList = viewList; } /** * @return 返回页面的个数 */ @Override public int getCount() { if (viewList != null){ return viewList.size(); } return 0; } /** * 判断对象是否生成界面 * @param view * @param object * @return */ @Override public boolean isViewFromObject(View view, Object object) { return view == object; } /** * 初始化position位置的界面 * @param container * @param position * @return */ @Override public Object instantiateItem(ViewGroup container, int position) { container.addView(viewList.get(position)); return viewList.get(position); } @Override public void destroyItem(ViewGroup container, int position, Object object) { container.removeView(viewList.get(position)); } } GuideActivity.java import android.content.Intent; import android.os.Bundle; import android.support.v4.view.ViewPager; import android.support.v7.app.AppCompatActivity; import android.view.View; import android.view.ViewGroup; import android.view.Window; import android.widget.ImageButton; import android.widget.ImageView; import android.widget.LinearLayout; import java.util.ArrayList; import java.util.List; /** * 实现首次启动的引导页面 */ public class GuideActivity extends AppCompatActivity implements ViewPager.OnPageChangeListener{ private ViewPager vp; private int []imageIdArray;//图片资源的数组 private List&lt;View&gt; viewList;//图片资源的集合 private ViewGroup vg;//放置圆点 //实例化原点View private ImageView iv_point; private ImageView []ivPointArray; //最后一页的按钮 private ImageButton ib_start; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); supportRequestWindowFeature(Window.FEATURE_NO_TITLE); setContentView(R.layout.activity_guide); ib_start = (ImageButton) findViewById(R.id.guide_ib_start); ib_start.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { startActivity(new Intent(GuideActivity.this,MainActivity.class)); finish(); } }); //加载ViewPager initViewPager(); //加载底部圆点 initPoint(); } /** * 加载底部圆点 */ private void initPoint() { //这里实例化LinearLayout vg = (ViewGroup) findViewById(R.id.guide_ll_point); //根据ViewPager的item数量实例化数组 ivPointArray = new ImageView[viewList.size()]; //循环新建底部圆点ImageView，将生成的ImageView保存到数组中 int size = viewList.size(); for (int i = 0;i&lt;size;i++){ iv_point = new ImageView(this); iv_point.setLayoutParams(new ViewGroup.LayoutParams(20,20)); iv_point.setPadding(30,0,30,0);//left,top,right,bottom ivPointArray[i] = iv_point; //第一个页面需要设置为选中状态，这里采用两张不同的图片 if (i == 0){ iv_point.setBackgroundResource(R.mipmap.full_holo); }else{ iv_point.setBackgroundResource(R.mipmap.empty_holo); } //将数组中的ImageView加入到ViewGroup vg.addView(ivPointArray[i]); } } /** * 加载图片ViewPager */ private void initViewPager() { vp = (ViewPager) findViewById(R.id.guide_vp); //实例化图片资源 imageIdArray = new int[]{R.mipmap.guide1,R.mipmap.guide2,R.mipmap.guide3}; viewList = new ArrayList&lt;&gt;(); //获取一个Layout参数，设置为全屏 LinearLayout.LayoutParams params = new LinearLayout.LayoutParams( LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.MATCH_PARENT); //循环创建View并加入到集合中 int len = imageIdArray.length; for (int i = 0;i&lt;len;i++){ //new ImageView并设置全屏和图片资源 ImageView imageView = new ImageView(this); imageView.setLayoutParams(params); imageView.setBackgroundResource(imageIdArray[i]); //将ImageView加入到集合中 viewList.add(imageView); } //View集合初始化好后，设置Adapter vp.setAdapter(new GuidePageAdapter(viewList)); //设置滑动监听 vp.setOnPageChangeListener(this); } @Override public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) { } /** * 滑动后的监听 * @param position */ @Override public void onPageSelected(int position) { //循环设置当前页的标记图 int length = imageIdArray.length; for (int i = 0;i&lt;length;i++){ ivPointArray[position].setBackgroundResource(R.mipmap.full_holo); if (position != i){ ivPointArray[i].setBackgroundResource(R.mipmap.empty_holo); } } //判断是否是最后一页，若是则显示按钮 if (position == imageIdArray.length - 1){ ib_start.setVisibility(View.VISIBLE); }else { ib_start.setVisibility(View.GONE); } } @Override public void onPageScrollStateChanged(int state) { } } 总的来说实现流程比较简单。 1）先加载ViewPager，新建ImageView并添加到View集合中，然后设置Adapter并显示。 2）然后加载LinearLayout，放置原点图片，同样新建ImageView设置背景后放在圆点图集合中。 3）最后设置ViewPager的滑动监听事件，在滑动完成的监听OnPageSelected方法中，设置对应的圆点为选中，如果是最后一页，则显示按钮。","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"【ViewPager学习1】ViewPager实现广告轮播图","slug":"ViewPagerOne","date":"2017-03-13T00:11:21.000Z","updated":"2018-06-09T05:57:32.914Z","comments":true,"path":"2017/03/13/ViewPagerOne/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2017/03/13/ViewPagerOne/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 转帖请注明本文出自weimeig的博客（https://blog.csdn.net/weimeig/article/details/80242315），请尊重他人的辛勤劳动成果，谢谢 一、定义本地数据源DataUtil类，为轮播图提供数据源。 DataUtil.java package com.administrator.taolvyou.util; import android.content.Context; import android.widget.ImageView; import java.util.ArrayList; import java.util.List; /** * 数据源 * Created by Administrator on 2018/5/8. */ public class DataUtil { /** * @param context * @param icons * @return */ public static List&lt;ImageView&gt; getHeaderAddInfo(Context context, int icons[]) { List&lt;ImageView&gt; datas = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; icons.length; i++) { ImageView icon = new ImageView(context); icon.setScaleType(ImageView.ScaleType.CENTER_CROP); icon.setImageResource(icons[i]); datas.add(icon); } return datas; } } 二、为界面和数据之间添加适配器 MainHeaderAdAdapter.java package com.administrator.taolvyou.adapter; import android.content.Context; import android.support.v4.view.PagerAdapter; import android.view.View; import android.view.ViewGroup; import android.widget.ImageView; import java.util.List; /** * Created by Administrator on 2018/5/8. */ public class MainHeaderAdAdapter extends PagerAdapter { protected Context context; protected List&lt;ImageView&gt; images; public MainHeaderAdAdapter(Context context, List&lt;ImageView&gt; images){ this.context=context; this.images=images; } @Override public int getCount() { //对数据作非空判断 return null!=images?images.size():0; } @Override public Object instantiateItem(ViewGroup container, int position) { container.addView(images.get(position)); return images.get(position); } @Override public boolean isViewFromObject(View view, Object object) { return view == object; } @Override public void destroyItem(ViewGroup container, int position, Object object) { container.removeView(images.get(position)); } } 三、编写布局文件 fragment_main.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:orientation=&quot;vertical&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; &gt; &lt;android.support.v4.view.ViewPager android:id=&quot;@+id/vpager_main_header_ad&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;120dp&quot;&gt; &lt;/android.support.v4.view.ViewPager&gt; &lt;include android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; layout=&quot;@layout/main_search&quot; /&gt; &lt;ImageView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:src=&quot;@mipmap/nav_header_index&quot; android:layout_centerHorizontal=&quot;true&quot; android:layout_marginTop=&quot;80dp&quot; /&gt; &lt;/RelativeLayout&gt; main_search.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:orientation=&quot;horizontal&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:gravity=&quot;center&quot;&gt; &lt;!--扫一扫--&gt; &lt;LinearLayout android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;vertical&quot; android:gravity=&quot;center&quot; android:layout_marginLeft=&quot;10dp&quot; &gt; &lt;ImageView android:layout_width=&quot;24dp&quot; android:layout_height=&quot;24dp&quot; android:src=&quot;@mipmap/main_scan&quot;/&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;扫一扫&quot; android:textColor=&quot;#ffffff&quot; android:textSize=&quot;20sp&quot;/&gt; &lt;/LinearLayout&gt; &lt;!--搜索--&gt; &lt;LinearLayout android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;48dp&quot; android:orientation=&quot;horizontal&quot; android:layout_weight=&quot;1&quot; android:background=&quot;@mipmap/main_header_sourch&quot; android:gravity=&quot;center&quot; android:layout_marginLeft=&quot;10dp&quot; android:layout_marginRight=&quot;10dp&quot;&gt; &lt;ImageView android:layout_width=&quot;24dp&quot; android:layout_height=&quot;24dp&quot; android:src=&quot;@mipmap/search&quot; /&gt; &lt;EditText android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:hint=&quot;目的地/景点/酒店/门票&quot; android:background=&quot;@null&quot; android:textSize=&quot;18sp&quot;/&gt; &lt;/LinearLayout&gt; &lt;!--消息--&gt; &lt;LinearLayout android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;vertical&quot; android:gravity=&quot;center&quot; android:layout_marginRight=&quot;10dp&quot;&gt; &lt;ImageView android:layout_width=&quot;24dp&quot; android:layout_height=&quot;24dp&quot; android:src=&quot;@mipmap/news&quot;/&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;消息&quot; android:textColor=&quot;#ffffff&quot; android:textSize=&quot;20sp&quot;/&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt; 如果xml文件的地方，图片处报红，请下载本文配套代码，从中提取该图片四、Java代码中调用 MainHeaderAdAdapter.java package com.administrator.taolvyou.fragment; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.v4.app.Fragment; import android.support.v4.view.ViewPager; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import com.administrator.taolvyou.R; import com.administrator.taolvyou.adapter.MainHeaderAdAdapter; import com.administrator.taolvyou.util.DataUtil; /** * 主界面视图 */ public class MainFragment extends Fragment{ protected int [] icons={R.mipmap.header_pic_ad1, R.mipmap.header_pic_ad2,R.mipmap.header_pic_ad1}; protected ViewPager mVPagerHeaderAd;//广告头 @Nullable @Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) { return inflater.inflate(R.layout.fragment_main,container,false); } @Override public void onActivityCreated(@Nullable Bundle savedInstanceState) { super.onActivityCreated(savedInstanceState); mVPagerHeaderAd= (ViewPager) getView().findViewById(R.id.vpager_main_header_ad); MainHeaderAdAdapter adapter=new MainHeaderAdAdapter(getActivity(), DataUtil.getHeaderAddInfo(getActivity(),icons)); mVPagerHeaderAd.setAdapter(adapter); } } 运行效果： 项目Demo下载 https://download.csdn.net/download/weimeig/10400834","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"安卓.9图适配","slug":"PointNinePic","date":"2017-03-07T01:10:23.000Z","updated":"2018-06-09T06:16:46.264Z","comments":true,"path":"2017/03/07/PointNinePic/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2017/03/07/PointNinePic/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 一、点九图介绍 在实际的Android开发项目中，为了适配不同分辨率的Android设备，经常会碰到制作.9图片的情况，由于这种格式的图片可以设定一张图片中哪些区域可以拉伸，哪些区域不可以拉伸，同时可以把内容显示区域的位置设置清楚。.9图片制作的工具有很多，但是AndroidStudio就自带.9图片制作的工具，但是网上关于如何具体用AndroidStudio制作.9图片的过程却非常少。 二、利用AndroidStudio制作点九图 步骤如下：找到一张图片，鼠标右键点击下面选项 点击OK 图片可拉伸区域 文字可展示区域","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"ListView基础入门(获取手机应用并快速打开功能Demo)","slug":"ListViewCase","date":"2017-01-27T01:10:23.000Z","updated":"2018-06-09T04:49:40.394Z","comments":true,"path":"2017/01/27/ListViewCase/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2017/01/27/ListViewCase/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 一、ListView基础案例 首先定义一个接收每一天item的布局 item.app.list.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;horizontal&quot;&gt; &lt;ImageView android:id=&quot;@+id/app_icon_image_view&quot; android:layout_width=&quot;60dp&quot; android:layout_height=&quot;60dp&quot; android:src=&quot;@mipmap/ic_launcher&quot;/&gt; &lt;TextView android:id=&quot;@+id/app_name_text_view&quot; android:layout_width=&quot;60dp&quot; android:layout_height=&quot;60dp&quot; android:paddingLeft=&quot;6dp&quot; android:textSize=&quot;20sp&quot; android:gravity=&quot;center_vertical&quot; android:text=&quot;@string/app_name&quot;/&gt; &lt;/LinearLayout&gt; 在activity_main.xml中定义一个ListView控件的摆放位置 activity_main.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:orientation=&quot;vertical&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;ListView android:id=&quot;@+id/app_list_view&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;/ListView&gt; &lt;/LinearLayout&gt; 创建一个Adapter适配器，将item不断的往ListView容器中填充 MainActivity.java package com.administrator.listviewdemo; import android.content.Context; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.BaseAdapter; import android.widget.ImageView; import android.widget.ListView; import android.widget.TextView; import java.util.ArrayList; import java.util.List; public class MainActivity extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); ListView app_list_view = (ListView)findViewById(R.id.app_list_view); List&lt;String&gt; appName = new ArrayList&lt;&gt;(); appName.add(&quot;QQ&quot;); appName.add(&quot;微信&quot;); appName.add(&quot;haha&quot;); app_list_view.setAdapter(new AppListAdapter(appName)); } /** * 定义适配器操作数据 */ public class AppListAdapter extends BaseAdapter{ List&lt;String&gt; mAppNames; public AppListAdapter(List&lt;String&gt; appName){ mAppNames = appName; } @Override public int getCount() { //有多少条数据 return mAppNames.size(); } @Override public Object getItem(int position) { //获取当前position位置的这一条 return mAppNames.get(position); } @Override public long getItemId(int position) { //获取当前position位置的这一条的ID return position; } /** * 这里还应该写一个ViewHolder，考虑到初学者的理解方便，暂时不写 */ @Override public View getView(int position, View convertView, ViewGroup parent) { //处理 view--data 填充数据的一个过程 LayoutInflater layoutInflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE); convertView = layoutInflater.inflate(R.layout.item_app_list,null); if(convertView != null){ ImageView appIconImageViw = (ImageView)convertView.findViewById(R.id.app_icon_image_view); TextView appNameTextView = (TextView) convertView.findViewById(R.id.app_name_text_view); appNameTextView.setText(mAppNames.get(position)); } return convertView; } } } ViewHolder有什么好处呢，因为TextView appNameTextView写在了ViewHolder里面，这样，getView方法就不用每次都去布局文件中拿View，提高了效率二、使用listView制作获取手机应用并快速打开功能 item_app_list.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;horizontal&quot;&gt; &lt;ImageView android:id=&quot;@+id/app_icon_image_view&quot; android:layout_width=&quot;60dp&quot; android:layout_height=&quot;60dp&quot; android:src=&quot;@mipmap/ic_launcher&quot;/&gt; &lt;TextView android:id=&quot;@+id/app_name_text_view&quot; android:layout_width=&quot;60dp&quot; android:layout_height=&quot;60dp&quot; android:paddingLeft=&quot;6dp&quot; android:textSize=&quot;20sp&quot; android:gravity=&quot;center_vertical&quot; android:text=&quot;@string/app_name&quot;/&gt; &lt;/LinearLayout&gt; header_list.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:orientation=&quot;vertical&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;ImageView android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;60dp&quot; android:src=&quot;@mipmap/ic_launcher&quot;/&gt; &lt;/LinearLayout&gt; activity_main.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:orientation=&quot;vertical&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;ListView android:id=&quot;@+id/app_list_view&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;/ListView&gt; &lt;/LinearLayout&gt; package com.administrator.listviewdemo; import android.content.ComponentName; import android.content.Context; import android.content.Intent; import android.content.pm.ComponentInfo; import android.content.pm.ResolveInfo; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.AdapterView; import android.widget.BaseAdapter; import android.widget.ImageView; import android.widget.ListView; import android.widget.TextView; import android.widget.Toast; import java.util.ArrayList; import java.util.List; public class MainActivity extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); ListView app_list_view = (ListView)findViewById(R.id.app_list_view); //添加标题的headerView //解析LayoutInflater LayoutInflater layoutInflater = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE); View headerView = layoutInflater.inflate(R.layout.header_list,null); app_list_view.addHeaderView(headerView); final List&lt;ResolveInfo&gt; appInfos = getAppInfos(); app_list_view.setAdapter(new AppListAdapter(getAppInfos())); /** * ListView在外面调用的方法 */ app_list_view.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) { //拿到应用的包名 String packageName = appInfos.get(position).activityInfo.packageName; //拿到主要的类名 String classString = appInfos.get(position).activityInfo.name; ComponentName componentName = new ComponentName(packageName,classString); final Intent intent= new Intent(); //通过Intent设置主键 intent.setComponent(componentName); startActivity(intent); } }); /** * 长按时候 */ app_list_view.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() { @Override public boolean onItemLongClick(AdapterView&lt;?&gt; parent, View view, int position, long id) { Toast.makeText(MainActivity.this, &quot;长按&quot;, Toast.LENGTH_SHORT).show(); return false; } }); } /** * 获取所有的用户信息 * @return */ private List&lt;ResolveInfo&gt; getAppInfos(){ Intent intent = new Intent(Intent.ACTION_MAIN,null); intent.addCategory(Intent.CATEGORY_LAUNCHER); return getPackageManager().queryIntentActivities(intent,0); } /** * 定义适配器操作数据 */ public class AppListAdapter extends BaseAdapter{ List&lt;ResolveInfo&gt; mAppInfo; public AppListAdapter(List&lt;ResolveInfo&gt; appName){ mAppInfo = appName; } @Override public int getCount() { //有多少条数据 return mAppInfo.size(); } @Override public Object getItem(int position) { //获取当前position位置的这一条 return mAppInfo.get(position); } @Override public long getItemId(int position) { //获取当前position位置的这一条的ID return position; } @Override public View getView(final int position, View convertView, ViewGroup parent) { //处理 view--data 填充数据的一个过程 LayoutInflater layoutInflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE); convertView = layoutInflater.inflate(R.layout.item_app_list,null); if(convertView != null){ ImageView appIconImageView = (ImageView)convertView.findViewById(R.id.app_icon_image_view); TextView appNameTextView = (TextView) convertView.findViewById(R.id.app_name_text_view); appNameTextView.setText(mAppInfo.get(position).activityInfo.loadLabel(getPackageManager())); appIconImageView.setImageDrawable(mAppInfo.get(position).activityInfo.loadIcon(getPackageManager())); } // //为点击的条目设置点击事件，在getView内部设置点击事件的方法 // convertView.setOnClickListener(new View.OnClickListener() { // @Override // public void onClick(View v) { // //拿到应用的包名 // String packageName = mAppInfo.get(position).activityInfo.packageName; // //拿到主要的类名 // String classString = mAppInfo.get(position).activityInfo.name; // // ComponentName componentName = new ComponentName(packageName,classString); // final Intent intent= new Intent(); // //通过Intent设置主键 // intent.setComponent(componentName); // startActivity(intent); // } // }); return convertView; } } } MainActivity.java 增加ViewHolder优化后，修改部分的代码如下： MainActivity.java @Override public View getView(final int position, View convertView, ViewGroup parent) { ViewHolder viewHolder =new ViewHolder(); //处理 view--data 填充数据的一个过程 if(convertView != null) { //减少了每次都解析Layout转化为View，和findViewById查找的消耗 LayoutInflater layoutInflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE); convertView = layoutInflater.inflate(R.layout.item_app_list, null); viewHolder.mAppIconImageView = (ImageView)convertView.findViewById(R.id.app_icon_image_view); viewHolder.mAppNameTextView = (TextView) convertView.findViewById(R.id.app_name_text_view); convertView.setTag(viewHolder); }else{ viewHolder = (ViewHolder)convertView.getTag(); } viewHolder.mAppIconImageView.setImageDrawable(mAppInfo.get(position).activityInfo.loadIcon(getPackageManager())); viewHolder.mAppNameTextView.setText(mAppInfo.get(position).activityInfo.loadLabel(getPackageManager())); return convertView; } public class ViewHolder{ public ImageView mAppIconImageView; public TextView mAppNameTextView; } 完整代码如下： MainActivity.java package com.administrator.listviewdemo; import android.content.ComponentName; import android.content.Context; import android.content.Intent; import android.content.pm.ComponentInfo; import android.content.pm.ResolveInfo; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.AdapterView; import android.widget.BaseAdapter; import android.widget.ImageView; import android.widget.ListView; import android.widget.TextView; import android.widget.Toast; import java.util.ArrayList; import java.util.List; public class MainActivity extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); ListView app_list_view = (ListView)findViewById(R.id.app_list_view); //添加标题的headerView //解析LayoutInflater LayoutInflater layoutInflater = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE); View headerView = layoutInflater.inflate(R.layout.header_list,null); app_list_view.addHeaderView(headerView); final List&lt;ResolveInfo&gt; appInfos = getAppInfos(); app_list_view.setAdapter(new AppListAdapter(getAppInfos())); /** * ListView在外面调用的方法 */ app_list_view.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) { //拿到应用的包名 String packageName = appInfos.get(position).activityInfo.packageName; //拿到主要的类名 String classString = appInfos.get(position).activityInfo.name; ComponentName componentName = new ComponentName(packageName,classString); final Intent intent= new Intent(); //通过Intent设置主键 intent.setComponent(componentName); startActivity(intent); } }); /** * 长按时候 */ app_list_view.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() { @Override public boolean onItemLongClick(AdapterView&lt;?&gt; parent, View view, int position, long id) { Toast.makeText(MainActivity.this, &quot;长按&quot;, Toast.LENGTH_SHORT).show(); return false; } }); } /** * 获取所有的用户信息 * @return */ private List&lt;ResolveInfo&gt; getAppInfos(){ Intent intent = new Intent(Intent.ACTION_MAIN,null); intent.addCategory(Intent.CATEGORY_LAUNCHER); return getPackageManager().queryIntentActivities(intent,0); } /** * 定义适配器操作数据 */ public class AppListAdapter extends BaseAdapter{ List&lt;ResolveInfo&gt; mAppInfo; public AppListAdapter(List&lt;ResolveInfo&gt; appName){ mAppInfo = appName; } @Override public int getCount() { //有多少条数据 return mAppInfo.size(); } @Override public Object getItem(int position) { //获取当前position位置的这一条 return mAppInfo.get(position); } @Override public long getItemId(int position) { //获取当前position位置的这一条的ID return position; } @Override public View getView(final int position, View convertView, ViewGroup parent) { ViewHolder viewHolder =new ViewHolder(); //处理 view--data 填充数据的一个过程 if(convertView != null) { //减少了每次都解析Layout转化为View，和findViewById查找的消耗 LayoutInflater layoutInflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE); convertView = layoutInflater.inflate(R.layout.item_app_list, null); viewHolder.mAppIconImageView = (ImageView)convertView.findViewById(R.id.app_icon_image_view); viewHolder.mAppNameTextView = (TextView) convertView.findViewById(R.id.app_name_text_view); convertView.setTag(viewHolder); }else{ viewHolder = (ViewHolder)convertView.getTag(); } viewHolder.mAppIconImageView.setImageDrawable(mAppInfo.get(position).activityInfo.loadIcon(getPackageManager())); viewHolder.mAppNameTextView.setText(mAppInfo.get(position).activityInfo.loadLabel(getPackageManager())); return convertView; } public class ViewHolder{ public ImageView mAppIconImageView; public TextView mAppNameTextView; } } }","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"高级控件之滚动视图(ScrollView)","slug":"ScrollView","date":"2017-01-16T22:18:33.000Z","updated":"2018-06-09T06:56:05.540Z","comments":true,"path":"2017/01/17/ScrollView/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2017/01/17/ScrollView/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 一．滚动视图的基础概念 滚动视图用于为其它组件添加滚动条,在默认的情况下,当窗体中内容比较多,而一屏显示不下时, 超出的部分不能被用户所看到.因为Android的布局管理器本身没有提供滚动屏幕的功能.如果 要让其滚动,就要使用滚动视图ScrllView. 滚动视图是FrameLayout的子类,因此,在滚动视图中,可以添加任何想要放入其中的组件,但是一个滚动视图中只能放一个组件,如果要放置多个,可以先放一个存布局管理器.再将要放置的组件放置到该布局管理器中,在滚动视图中,使用比较多的是线性布局管理器. （一）滚动视图（ScrollView）的XML配置： &lt;ScrollView android:id=&quot;@+id/myscollView&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; &gt; //这里只能放一个布局或控件 //一般是放LinearLayout布局 &lt;/ScrollView&gt; （二）水平滚动视图(HorizontalScrollView) HorizontalScrollView和ScrollView差不多，只是滚动方式为横向XML配置： &lt;HorizontalScrollView android:id=&quot;@+id/scrollView1&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; &gt; &lt;/HorizontalScrollView&gt; 滚动视图的作用： 1.滚动视图使用后能让里面的视图控件没展示的部分滚动后可以展示比如一个TextView默认情况文本过大后，超出屏幕或框体的内容是不能显示出来的，但是如果把这个TextView放到一个滚动视图中，就能上下滚动显示没有显示的文本内容。 2.水平滚动的视图内显示横向拉伸的布局的内容比如一个水平的LinearLayout放置十个按钮，那么只能显示五个，如果把这个LinearLayout放在一个水平滚动的视图中，就可以水平的拖动视图显示后面的按钮。 值得注意的是ListView是默认带滚动的，不需要滚动视图的包裹。 而Android的五六布局（线性布局，相对布局，绝对布局，表格布局，网格布局，层布局）和简单控件（TextView，ImageView等等）默认是不能滚动显示的，除非放到滚动视图中。 还有一点值得注意的是，如果ListView放到ScrollView中去这里ListView要自定义的拉长，否则会默认显示ListView中的一行数据，要拉伸才显示其他内容。二．简单展示的示例程序（一）布局文件activity_main.xml设计 &lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; &gt; &lt;ScrollView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:scrollbars=&quot;none&quot; &gt; &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; &gt; &lt;TextView android:id=&quot;@+id/tv_title&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; /&gt; &lt;TextView android:id=&quot;@+id/tv_content&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; /&gt; &lt;/LinearLayout&gt; &lt;/ScrollView&gt; &lt;/RelativeLayout&gt; （二）java代码设计 import android.app.Activity; import android.os.Bundle; import android.widget.TextView; /** * ScrollView的简单展示 */ public class MainActivity extends Activity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); TextView tvTile = (TextView) findViewById(R.id.tv_title); tvTile.setTextSize(30); tvTile.setText(&quot;文章标题：。。。&quot;); TextView tv = (TextView) findViewById(R.id.tv_content); tv.setTextSize(20); CharSequence text = &quot;锅盔的原材料都是庄稼人自家酿种的。&quot; + &quot;\\n&quot; + &quot;面粉是自家地里种的小麦磨成的；&quot; + &quot;\\n&quot; + &quot;是自家饲养的鸡产的；香豆子，&quot; + &quot;\\n&quot; + &quot;是自家地埂上撒出来的。这些材料，&quot; + &quot;\\n&quot; + &quot;也是靠老天的眷顾，才有的。山区，&quot; + &quot;\\n&quot; + &quot;就是靠天吃饭。万一哪一年，&quot; + &quot;\\n&quot; + &quot;老天一生气不下雨，山就荒了，&quot; + &quot;\\n&quot; + &quot;地也荒了，人也慌了，&quot; + &quot;\\n&quot; + &quot;妈妈的锅盔也会瘪了。&quot; + &quot;\\n&quot; + &quot;妈妈经过泡发面、和面、醒面等几道程序，&quot; + &quot;\\n&quot; + &quot;把这些材料依次揉进面里，&quot; + &quot;\\n&quot; + &quot;再切成碗口大的面团，揉成馒头，再用擀杖稍稍一擀，&quot; + &quot;\\n&quot; + &quot;或用手掌稍稍一按，就成了一寸多高、盘子大小的圆饼。&quot; + &quot;\\n&quot; + &quot;灵巧、细心、唯美的妈妈总不忘在饼上面&quot; + &quot;\\n&quot; + &quot;用菜刀画出美丽对称的图案：三角形、四边形、菱形等等。&quot; + &quot;\\n&quot; + &quot;妈妈的爱，就在那揉、擀、按、画的过程中，&quot; + &quot;\\n&quot; + &quot;一点一点渗进锅盔里，流进我的血脉里。弄好的锅&quot;; tv.setText(text); } } 程序运行后的显示界面： 页面往下拉显示的界面： 如果ListView或GridView放在ScrollVIew中要做的处理：如果是ListView在ScrollView中时的处理： import android.content.Context; import android.util.AttributeSet; import android.widget.ListView; /** * 可滚动的ListView，这里是因为这个ListView被包裹在一个ScrollView中才需要设置纵向拉伸 */ public class ScrollListView extends ListView { public ScrollListView(Context context) { super(context); } public ScrollListView(Context context, AttributeSet attrs) { super(context, attrs); } @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { int height = MeasureSpec.makeMeasureSpec(Integer.MAX_VALUE &gt;&gt; 2, MeasureSpec.AT_MOST); super.onMeasure(widthMeasureSpec, height); } } 如果是GridView在ScrollView中时的处理： import android.content.Context; import android.util.AttributeSet; import android.widget.GridView; /** * 重写网格View，设置高度 * 可滚动的GridView，这里是因为这个GridView被包裹在一个ScrollView中才需要设置纵向拉伸 */ public class ScrollGridView extends GridView { public ScrollGridView(Context context) { super(context); } public ScrollGridView(Context context, AttributeSet attrs) { super(context, attrs); } @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { int height = MeasureSpec.makeMeasureSpec(Integer.MAX_VALUE &gt;&gt; 2, MeasureSpec.AT_MOST); super.onMeasure(widthMeasureSpec, height); } } 使用的时候把这两个类分别当中ListView和GridView使用就可以了。 比如： &lt;ScrollView android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot;&gt; &lt;TextView android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:background=&quot;@color/hint_color&quot; android:padding=&quot;10dp&quot; android:text=&quot;历史记录&quot; /&gt; &lt;TextView android:id=&quot;@+id/tv_history&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:padding=&quot;10dp&quot; android:text=&quot;当前还没有历史记录&quot; /&gt; //包名+类名 &lt;com.lwz.mathbox.weight.ScrollGridView android:id=&quot;@+id/gv_topic&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:background=&quot;@color/hint_color&quot; android:horizontalSpacing=&quot;1dp&quot; android:numColumns=&quot;2&quot; android:verticalSpacing=&quot;1dp&quot; /&gt; &lt;TextView android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:background=&quot;@color/hint_color&quot; android:padding=&quot;10dp&quot; android:text=&quot;社区热门&quot; /&gt; //包名+类名 &lt;com.lwz.mathbox.weight.ScrollListView android:id=&quot;@+id/lv_topic&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; /&gt; &lt;/LinearLayout&gt; &lt;/ScrollView&gt;","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"Android布局优化之include标签详解","slug":"Include","date":"2016-09-27T01:10:23.000Z","updated":"2018-06-09T04:51:25.782Z","comments":true,"path":"2016/09/27/Include/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2016/09/27/Include/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 一、include标签（布局重用）1、说明：该标签的目的是解决重复定义布局的问题而诞生的，提高代码的复用。 2、使用方法： &lt;include android:id=&quot;@+id/my_title_ly&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; layout=&quot;@layout/my_title_layout&quot; /&gt; my_title_layout.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:id=&quot;@+id/my_title_parent_id&quot; android:layout_height=&quot;wrap_content&quot; &gt; &lt;ImageButton android:id=&quot;@+id/back_btn&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:src=&quot;@mipmap/ic_launcher&quot; /&gt; &lt;TextView android:id=&quot;@+id/title_tv&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:layout_centerVertical=&quot;true&quot; android:layout_marginLeft=&quot;20dp&quot; android:layout_toRightOf=&quot;@+id/back_btn&quot; android:gravity=&quot;center&quot; android:text=&quot;我的title&quot; android:textSize=&quot;18sp&quot; /&gt; &lt;/RelativeLayout&gt; include布局文件： &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; &gt; &lt;include android:id=&quot;@+id/my_title_ly&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; layout=&quot;@layout/my_title_layout&quot; /&gt; &lt;/LinearLayout&gt; 4、注意事项：子控件抛出空指针的情况include标签若指定了ID属性，而你的layout也定义了ID，则你的layout的ID会被覆盖。如果findViewById()查找layout的Id来查找子控件，会出现这种情况。解决：不用上边的方法。可以直接查找子控件的id。或者查找include标签的id来查找子控件。","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"Intent实现Android间的页面跳转","slug":"AndroidIntent","date":"2016-07-12T07:11:59.000Z","updated":"2018-06-09T07:50:54.063Z","comments":true,"path":"2016/07/12/AndroidIntent/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2016/07/12/AndroidIntent/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 转帖请注明本文出自weimeig的博客（https://blog.csdn.net/weimeig/article/details/79666786），请尊重他人的辛勤劳动成果，谢谢 应朋友们反馈的Android基础薄弱的问题，决定出一套Android基础教程，帮助大家复习，巩固Android基础，今天要讲的是Android中的Intent实现Android间的页面跳转。 增加Acrivity页面时，首先需要在MainActivity中对页面注册，比如 新建被跳转的页面OtherActivity，其对应的xml文件如下 activity_other &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;第二个Activity&quot;/&gt; &lt;/LinearLayout&gt; Java代码 OtherActivity import android.support.v7.app.AppCompatActivity; import android.view.View; public class OtherActivity extends AppCompatActivity { @Override public void setContentView(View view) { super.setContentView(R.layout.activity_other); } } 程序主界面activity_main.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot;&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;第一个Activity&quot;/&gt; &lt;Button android:id=&quot;@+id/start_btn&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;页面跳转&quot;/&gt; &lt;/LinearLayout&gt; Java代码 MainActivity import android.content.Intent; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.view.View; import android.widget.Button; public class MainActivity extends AppCompatActivity { private Button startButton; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); startButton = findViewById(R.id.start_btn); startButton.setOnClickListener(new ButtonListener()); } class ButtonListener implements View.OnClickListener{ @Override public void onClick(View v) { //当点击事件触发后执行，启动OtherActivity //创建一个Intent对象 Intent intent =new Intent(); intent.setClass(MainActivity.this,OtherActivity.class);//从MainActivity跳转到OtherActivity startActivity(intent); } } } 另外除了上述的显式Intent，还有隐式Intent，隐式Intent可以用来传递数组及动作状态 比如在MainActivity中 //当点击事件触发后执行，启动OtherActivity //创建一个Intent对象 Intent intent =new Intent(); intent.setClass(MainActivity.this,OtherActivity.class);//从MainActivity跳转到OtherActivity intent.putExtra(&quot;姓名&quot;,&quot;小李&quot;); startActivity(intent); 在被跳转的OtherActivity中 Intent intent =new Intent(); String name = intent.getStringExtra(&quot;姓名&quot;); 可以接收由MainActivity传来的数据 又或者 Intent intent = new Intent(Intent.ACTION_DIAL); intent.setData(Uri.parse(&quot;tel:10086&quot;)); startActivity(intent); 可以调用拨打电话界面并设定预设号码为10086 还可以设置网址的跳转，显示地理位置等 如设置为跳转打开网址时，需要在AndroidManifast中注册一下 如下： &lt;activity android:name=&quot;.MainActivity&quot;&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.VIEW&quot;/&gt; &lt;category android:name=&quot;android.intent.category.DEFAULT&quot;/&gt; &lt;data android:scheme=&quot;http&quot;/&gt; &lt;/intent-filter&gt; &lt;/activity&gt;","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"ImageView和ImageButton","slug":"ImageViewAndImageBtn","date":"2016-07-10T07:25:57.000Z","updated":"2018-06-09T08:15:17.640Z","comments":true,"path":"2016/07/10/ImageViewAndImageBtn/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2016/07/10/ImageViewAndImageBtn/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 android:scaleType=&quot;center&quot; //ImageView的缩放位置属性 项目中使用ImageButton,但是给图片设置具体尺寸(width,height)之后,发现还是原来的大小,为了保持图片的原始像素,并没有给ImageButton设置ScaleType,后来将ImageButton换成ImageView之后就ok了(并不是唯一解决方案) 于是,想搞明白ImageView和ImageButton之间到底有什么不同,发现两者之间还是有不小的区别. 源码的角度看继承关系,一目了然: 下面分几种不同的情况去说明两者之间的差别: 1,不设置具体宽高 &lt;code class=&quot;hljs xml has-numbering&quot; style=&quot;display: block; padding: 0px; color: inherit; box-sizing: border-box; font-family: &apos;Source Code Pro&apos;, monospace;font-size:undefined; white-space: pre; border-radius: 0px; word-wrap: normal; background: transparent;&quot;&gt;&lt;span class=&quot;hljs-tag&quot; style=&quot;color: rgb(0, 102, 102); box-sizing: border-box;&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot; style=&quot;box-sizing: border-box; color: rgb(0, 0, 136);&quot;&gt;ImageView &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:background&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;#00f&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:src&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;@drawable/search&quot;&lt;/span&gt;/&gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot; style=&quot;color: rgb(0, 102, 102); box-sizing: border-box;&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot; style=&quot;box-sizing: border-box; color: rgb(0, 0, 136);&quot;&gt;ImageButton &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:layout_marginTop&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;20dp&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:background&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;#0f0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:src&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;@drawable/search&quot;&lt;/span&gt;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;ul class=&quot;pre-numbering&quot; style=&quot;box-sizing: border-box; position: absolute; width: 50px; top: 0px; left: 0px; margin: 0px; padding: 6px 0px 40px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(221, 221, 221); list-style: none; text-align: right; background-color: rgb(238, 238, 238);&quot;&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;1&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;2&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;3&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;4&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;5&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;6&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;7&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;8&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;9&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;10&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;11&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;12&lt;/li&gt;&lt;/ul&gt;&lt;ul class=&quot;pre-numbering&quot; style=&quot;box-sizing: border-box; position: absolute; width: 50px; top: 0px; left: 0px; margin: 0px; padding: 6px 0px 40px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(221, 221, 221); list-style: none; text-align: right; background-color: rgb(238, 238, 238);&quot;&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;1&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;2&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;3&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;4&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;5&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;6&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;7&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;8&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;9&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;10&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;11&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;12&lt;/li&gt;&lt;/ul&gt; 效果是这样的: 两者没有区别 2,设置了具体的宽高 &lt;code class=&quot;hljs xml has-numbering&quot; style=&quot;display: block; padding: 0px; color: inherit; box-sizing: border-box; font-family: &apos;Source Code Pro&apos;, monospace;font-size:undefined; white-space: pre; border-radius: 0px; word-wrap: normal; background: transparent;&quot;&gt;&lt;span class=&quot;hljs-tag&quot; style=&quot;color: rgb(0, 102, 102); box-sizing: border-box;&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot; style=&quot;box-sizing: border-box; color: rgb(0, 0, 136);&quot;&gt;ImageView &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;100dp&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;100dp&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:background&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;#00f&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:src&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;@drawable/search&quot;&lt;/span&gt; /&gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot; style=&quot;color: rgb(0, 102, 102); box-sizing: border-box;&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot; style=&quot;box-sizing: border-box; color: rgb(0, 0, 136);&quot;&gt;ImageButton &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;100dp&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;100dp&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:layout_marginTop&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;20dp&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:background&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;#0f0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:src&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;@drawable/search&quot;&lt;/span&gt;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;ul class=&quot;pre-numbering&quot; style=&quot;box-sizing: border-box; position: absolute; width: 50px; top: 0px; left: 0px; margin: 0px; padding: 6px 0px 40px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(221, 221, 221); list-style: none; text-align: right; background-color: rgb(238, 238, 238);&quot;&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;1&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;2&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;3&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;4&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;5&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;6&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;7&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;8&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;9&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;10&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;11&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;12&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;13&lt;/li&gt;&lt;/ul&gt;&lt;ul class=&quot;pre-numbering&quot; style=&quot;box-sizing: border-box; position: absolute; width: 50px; top: 0px; left: 0px; margin: 0px; padding: 6px 0px 40px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(221, 221, 221); list-style: none; text-align: right; background-color: rgb(238, 238, 238);&quot;&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;1&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;2&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;3&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;4&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;5&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;6&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;7&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;8&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;9&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;10&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;11&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;12&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;13&lt;/li&gt;&lt;/ul&gt; 效果是这样的: 效果就很明显了,ImageView会根据设置的具体宽高尺寸变化,但是ImageButton只会显示图片的原始像素大小.当然,给ImageButton设置scaletype属性是可以完成ImageView的效果,但是那样会是图片失真. 3,设置背景选择器 &lt;code class=&quot;hljs xml has-numbering&quot; style=&quot;display: block; padding: 0px; color: inherit; box-sizing: border-box; font-family: &apos;Source Code Pro&apos;, monospace;font-size:undefined; white-space: pre; border-radius: 0px; word-wrap: normal; background: transparent;&quot;&gt;&lt;span class=&quot;hljs-tag&quot; style=&quot;color: rgb(0, 102, 102); box-sizing: border-box;&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot; style=&quot;box-sizing: border-box; color: rgb(0, 0, 136);&quot;&gt;ImageView &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:clickable&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:background&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;#00f&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:src&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;@drawable/search_selector&quot;&lt;/span&gt;/&gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot; style=&quot;color: rgb(0, 102, 102); box-sizing: border-box;&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot; style=&quot;box-sizing: border-box; color: rgb(0, 0, 136);&quot;&gt;ImageButton &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:layout_marginTop&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;20dp&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:background&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;#0f0&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:src&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;@drawable/search_selector&quot;&lt;/span&gt;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;ul class=&quot;pre-numbering&quot; style=&quot;box-sizing: border-box; position: absolute; width: 50px; top: 0px; left: 0px; margin: 0px; padding: 6px 0px 40px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(221, 221, 221); list-style: none; text-align: right; background-color: rgb(238, 238, 238);&quot;&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;1&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;2&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;3&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;4&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;5&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;6&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;7&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;8&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;9&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;10&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;11&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;12&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;13&lt;/li&gt;&lt;/ul&gt;&lt;ul class=&quot;pre-numbering&quot; style=&quot;box-sizing: border-box; position: absolute; width: 50px; top: 0px; left: 0px; margin: 0px; padding: 6px 0px 40px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(221, 221, 221); list-style: none; text-align: right; background-color: rgb(238, 238, 238);&quot;&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;1&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;2&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;3&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;4&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;5&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;6&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;7&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;8&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;9&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;10&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;11&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;12&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;13&lt;/li&gt;&lt;/ul&gt; 注意:ImageView要想使选择器效果生效,需要让控件是有焦点的,这里加上clickable=true处理一下ImageButton就不需要处理,因为源码中,ImageButton的构造中,已经setFocusable(true)处理过了 效果都一样的,选择器都会生效,这里就不上图了.同时,将宽高改成的具体尺寸,效果也是一样的,选择器都会生效 将两者的src换成background试了一下: &lt;code class=&quot;hljs xml has-numbering&quot; style=&quot;display: block; padding: 0px; color: inherit; box-sizing: border-box; font-family: &apos;Source Code Pro&apos;, monospace;font-size:undefined; white-space: pre; border-radius: 0px; word-wrap: normal; background: transparent;&quot;&gt;&lt;span class=&quot;hljs-tag&quot; style=&quot;color: rgb(0, 102, 102); box-sizing: border-box;&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot; style=&quot;box-sizing: border-box; color: rgb(0, 0, 136);&quot;&gt;ImageView &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:clickable&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:background&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;@drawable/search_selector&quot;&lt;/span&gt;/&gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot; style=&quot;color: rgb(0, 102, 102); box-sizing: border-box;&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot; style=&quot;box-sizing: border-box; color: rgb(0, 0, 136);&quot;&gt;ImageButton &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:layout_marginTop&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;20dp&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:background&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;@drawable/search_selector&quot;&lt;/span&gt;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;ul class=&quot;pre-numbering&quot; style=&quot;box-sizing: border-box; position: absolute; width: 50px; top: 0px; left: 0px; margin: 0px; padding: 6px 0px 40px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(221, 221, 221); list-style: none; text-align: right; background-color: rgb(238, 238, 238);&quot;&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;1&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;2&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;3&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;4&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;5&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;6&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;7&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;8&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;9&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;10&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;11&lt;/li&gt;&lt;/ul&gt;&lt;ul class=&quot;pre-numbering&quot; style=&quot;box-sizing: border-box; position: absolute; width: 50px; top: 0px; left: 0px; margin: 0px; padding: 6px 0px 40px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(221, 221, 221); list-style: none; text-align: right; background-color: rgb(238, 238, 238);&quot;&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;1&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;2&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;3&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;4&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;5&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;6&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;7&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;8&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;9&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;10&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;11&lt;/li&gt;&lt;/ul&gt; 效果也是一样的,选择器都会生效同时,将宽高改成的具体尺寸,效果也是一样的,选择器都会生效 所以,在选择器的使用上,两者基本没有差别,要说差别,那就是ImageView需要处理一下焦点问题吧 4,设置background(无具体宽高) &lt;code class=&quot;hljs xml has-numbering&quot; style=&quot;display: block; padding: 0px; color: inherit; box-sizing: border-box; font-family: &apos;Source Code Pro&apos;, monospace;font-size:undefined; white-space: pre; border-radius: 0px; word-wrap: normal; background: transparent;&quot;&gt;&lt;span class=&quot;hljs-tag&quot; style=&quot;color: rgb(0, 102, 102); box-sizing: border-box;&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot; style=&quot;box-sizing: border-box; color: rgb(0, 0, 136);&quot;&gt;ImageView &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:clickable&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:background&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;@drawable/search_selected&quot;&lt;/span&gt;/&gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot; style=&quot;color: rgb(0, 102, 102); box-sizing: border-box;&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot; style=&quot;box-sizing: border-box; color: rgb(0, 0, 136);&quot;&gt;ImageButton &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:layout_marginTop&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;20dp&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:background&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;@drawable/search_selected&quot;&lt;/span&gt;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;ul class=&quot;pre-numbering&quot; style=&quot;box-sizing: border-box; position: absolute; width: 50px; top: 0px; left: 0px; margin: 0px; padding: 6px 0px 40px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(221, 221, 221); list-style: none; text-align: right; background-color: rgb(238, 238, 238);&quot;&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;1&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;2&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;3&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;4&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;5&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;6&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;7&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;8&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;9&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;10&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;11&lt;/li&gt;&lt;/ul&gt;&lt;ul class=&quot;pre-numbering&quot; style=&quot;box-sizing: border-box; position: absolute; width: 50px; top: 0px; left: 0px; margin: 0px; padding: 6px 0px 40px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(221, 221, 221); list-style: none; text-align: right; background-color: rgb(238, 238, 238);&quot;&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;1&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;2&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;3&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;4&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;5&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;6&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;7&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;8&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;9&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;10&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;11&lt;/li&gt;&lt;/ul&gt; 效果如图: 效果一样,一会再说src和background的区别 5,设置background(有具体宽高) &lt;code class=&quot;hljs xml has-numbering&quot; style=&quot;display: block; padding: 0px; color: inherit; box-sizing: border-box; font-family: &apos;Source Code Pro&apos;, monospace;font-size:undefined; white-space: pre; border-radius: 0px; word-wrap: normal; background: transparent;&quot;&gt;&lt;span class=&quot;hljs-tag&quot; style=&quot;color: rgb(0, 102, 102); box-sizing: border-box;&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot; style=&quot;box-sizing: border-box; color: rgb(0, 0, 136);&quot;&gt;ImageView &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;100dp&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;100dp&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:clickable&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:background&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;@drawable/search_selected&quot;&lt;/span&gt;/&gt;&lt;/span&gt; &lt;span class=&quot;hljs-tag&quot; style=&quot;color: rgb(0, 102, 102); box-sizing: border-box;&quot;&gt;&lt;&lt;span class=&quot;hljs-title&quot; style=&quot;box-sizing: border-box; color: rgb(0, 0, 136);&quot;&gt;ImageButton &lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;100dp&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;100dp&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:layout_marginTop&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;20dp&quot;&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot; style=&quot;box-sizing: border-box; color: rgb(102, 0, 102);&quot;&gt;android:background&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot; style=&quot;box-sizing: border-box; color: rgb(0, 136, 0);&quot;&gt;&quot;@drawable/search_selected&quot;&lt;/span&gt;/&gt;&lt;/span&gt;&lt;/code&gt;&lt;ul class=&quot;pre-numbering&quot; style=&quot;box-sizing: border-box; position: absolute; width: 50px; top: 0px; left: 0px; margin: 0px; padding: 6px 0px 40px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(221, 221, 221); list-style: none; text-align: right; background-color: rgb(238, 238, 238);&quot;&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;1&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;2&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;3&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;4&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;5&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;6&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;7&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;8&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;9&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;10&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;11&lt;/li&gt;&lt;/ul&gt;&lt;ul class=&quot;pre-numbering&quot; style=&quot;box-sizing: border-box; position: absolute; width: 50px; top: 0px; left: 0px; margin: 0px; padding: 6px 0px 40px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(221, 221, 221); list-style: none; text-align: right; background-color: rgb(238, 238, 238);&quot;&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;1&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;2&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;3&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;4&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;5&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;6&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;7&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;8&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;9&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;10&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;11&lt;/li&gt;&lt;/ul&gt; 效果如图: 两者效果一样的,但是跟使用src不同的是,ImageButton的效果也跟着具体参数不同而改变了. 下面就说一下src和background的区别吧(ImageView和ImageButton通用): (1),src指定的是原图的大小,宽高设置成图片的原始尺寸,在分辨率不同的手机上,显示效果会不同,但不会进行拉伸;background会根据具体的宽高进行拉伸 注意:src指定的图片的宽高要是设置成超过其原始尺寸,比如图片原始像素是4848,但是宽高设置成100100,图片也是会被拉伸的 (2),src是图片的前景,background是背景,background是所有控件都有的属性,两者可以同时使用 (3),scaleType属性只有src才生效 6,点9图 &lt;code class=&quot;hljs perl has-numbering&quot; style=&quot;display: block; padding: 0px; color: inherit; box-sizing: border-box; font-family: &apos;Source Code Pro&apos;, monospace;font-size:undefined; white-space: pre; border-radius: 0px; word-wrap: normal; background: transparent;&quot;&gt;&lt;ImageView android:layout_width=&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(0, 136, 0); box-sizing: border-box;&quot;&gt;&quot;150dp&quot;&lt;/span&gt; android:layout_height=&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(0, 136, 0); box-sizing: border-box;&quot;&gt;&quot;150dp&quot;&lt;/span&gt; android:src=&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(0, 136, 0); box-sizing: border-box;&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot; style=&quot;color: rgb(102, 0, 102); box-sizing: border-box;&quot;&gt;@drawable&lt;/span&gt;/bg&quot;&lt;/span&gt;/&gt; &lt;ImageButton android:layout_width=&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(0, 136, 0); box-sizing: border-box;&quot;&gt;&quot;150dp&quot;&lt;/span&gt; android:layout_height=&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(0, 136, 0); box-sizing: border-box;&quot;&gt;&quot;150dp&quot;&lt;/span&gt; android:layout_marginTop=&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(0, 136, 0); box-sizing: border-box;&quot;&gt;&quot;10dp&quot;&lt;/span&gt; android:background=&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(0, 136, 0); box-sizing: border-box;&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot; style=&quot;color: rgb(102, 0, 102); box-sizing: border-box;&quot;&gt;@null&lt;/span&gt;&quot;&lt;/span&gt; android:src=&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(0, 136, 0); box-sizing: border-box;&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot; style=&quot;color: rgb(102, 0, 102); box-sizing: border-box;&quot;&gt;@drawable&lt;/span&gt;/bg&quot;&lt;/span&gt;/&gt; &lt;ImageView android:layout_width=&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(0, 136, 0); box-sizing: border-box;&quot;&gt;&quot;150dp&quot;&lt;/span&gt; android:layout_height=&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(0, 136, 0); box-sizing: border-box;&quot;&gt;&quot;150dp&quot;&lt;/span&gt; android:layout_marginTop=&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(0, 136, 0); box-sizing: border-box;&quot;&gt;&quot;10dp&quot;&lt;/span&gt; android:background=&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(0, 136, 0); box-sizing: border-box;&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot; style=&quot;color: rgb(102, 0, 102); box-sizing: border-box;&quot;&gt;@drawable&lt;/span&gt;/bg&quot;&lt;/span&gt;/&gt; &lt;ImageButton android:layout_width=&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(0, 136, 0); box-sizing: border-box;&quot;&gt;&quot;150dp&quot;&lt;/span&gt; android:layout_height=&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(0, 136, 0); box-sizing: border-box;&quot;&gt;&quot;150dp&quot;&lt;/span&gt; android:layout_marginTop=&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(0, 136, 0); box-sizing: border-box;&quot;&gt;&quot;10dp&quot;&lt;/span&gt; android:background=&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(0, 136, 0); box-sizing: border-box;&quot;&gt;&quot;&lt;span class=&quot;hljs-variable&quot; style=&quot;color: rgb(102, 0, 102); box-sizing: border-box;&quot;&gt;@drawable&lt;/span&gt;/bg&quot;&lt;/span&gt;/&gt;&lt;/code&gt;&lt;ul class=&quot;pre-numbering&quot; style=&quot;box-sizing: border-box; position: absolute; width: 50px; top: 0px; left: 0px; margin: 0px; padding: 6px 0px 40px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(221, 221, 221); list-style: none; text-align: right; background-color: rgb(238, 238, 238);&quot;&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;1&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;2&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;3&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;4&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;5&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;6&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;7&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;8&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;9&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;10&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;11&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;12&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;13&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;14&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;15&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;16&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;17&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;18&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;19&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;20&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;21&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;22&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;23&lt;/li&gt;&lt;/ul&gt;&lt;ul class=&quot;pre-numbering&quot; style=&quot;box-sizing: border-box; position: absolute; width: 50px; top: 0px; left: 0px; margin: 0px; padding: 6px 0px 40px; border-right-width: 1px; border-right-style: solid; border-right-color: rgb(221, 221, 221); list-style: none; text-align: right; background-color: rgb(238, 238, 238);&quot;&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;1&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;2&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;3&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;4&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;5&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;6&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;7&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;8&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;9&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;10&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;11&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;12&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;13&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;14&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;15&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;16&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;17&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;18&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;19&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;20&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;21&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;22&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; padding: 0px 5px;&quot;&gt;23&lt;/li&gt;&lt;/ul&gt; 效果如下:","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"CheckBox多选框","slug":"CheckBox","date":"2016-07-09T07:23:36.000Z","updated":"2018-03-23T07:25:09.297Z","comments":true,"path":"2016/07/09/CheckBox/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2016/07/09/CheckBox/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 转帖请注明本文出自weimeig的博客（https://blog.csdn.net/weimeig/article/details/79662379），请尊重他人的辛勤劳动成果，谢谢 应朋友们反馈的Android基础薄弱的问题，决定出一套Android基础教程，帮助大家复习，巩固Android基础，今天要讲的是Android中的CheckBox多选框。 布局文件 activity_checkbo.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot;&gt; &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;horizontal&quot;&gt; &lt;TextView android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;请选择爱好：&quot; android:layout_weight=&quot;1&quot;/&gt; &lt;CheckBox android:id=&quot;@+id/dianjing_cb&quot; android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:text=&quot;电竞&quot; /&gt; &lt;!-- android:checked=&quot;true&quot; 设置默认为选定状态 --&gt; &lt;CheckBox android:id=&quot;@+id/lvyou_cb&quot; android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;旅游&quot; android:layout_weight=&quot;1&quot;/&gt; &lt;CheckBox android:id=&quot;@+id/dushu_cb&quot; android:layout_width=&quot;0dp&quot; android:layout_height=&quot;wrap_content&quot; android:layout_weight=&quot;1&quot; android:text=&quot;读书&quot;/&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;horizontal&quot;&gt; &lt;Button android:id=&quot;@+id/all_btn&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;全选&quot;/&gt; &lt;Button android:id=&quot;@+id/notall_btn&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;全不选&quot;/&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;horizontal&quot;&gt; &lt;Button android:id=&quot;@+id/getResult_btn&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;获取内容&quot;/&gt; &lt;TextView android:id=&quot;@+id/showResult_tv&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:hint=&quot;此文本框用于显示结果&quot;/&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt; Java代码 import android.graphics.Color; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.view.View; import android.widget.Button; import android.widget.CheckBox; import android.widget.CompoundButton; import android.widget.TextView; import android.widget.Toast; import java.util.ArrayList; import java.util.List; public class MainActivity extends AppCompatActivity { private CheckBox dianJing,lvYou,duShu; private CheckBoxListener checkBoxListener; private ButtonListener btnButtonListener; private Button all,notall,getResult; private TextView showResult; private List&lt;String&gt; lists; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_checkbo); initView(); initData(); setListener(); } private void initView(){ /** * findViewById初始化控件 */ dianJing = findViewById(R.id.dianjing_cb); lvYou = findViewById(R.id.lvyou_cb); duShu = findViewById(R.id.dushu_cb); all = findViewById(R.id.all_btn); notall = findViewById(R.id.notall_btn); showResult = findViewById(R.id.showResult_tv); getResult = findViewById(R.id.getResult_btn); } private void setListener(){ /** * 绑定监听器 */ checkBoxListener = new CheckBoxListener(); btnButtonListener = new ButtonListener(); duShu.setOnCheckedChangeListener(checkBoxListener); lvYou.setOnCheckedChangeListener(checkBoxListener); dianJing.setOnCheckedChangeListener(checkBoxListener); all.setOnClickListener(btnButtonListener); notall.setOnClickListener(btnButtonListener); getResult.setOnClickListener(btnButtonListener); } class CheckBoxListener implements CompoundButton.OnCheckedChangeListener{ /** * 找到ID * @param buttonView * @param isChecked */ @Override public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) { CheckBox checkBox = (CheckBox) buttonView; switch (checkBox.getId()){ case R.id.dianjing_cb: if(isChecked){ Toast.makeText(MainActivity.this,&quot;少玩游戏多谢代码！&quot;+isChecked,1000).show(); dianJing.setTextColor(Color.RED); }else{ Toast.makeText(MainActivity.this,&quot;电竞&quot; +isChecked,1000).show(); dianJing.setTextColor(Color.BLACK); } break; case R.id.lvyou_cb: Toast.makeText(MainActivity.this,&quot;旅游&quot; +isChecked,1000).show(); break; case R.id.dushu_cb: Toast.makeText(MainActivity.this,&quot;读书&quot; +isChecked,1000).show(); break; } } } private void initData(){ /** * 获取生成集合对象 */ lists = new ArrayList&lt;String&gt;(); } class ButtonListener implements View.OnClickListener{ @Override public void onClick(View v) { switch (v.getId()){ case R.id.all_btn: dianJing.setChecked(true); lvYou.setChecked(true); duShu.setChecked(true); break; case R.id.notall_btn: dianJing.setChecked(false); lvYou.setChecked(false); duShu.setChecked(false); break; case R.id.getResult_btn: if(dianJing.isChecked()){ lists.add(dianJing.getText().toString()); } if(lvYou.isChecked()){ lists.add(lvYou.getText().toString()); } if(duShu.isChecked()){ lists.add(duShu.getText().toString()); } showResult.setText(lists.toString()); lists.clear(); break; } } } }","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"RadioGroup和RadioButton单选框","slug":"RadioGroupRadioBtn","date":"2016-07-08T07:21:33.000Z","updated":"2018-03-23T07:23:05.440Z","comments":true,"path":"2016/07/08/RadioGroupRadioBtn/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2016/07/08/RadioGroupRadioBtn/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 转帖请注明本文出自weimeig的博客（https://blog.csdn.net/weimeig/article/details/79662567），请尊重他人的辛勤劳动成果，谢谢 应朋友们反馈的Android基础薄弱的问题，决定出一套Android基础教程，帮助大家复习，巩固Android基础，今天要讲的是Android中的RadioGroup和RadioButton单选框。 布局文件 activity_radiobutton.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot;&gt; &lt;!-- 1、RadioButton是圆形单选 2、RadioRroup是可以容纳多个RadioButton的容器 *在RadioGroup中的RadioButton控件可以有多个，但同时有且仅有一个可以被选中 --&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;请选择性别&quot;/&gt; &lt;RadioGroup android:id=&quot;@+id/sex_rg&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;horizontal&quot;&gt; &lt;RadioButton android:id=&quot;@+id/Male_rb&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;男&quot;/&gt; &lt;RadioButton android:id=&quot;@+id/FeMale_rb&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;女&quot;/&gt; &lt;/RadioGroup&gt; &lt;/LinearLayout&gt; Java代码 import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.util.Log; import android.widget.RadioButton; import android.widget.RadioGroup; public class MainActivity extends AppCompatActivity { private RadioGroup rg; private RadioButton Male_rb,FeMale_rb; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_radiobutton); initView(); rg.setOnCheckedChangeListener(new MyRadioButtonListener());//绑定监听器 } private void initView() { rg = findViewById(R.id.sex_rg); Male_rb = findViewById(R.id.Male_rb); FeMale_rb =findViewById(R.id.FeMale_rb); } class MyRadioButtonListener implements RadioGroup.OnCheckedChangeListener{ @Override public void onCheckedChanged(RadioGroup group, int checkedId) { //选中状态改变时被触发 switch (checkedId){ case R.id.Male_rb: //当用户选择女性时 Log.i(&quot;sex&quot;,&quot;当前用户选择&quot; +Male_rb.getText().toString()); break; case R.id.FeMale_rb: //当用户选择男性时 Log.i(&quot;sex&quot;,&quot;当前用户选择&quot; +FeMale_rb.getText().toString()); break; } } } }","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"ToggleButton开关按钮","slug":"ToggleButton","date":"2016-07-06T07:19:45.000Z","updated":"2018-03-23T07:20:44.213Z","comments":true,"path":"2016/07/06/ToggleButton/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2016/07/06/ToggleButton/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。转帖请注明本文出自weimeig的博客（https://blog.csdn.net/weimeig/article/details/79663037），请尊重他人的辛勤劳动成果，谢谢 应朋友们反馈的Android基础薄弱的问题，决定出一套Android基础教程，帮助大家复习，巩固Android基础，今天要讲的是Android中的ToggleButton开关按钮。 布局文件 activity_togglebutton.xm &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot;&gt; &lt;TextView android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;你今天开心吗？&quot;/&gt; &lt;ImageView android:id=&quot;@+id/happy_iv&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:src=&quot;@mipmap/ic_launcher&quot;/&gt; &lt;ToggleButton android:id=&quot;@+id/tb&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:checked=&quot;true&quot; android:textOff=&quot;不开心&quot; android:textOn=&quot;开心&quot;/&gt; &lt;/LinearLayout&gt; Java文件 import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.util.Log; import android.view.View; import android.widget.ImageView; import android.widget.RadioButton; import android.widget.RadioGroup; import android.widget.TextView; import android.widget.Toast; import android.widget.ToggleButton; public class MainActivity extends AppCompatActivity { private ToggleButton mToggleButton; private TextView mTextView; private ImageView mImageView; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_togglebutton); mImageView = findViewById(R.id.happy_iv); mToggleButton = findViewById(R.id.tb); mToggleButton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { if(mToggleButton.isChecked()){ Toast.makeText(MainActivity.this,mToggleButton.getText().toString(),1000).show(); mImageView.setImageResource(R.mipmap.ic_launcher);//设置ImageView控件图片所显示的内容 }else{ Toast.makeText(MainActivity.this,mToggleButton.getText().toString(),1000).show(); mImageView.setImageResource(R.drawable.ic_launcher_foreground);//设置ImageView控件图片所显示的内容 } } }); } }","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"SeekerBar、ProgressBar、RatingBar进度条的基本使用","slug":"SeekRatingProBar","date":"2016-07-05T07:17:53.000Z","updated":"2018-03-23T07:19:20.606Z","comments":true,"path":"2016/07/05/SeekRatingProBar/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2016/07/05/SeekRatingProBar/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 转帖请注明本文出自weimeig的博客（https://blog.csdn.net/weimeig/article/details/79665512），请尊重他人的辛勤劳动成果，谢谢 应朋友们反馈的Android基础薄弱的问题，决定出一套Android基础教程，帮助大家复习，巩固Android基础，今天要讲的是Android中的SeekerBar、ProgressBar、RatingBar进度条的基本使用。 SeekerBar拖拽进度条 activity_seekbar.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot;&gt; &lt;SeekBar android:id=&quot;@+id/seekbar&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; /&gt; &lt;/LinearLayout&gt; Java代码 import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.util.Log; import android.widget.SeekBar; public class MainActivity extends AppCompatActivity { private SeekBar seekBar; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_seekbar); seekBar = findViewById(R.id.seekbar); seekBar.setMax(100);//设置最大进度值 seekBar.setProgress(30);//设置当前进度 seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() { @Override public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) { //将在结束拖拽进度条时被触发 /** * 将在进度发生变化时被触发 * 1、当前绑定的seekBar对象 * 2、当前进度数值 * 3、是否为用户手动触发 */ Log.i(&quot;progress&quot;,seekBar.getProgress() + &quot;&quot;); } @Override public void onStartTrackingTouch(SeekBar seekBar) { //将在开始拖拽进度条时被触发 Log.i(&quot;progress&quot;,seekBar.getProgress() + &quot;&quot;); } @Override public void onStopTrackingTouch(SeekBar seekBar) { //将在结束拖拽进度条时被触发 Log.i(&quot;progress&quot;,seekBar.getProgress() + &quot;&quot;); } }); } } ProgressBar圆形进度条 activity_progressbar.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot;&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;默认圆形&quot;/&gt; &lt;ProgressBar android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; /&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;超大号圆形&quot;/&gt; &lt;ProgressBar android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; style=&quot;?android:attr/progressBarStyleLarge&quot;/&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;小号圆形&quot;/&gt; &lt;ProgressBar android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; style=&quot;?android:attr/progressBarStyleSmall&quot;/&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;水平方向--长条形&quot;/&gt; &lt;ProgressBar android:id=&quot;@+id/progressBar_pb&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; style=&quot;?android:attr/progressBarStyleHorizontal&quot; android:max=&quot;100&quot; android:progress=&quot;30&quot; android:secondaryProgress=&quot;50&quot;/&gt; &lt;!-- max 最大进度 progress 当前进度 secondaryProgress 次要进度 --&gt; &lt;Button android:id=&quot;@+id/btn_01&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;增加第一进度&quot;/&gt; &lt;Button android:id=&quot;@+id/btn_02&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;增加第二进度&quot;/&gt; &lt;/LinearLayout&gt; Java代码 import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.view.View; import android.widget.Button; import android.widget.ProgressBar; import android.widget.SeekBar; public class MainActivity extends AppCompatActivity { private ProgressBar mProgressBar; private Button btn01,btn02; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_progressbar); initView(); mProgressBar.setMax(100); mProgressBar.setProgress(30); mProgressBar.setSecondaryProgress(40); ButtonListener mButtonListener = new ButtonListener(); btn01.setOnClickListener(mButtonListener); btn02.setOnClickListener(mButtonListener); } private void initView() { mProgressBar = (ProgressBar) findViewById(R.id.progressBar_pb); btn01 = (Button)findViewById(R.id.btn_01); btn02 =(Button) findViewById(R.id.btn_02); } class ButtonListener implements View.OnClickListener{ @Override public void onClick(View v) { switch (v.getId()){ case R.id.btn_01: mProgressBar.incrementProgressBy(20);//累加首要进度条的进度值 break; case R.id.btn_02: mProgressBar.incrementSecondaryProgressBy(40);//累加次要进度条的进度值 break; } } } } RatingBar星形进度条 &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;RatingBar android:id=&quot;@+id/ratingBar_rb&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:isIndicator=&quot;false&quot; android:numStars=&quot;5&quot; android:stepSize=&quot;0.5&quot;/&gt; &lt;!-- isIndicator指示器，ture不允许用户手动改动 stepSize设置0.5时，手动可选半颗星，numStars星星总数 --&gt; &lt;/RelativeLayout&gt; Java代码 import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.view.View; import android.widget.Button; import android.widget.ProgressBar; import android.widget.RatingBar; import android.widget.SeekBar; public class MainActivity extends AppCompatActivity { private RatingBar mRatingBar; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_ratingbar); mRatingBar = findViewById(R.id.ratingBar_rb); mRatingBar.setOnRatingBarChangeListener(new RatingBar.OnRatingBarChangeListener() { @Override public void onRatingChanged(RatingBar ratingBar, float rating, boolean fromUser) { /** * 1、当前绑定的ratingBar * 2、当前ratingBar评分的进度 * 3、是否由用户评分 */ System.out.println(&quot;当前ratingBar：评分&quot; + rating +&quot;是否来自用户&quot; + fromUser +&quot;每次评分的刻度&quot; +ratingBar.getStepSize()); } }); } }","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"DatePicker和TimePicker时间和日期选择器","slug":"DateTimePicker","date":"2016-07-03T07:16:11.000Z","updated":"2018-03-23T07:17:05.419Z","comments":true,"path":"2016/07/03/DateTimePicker/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2016/07/03/DateTimePicker/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 转帖请注明本文出自weimeig的博客（https://blog.csdn.net/weimeig/article/details/79666458），请尊重他人的辛勤劳动成果，谢谢 应朋友们反馈的Android基础薄弱的问题，决定出一套Android基础教程，帮助大家复习，巩固Android基础，今天要讲的是Android中的DatePicker和TimePicker时间和日期选择器。 xml文件 &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot;&gt; &lt;TimePicker android:id=&quot;@+id/timePicker_tp&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot;&gt; &lt;/TimePicker&gt; &lt;DatePicker android:id=&quot;@+id/datePicker_tp&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot;&gt; &lt;/DatePicker&gt; &lt;TextView android:id=&quot;@+id/textView_tv&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;显示当前日期&quot;/&gt; &lt;/LinearLayout&gt; Java代码 import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.widget.DatePicker; import android.widget.TextView; import android.widget.TimePicker; import java.util.Calendar; public class MainActivity extends AppCompatActivity { private TimePicker mTimePicker; private DatePicker mDatePicker; private TextView mTextView; private int Year,Month,Day,Hour,Minute; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); initView(); getCurrentTime(); } private void setPicker(){ //设置时间选择器为24小时制 mTimePicker.setIs24HourView(true); //设置时间选择器为当前时间 mTimePicker.setCurrentHour(Hour);//小时 mTimePicker.setCurrentMinute(Minute);//分钟 mTimePicker.setOnTimeChangedListener(new TimePicker.OnTimeChangedListener() { @Override public void onTimeChanged(TimePicker view, int hourOfDay, int minute) { //TimePicker 对象 hourOfDay 小时 minute 分钟 //当时间选择器发生改变时触发 System.out.println(&quot;From TimePicker:&quot; +hourOfDay + &quot;:&quot; +minute); } }); mDatePicker.init(Year, Month, Day, new DatePicker.OnDateChangedListener() { @Override public void onDateChanged(DatePicker view, int year, int monthOfYear, int dayOfMonth) { //当日期选择器发生改变时触发 System.out.println(&quot;From DatePicker:&quot; + year + &quot;/&quot; +(monthOfYear+1) +&quot;/&quot; +dayOfMonth);//国外计时方法月份从0开始算,因此要在月份后面+1 } }); } private void getCurrentTime() { //获取系统当前时间 Calendar calendar = Calendar.getInstance(); Year = calendar.get(Calendar.YEAR); Month = calendar.get(Calendar.MONTH); Day = calendar.get(Calendar.DAY_OF_MONTH); Hour = calendar.get(Calendar.HOUR); Minute = calendar.get(Calendar.MINUTE); } private void initView() { mTimePicker = (TimePicker) findViewById(R.id.timePicker_tp); mDatePicker = (DatePicker) findViewById(R.id.datePicker_tp); mTextView = (TextView) findViewById(R.id.textView_tv); } }","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"Android中LinearLayout布局的常用属性总结读书笔记","slug":"LinearLayout","date":"2016-07-02T07:08:06.000Z","updated":"2018-03-23T07:15:35.127Z","comments":true,"path":"2016/07/02/LinearLayout/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2016/07/02/LinearLayout/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 转帖请注明本文出自weimeig的博客（https://blog.csdn.net/weimeig/article/details/79667479），请尊重他人的辛勤劳动成果，谢谢 应朋友们反馈的Android基础薄弱的问题，决定出一套Android基础教程，帮助大家复习，巩固Android基础，今天要讲的是Android中的Android中LinearLayout布局的常用属性总结读书笔记。 基本属性要求 &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot;&gt; &lt;/LinearLayout android:orientation 决定是水平排列或是垂直排列 vertical 垂直排列 horizontal 水平排列 垂直排列 Button &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; &gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;Button 1&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;Button 2&quot; /&gt; &lt;/LinearLayout&gt; 水平排列 Button &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; &gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;Button 1&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;Button 2&quot; /&gt; &lt;/LinearLayout&gt; 重心设定 &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; android:gravity=&quot;left&quot;&gt; &lt;/LinearLayout&gt; android:gravity 设定框架的内容的放置方向 center 水平垂直皆置中 center_vertical 垂直置中 center_horizontal 水平置中 top 置顶 left 置左 bottom 置底 right 置右 水平、垂直置中 &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; android:gravity=&quot;center_vertical&quot;&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;Button 1&quot; /&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; android:gravity=&quot;center_horizontal&quot;&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;Button 1&quot; /&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; android:gravity=&quot;center&quot;&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;Button 1&quot; /&gt; &lt;/LinearLayout&gt; 透过 OR 运算子组合重心 &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; android:gravity=&quot;top|right&quot;&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;Button 1&quot; /&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; android:gravity=&quot;bottom|left&quot;&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;Button 1&quot; /&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; android:gravity=&quot;center_vertical|center_horizontal&quot;&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;Button 1&quot; /&gt; &lt;/LinearLayout&gt; 比例分配 &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;horizontal&quot;&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;Button 1&quot; android:layout_weight=&quot;1&quot;/&gt; &lt;/LinearLayout&gt; android:layout_weight 子元件或子框架的比重。 LinearLayout 下的子元件或子框架，才能设定这项属性。 等比例分配 &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;horizontal&quot;&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;Button 1&quot; android:layout_weight=&quot;1&quot;/&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;Button 2&quot; android:layout_weight=&quot;1&quot;/&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;Button 3&quot; android:layout_weight=&quot;1&quot;/&gt; &lt;/LinearLayout&gt; 比重都是 1，所以大小相同。 非等比例分配 &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;horizontal&quot;&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;Button 1&quot; android:layout_weight=&quot;.10&quot;/&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;Button 2&quot; android:layout_weight=&quot;.20&quot;/&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;Button 3&quot; android:layout_weight=&quot;.70&quot;/&gt; &lt;/LinearLayout&gt; 10 代表 0.10 20 代表 0.20 70 代表 0.70 合起来刚好是 1 ，作 100% 分配。","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"android布局中几个距离单位的区别：px、dp、sp","slug":"DistanceUnit","date":"2016-07-01T07:05:46.000Z","updated":"2018-03-23T07:15:23.466Z","comments":true,"path":"2016/07/01/DistanceUnit/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2016/07/01/DistanceUnit/","excerpt":"","text":"一、px 像素，我们经常说的400*800这种的就是像素，这个比较好理解。 二、dp 要理解dp，首先要先引入dpi这个概念，dpi全称是dots per inch，对角线每英寸的像素点的个数，所以，它的计算公式如下： 比如height和width即为长宽的像素，平方和即为对角线的像素个数，size即我们常说的5寸手机、4寸手机中的5和4，即对角线的长度。 显然，一样是5寸的手机，分辨率越高，dpi越高。 dp也叫dip，是device independent pixels。设备不依赖像素的一个单位。 定义在dpi=160的设备上的1px=1dp，所以px和dp的转换公式为：px = dp * (dpi/160) 这样一来，如图2-1，用了像素的单位之后，在不同的设备显示出了不同的效果；在图2-2中，用了dp作为单位之后，dp相同之后，在不同的设备里面，转成px之后是相等的，所以就不会出现图2-1的情况。(图片来源千峰Mars) 三、sp 全称是scaled pixels。这个主要是用于项目中的字体大小。使用sp作为单位，当用户通过手机设置修改手机字体的时候，sp为单位的字体也会跟着改变。 总结：Android项目中的控件大小主要是使用dp作为单位，字体大小主要是用sp作为单位。 但不是强制要求，比如有的需求是需要字体符合系统字体大小用sp，但有的需求可能需要字体用dp，这样更适合屏幕大小，建议根据自身需求选择，常用的字体大小主要是用sp作为单位。","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"Dialog自定义对话框","slug":"DialogBox","date":"2016-06-27T05:10:23.000Z","updated":"2018-06-09T04:31:39.748Z","comments":true,"path":"2016/06/27/DialogBox/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2016/06/27/DialogBox/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 一、自定义对话框实现步骤： 1.自定义一个类，继承于Dialog类，在构造方法中调用setContentView(R.layout.xx)来设定对话框的布局 2.设定自定义对话框的风格(不显示标题栏，不显示背景)，由于继承了Dialog，默认添加了Dialog标题的一栏 3.找到res–&gt;values–&gt;styles.xml设置风格 4.调用含设定对话框风格参数的构造 5.对自定义对话框中的某些控件添加事件 6.实例化自定义的对话框，显示 一、新建对话框的布局文件（即弹出的对话框的样子） layout.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;vertical&quot; android:gravity=&quot;center_horizontal&quot; android:background=&quot;#FFFF00&quot; android:padding=&quot;10dp&quot;&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;提示&quot; android:textSize=&quot;34sp&quot; android:textStyle=&quot;bold&quot; android:layout_marginTop=&quot;30dp&quot;/&gt; &lt;View android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;2dp&quot; android:background=&quot;#ffffff&quot; android:layout_marginTop=&quot;10dp&quot; android:layout_marginBottom=&quot;10dp&quot;/&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;您确定要退出当前程序么&quot; android:layout_marginTop=&quot;10dp&quot; android:textSize=&quot;20dp&quot;/&gt; &lt;LinearLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;horizontal&quot; android:gravity=&quot;center_horizontal&quot;&gt; &lt;Button android:id=&quot;@+id/btn1&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;否&quot; android:onClick=&quot;onClick&quot; /&gt; &lt;Button android:id=&quot;@+id/btn2&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;是&quot; android:onClick=&quot;onClick&quot; /&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt; 二、设置弹出对话框的点击按钮 activity.xml &lt;?xml version=”1.0” encoding=”utf-8”?&gt; &lt;Button android:id=&quot;@+id/btn1&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;自定义对话框&quot; android:onClick=&quot;onClick&quot; /&gt; &lt;/LinearLayout&gt; 三、设置对话框的风格样式 在style.xml中添加如下代码 true @android:color/transparent 因为自定义的MyDialog是继承于Dialog，所以会默认添加了Dialog的标题这一栏非常不美观，因此使用重新自定义对话框的风格样式。name=”android:windowNoTitle”设置为true代表无窗口标题，android:windowBackground表示对话框背景，@android:color/transparent为使用透明色。 完整的style文件在app–&gt;res–&gt;values–&gt;styles.xml，完整代码如下： styles.xml &lt;resources&gt; &lt;!-- Base application theme. --&gt; &lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt; &lt;!-- Customize your theme here. --&gt; &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt; &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorPrimaryDark&lt;/item&gt; &lt;item name=&quot;colorAccent&quot;&gt;@color/colorAccent&lt;/item&gt; &lt;/style&gt; &lt;style name=&quot;mydialog&quot; parent=&quot;android:style/Theme.Dialog&quot;&gt; &lt;item name=&quot;android:windowNoTitle&quot;&gt;true&lt;/item&gt; &lt;item name=&quot;android:windowBackground&quot;&gt;@android:color/transparent&lt;/item&gt; &lt;/style&gt; &lt;/resources&gt; 四、建立MyDialog类继承Dialog类实现对话框管理 MyDialog.java package com.administrator.dialogtest; import android.app.Dialog; import android.content.Context; import android.support.annotation.NonNull; import android.view.View; import android.widget.Button; /** * Created by Administrator on 2018/5/7. */ public class MyDialog extends Dialog { public MyDialog(@NonNull Context context) { // super(context);//父类的满足子参数形式的构造方法 super(context,R.style.mydialog);//调用父类的含参构造方法，从而将风格设置到mydialog的样式上面 setContentView(R.layout.layout);//设置对话框的 //对自定义Dialog中的按钮添加点击事件 Button yesButton = (Button)findViewById(R.id.btn2); Button noButton = (Button)findViewById(R.id.btn1); noButton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { dismiss();//控制对话框消失 } }); yesButton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { System.exit(0); } }); } // //也可以直接重写含两个参数的构造方法，外部传入样式 // public MyDialog(@NonNull Context context, int themeResId) { // super(context, themeResId); // setContentView(R.layout.layout); // } //外部调用时，MyDialog dialog = new MyDialog(this,R.style.mydialog); //dialog.show(); } 五、在MainActivity中调用 MainActivity.java package com.administrator.dialogtest; import android.app.AlertDialog; import android.app.ProgressDialog; import android.content.DialogInterface; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.util.Log; import android.view.View; import android.widget.Button; import android.widget.EditText; import android.widget.ProgressBar; import android.widget.Toast; public class MainActivity extends AppCompatActivity implements View.OnClickListener{ private Button btn1; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Button btn = findViewById(R.id.btn1); } @Override public void onClick(View v) { switch (v.getId()) { case R.id.btn1: //1.自定义一个类，继承于Dialog类，在构造方法中调用setContentView(R.layout.xx)来设定对话框的布局 //2.设定自定义对话框的风格(不显示标题栏，不显示背景)，由于继承了Dialog，默认添加了Dialog标题的一栏 //3.找到res--&gt;values--&gt;styles.xml设置风格 //4.调用含设定对话框风格参数的构造 //5.对自定义对话框中的某些控件添加事件 //6.实例化自定义的对话框，显示 MyDialog dialog = new MyDialog(this); dialog.show(); break; } } } 二、添加适配器案例 新建一个布局array_item_layout.xml作为适配器所引用的资源数据源 array_item_layout.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;horizontal&quot; android:padding=&quot;10dp&quot; android:gravity=&quot;center_vertical&quot;&gt; &lt;ImageView android:layout_width=&quot;40dp&quot; android:layout_height=&quot;40dp&quot; android:src=&quot;@mipmap/ic_launcher&quot;/&gt; &lt;TextView android:id=&quot;@+id/item_txt&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;测试&quot; android:layout_marginLeft=&quot;15dp&quot;/&gt; &lt;/LinearLayout&gt;` 在activity_main.xml中添加触发对话框的点击按钮布局 activity_main.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;vertical&quot; android:gravity=&quot;center_horizontal&quot; android:padding=&quot;10dp&quot;&gt; &lt;Button android:id=&quot;@+id/btn2&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;适配器案例&quot; android:onClick=&quot;onClick&quot; /&gt; &lt;/LinearLayout&gt; Java文件中创建适配器并调用 MainActivity.java package com.administrator.dialogtest; import android.app.AlertDialog; import android.app.ProgressDialog; import android.content.DialogInterface; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.util.Log; import android.view.View; import android.widget.ArrayAdapter; import android.widget.Button; import android.widget.EditText; import android.widget.ProgressBar; import android.widget.Toast; public class MainActivity extends AppCompatActivity implements View.OnClickListener{ private Button btn2; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Button btn2 = findViewById(R.id.btn1); } @Override public void onClick(View v) { switch (v.getId()) { case R.id.btn2: showArrayDialog(); break; } } private void showArrayDialog() { final String[] items = {&quot;Java&quot;,&quot;Mysql&quot;,&quot;Android&quot;,&quot;Html&quot;,&quot;C&quot;,&quot;JavaScript&quot;}; //数组适配器 //参数1：环境 //参数2：布局资源索引，指的是每一项数据所呈现的样式android.R.layout.xxx //参数3：数据源 // ArrayAdapter adapter = new ArrayAdapter(this,android.R.layout.simple_dropdown_item_1line,items); //参数4：数据源 //参数3：int textViewId 指定文本数据源需要放在布局中对应id文本控制的位置 //参数2：布局资源索引 //参数1：环境 ArrayAdapter adapter = new ArrayAdapter(this,R.layout.array_item_layout,R.id.item_txt,items); AlertDialog.Builder builder = new AlertDialog.Builder(this) .setTitle(&quot;请选择：&quot;) //参数1：适配器对象(对数据显示样式的规则制定器) //参数2：监听器 .setAdapter(adapter, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { Toast.makeText(MainActivity.this,items[which],Toast.LENGTH_SHORT).show(); dialog.dismiss();//点击后，让对话框消失 } }); builder.show(); } }","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"Android中EditText的常见属性","slug":"AndroidEditText","date":"2016-06-23T00:57:02.000Z","updated":"2018-06-09T08:23:46.221Z","comments":true,"path":"2016/06/23/AndroidEditText/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2016/06/23/AndroidEditText/","excerpt":"","text":"EditText介绍: EditText 在开发中也是经常用到的控件，也是一个比较必要的组件，可以说它是用户跟Android应用进行数据传输的窗户，比如实现一个登陆界面，需要用户输入账号密码，然后我们获取用户输入的内容，提交给服务器进行判断。 EditText实例:开发中常用的登录界面 首先我们来看布局文件:activity_main.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot;&gt; &lt;EditText android:id=&quot;@+id/et_phone&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginLeft=&quot;20dp&quot; android:layout_marginRight=&quot;20dp&quot; android:background=&quot;@null&quot; android:inputType=&quot;number&quot; android:maxLength=&quot;11&quot; android:hint=&quot;请输入手机号&quot; android:drawablePadding=&quot;10dp&quot; android:padding=&quot;10dp&quot; android:drawableLeft=&quot;@mipmap/icon_phone&quot; android:drawableBottom=&quot;@drawable/shape_et_bottom_line&quot; android:layout_marginTop=&quot;20dp&quot;/&gt; &lt;EditText android:id=&quot;@+id/et_password&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginLeft=&quot;20dp&quot; android:layout_marginRight=&quot;20dp&quot; android:layout_marginTop=&quot;10dp&quot; android:background=&quot;@null&quot; android:inputType=&quot;textPassword&quot; android:maxLength=&quot;16&quot; android:padding=&quot;10dp&quot; android:drawablePadding=&quot;10dp&quot; android:hint=&quot;请输入密码&quot; android:drawableBottom=&quot;@drawable/shape_et_bottom_line&quot; android:drawableLeft=&quot;@mipmap/icon_password&quot;/&gt; &lt;TextView android:id=&quot;@+id/tv_login&quot; style=&quot;@style/Widget.AppCompat.Button.Colored&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;50dp&quot; android:layout_marginLeft=&quot;10dp&quot; android:layout_marginRight=&quot;10dp&quot; android:layout_marginTop=&quot;30dp&quot; android:text=&quot;登 录&quot; android:textColor=&quot;#ffffffff&quot; android:textSize=&quot;18sp&quot; /&gt; &lt;/LinearLayout&gt; 运行效果图如下: 这两个输入框的用的的大部分属性都在上面的表格中了，我这里解决下没有说过的属性。 android:background=&quot;@null&quot; 输入框无背景 android:drawableBottom=&quot;@drawable/shape_et_bottom_line&quot; 底部引入一个shape布局文件，这个布局文件就是输入框的下划线。 shape_et_bottom_line.xml内容如下: &lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;rectangle&quot; &gt; &lt;solid android:color=&quot;#1E7EE3&quot; /&gt; &lt;size android:height=&quot;1dp&quot; android:width=&quot;500dp&quot;/&gt; &lt;/shape&gt; EditeText还有哪些功能？ 1.监听用户输入的内容.有这样一个场景，一个搜索框，只要用户输入了内容就去请求服务器，于是我们在Activity里面监听EditeText文本改变事件。 EditText etOne= (EditText) findViewById(R.id.et_phone); etOne.addTextChangedListener(new TextWatcher() { @Override public void beforeTextChanged(CharSequence s, int start, int count, int after) { Log.i(&quot;Ansen&quot;,&quot;内容改变之前调用:&quot;+s); } @Override public void onTextChanged(CharSequence s, int start, int before, int count) { Log.i(&quot;Ansen&quot;,&quot;内容改变，可以去告诉服务器:&quot;+s); } @Override public void afterTextChanged(Editable s) { Log.i(&quot;Ansen&quot;,&quot;内容改变之后调用:&quot;+s); } }); 首先我们通过id找到EditText控件，并且添加监听函数，内部内实现TextWatcher接口，重写三个方法。我们可以在onTextChanged方法中告诉服务器我要搜索的内容。","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"相对布局的常用属性","slug":"RelLayoutAttri","date":"2016-06-02T02:10:29.000Z","updated":"2018-06-09T08:28:34.116Z","comments":true,"path":"2016/06/02/RelLayoutAttri/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2016/06/02/RelLayoutAttri/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; &gt; &lt;TextView android:id=&quot;@+id/textView01&quot; android:layout_width=&quot;50dp&quot; android:layout_height=&quot;50dp&quot; android:layout_centerInParent=&quot;true&quot; android:background=&quot;#000000&quot;/&gt; &lt;TextView android:id=&quot;@+id/textView02&quot; android:layout_width=&quot;50dp&quot; android:layout_height=&quot;50dp&quot; android:layout_below=&quot;@id/textView01&quot; android:layout_toLeftOf=&quot;@id/textView01&quot; android:background=&quot;#000000&quot;/&gt; &lt;TextView android:id=&quot;@+id/textView03&quot; android:layout_width=&quot;50dp&quot; android:layout_height=&quot;50dp&quot; android:layout_centerInParent=&quot;true&quot; android:layout_below=&quot;@id/textView01&quot; android:layout_toRightOf=&quot;@id/textView01&quot; android:background=&quot;#000000&quot;/&gt; &lt;TextView android:id=&quot;@+id/textView04&quot; android:layout_width=&quot;50dp&quot; android:layout_height=&quot;50dp&quot; android:layout_centerInParent=&quot;true&quot; android:layout_above=&quot;@id/textView01&quot; android:layout_toRightOf=&quot;@id/textView01&quot; android:background=&quot;#000000&quot;/&gt; &lt;TextView android:id=&quot;@+id/textView05&quot; android:layout_width=&quot;50dp&quot; android:layout_height=&quot;50dp&quot; android:layout_centerInParent=&quot;true&quot; android:layout_above=&quot;@id/textView01&quot; android:layout_toLeftOf=&quot;@id/textView01&quot; android:background=&quot;#000000&quot;/&gt; &lt;TextView android:layout_width=&quot;50dp&quot; android:layout_height=&quot;50dp&quot; android:background=&quot;#000000&quot;/ /&gt; &lt;TextView android:layout_width=&quot;50dp&quot; android:layout_height=&quot;50dp&quot; android:background=&quot;#000000&quot; android:layout_alignParentBottom=&quot;true&quot; android:layout_alignParentRight=&quot;true&quot; /&gt; &lt;TextView android:layout_width=&quot;50dp&quot; android:layout_height=&quot;50dp&quot; android:background=&quot;#000000&quot; android:layout_alignParentBottom=&quot;true&quot; android:layout_alignParentLeft=&quot;true&quot; /&gt; &lt;TextView android:layout_width=&quot;50dp&quot; android:layout_height=&quot;50dp&quot; android:background=&quot;#000000&quot; android:layout_alignParentRight=&quot;true&quot; /&gt; &lt;TextView android:layout_width=&quot;50dp&quot; android:layout_height=&quot;50dp&quot; android:layout_centerHorizontal=&quot;true&quot; android:background=&quot;#000000&quot;/&gt; &lt;TextView android:layout_width=&quot;50dp&quot; android:layout_height=&quot;50dp&quot; android:layout_centerHorizontal=&quot;true&quot; android:layout_alignParentBottom=&quot;true&quot; android:background=&quot;#000000&quot;/&gt; &lt;TextView android:layout_width=&quot;50dp&quot; android:layout_height=&quot;50dp&quot; android:layout_centerVertical=&quot;true&quot; android:background=&quot;#000000&quot;/&gt; &lt;TextView android:layout_width=&quot;50dp&quot; android:layout_height=&quot;50dp&quot; android:layout_centerVertical=&quot;true&quot; android:layout_alignParentRight=&quot;true&quot; android:background=&quot;#000000&quot;/&gt; &lt;/RelativeLayout&gt;","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"FrameLayout帧布局","slug":"FrameLayout","date":"2016-06-02T01:30:26.000Z","updated":"2018-06-09T07:55:06.393Z","comments":true,"path":"2016/06/02/FrameLayout/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2016/06/02/FrameLayout/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 帧布局 &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:foreground=&quot;@mipmap/ic_launcher&quot; android:foregroundGravity=&quot;center&quot; &gt; &lt;TextView android:layout_width=&quot;400dp&quot; android:layout_height=&quot;400dp&quot; android:background=&quot;#ff0000&quot; android:layout_gravity=&quot;center&quot; /&gt; &lt;!--android:layout_gravity=&quot;center_horizontal|center_vertical&quot;另一种写法 --&gt; &lt;TextView android:layout_width=&quot;350dp&quot; android:layout_height=&quot;350dp&quot; android:layout_gravity=&quot;center&quot; android:background=&quot;#00ff00&quot;/&gt; &lt;TextView android:layout_width=&quot;300dp&quot; android:layout_height=&quot;300dp&quot; android:layout_gravity=&quot;center&quot; android:background=&quot;#00ffff&quot;/&gt; &lt;TextView android:layout_width=&quot;250dp&quot; android:layout_height=&quot;250dp&quot; android:layout_gravity=&quot;center&quot; android:background=&quot;#ff00ff&quot;/&gt; &lt;TextView android:layout_width=&quot;200dp&quot; android:layout_height=&quot;200dp&quot; android:layout_gravity=&quot;center&quot; android:background=&quot;#ffff00&quot; android:text=&quot;最后一个黄色的文本&quot; android:gravity=&quot;right&quot;/&gt; &lt;/FrameLayout&gt;","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"TableLayout表格布局","slug":"TableLayout","date":"2016-06-01T01:20:23.000Z","updated":"2018-06-09T07:54:36.634Z","comments":true,"path":"2016/06/01/TableLayout/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2016/06/01/TableLayout/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 表格布局 ` &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;TableLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:stretchColumns=&quot;*&quot; &gt; &lt;!--android:shrinkColumns=&quot;1&quot;设置可以收缩的列，比如某控件越来越长，以设置的这列 为牺牲，来完成某控件的效果，如果需要所有列变动，用*号 同理： android:collapseColumns=&quot;2&quot; 设置可隐藏的列 android:stretchColumns=&quot;1&quot;设置可伸展的列 --&gt; &lt;!--android:如果直接在TableLayout中添加控件，那么控件将和父容器等宽 如果想让控件出现在同一行，那么这些控件的外层一定要加一堆&lt;TableRow&gt;标签 在TableRow中的控件，宽度都是默认wrao_content android:stretchColumns=&quot;0,1,2,3&quot;该熟悉传入的数值是多少，则多少列变宽占满剩余空间 如果需要所有变宽，用*号 --&gt; &lt;EditText /&gt; &lt;TableRow&gt; &lt;Button android:text=&quot;7&quot;/&gt; &lt;Button android:text=&quot;8&quot;/&gt; &lt;Button android:text=&quot;9&quot;/&gt; &lt;Button android:text=&quot;/&quot;/&gt; &lt;/TableRow&gt; &lt;TableRow&gt; &lt;Button android:text=&quot;4&quot;/&gt; &lt;Button android:text=&quot;5&quot;/&gt; &lt;Button android:text=&quot;6&quot;/&gt; &lt;Button android:text=&quot;*&quot;/&gt; &lt;/TableRow&gt; &lt;TableRow&gt; &lt;Button android:text=&quot;1&quot;/&gt; &lt;Button android:text=&quot;2&quot;/&gt; &lt;Button android:text=&quot;3&quot;/&gt; &lt;Button android:text=&quot;-&quot;/&gt; &lt;/TableRow&gt; &lt;TableRow&gt; &lt;Button android:text=&quot;0&quot;/&gt; &lt;Button android:text=&quot;.&quot;/&gt; &lt;Button android:text=&quot;+&quot;/&gt; &lt;Button android:text=&quot;=&quot;/&gt; &lt;/TableRow&gt; &lt;Button android:text=&quot;clear&quot;/&gt; &lt;/TableLayout&gt; `","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"Activity生命周期详解","slug":"ActivityLifecycle","date":"2016-06-01T01:19:23.000Z","updated":"2018-06-09T03:39:59.850Z","comments":true,"path":"2016/06/01/ActivityLifecycle/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2016/06/01/ActivityLifecycle/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 未完待续。。。","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"Dialog八种基础对话框","slug":"Dialog","date":"2016-06-01T01:18:23.000Z","updated":"2018-06-09T07:53:24.794Z","comments":true,"path":"2016/06/01/Dialog/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2016/06/01/Dialog/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 一、简单的入门对话框 activity_main.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; android:padding=&quot;10dp&quot;&gt; &lt;Button android:id=&quot;@+id/btn1&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;普通对话框1&quot; android:onClick=&quot;onClick&quot; /&gt; &lt;Button android:id=&quot;@+id/btn2&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;普通对话框2&quot; android:onClick=&quot;onClick&quot; /&gt; &lt;/LinearLayout&gt; MainActivity.java ` package com.administrator.dialogtest; import android.app.AlertDialog; import android.content.DialogInterface; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.view.View; import android.widget.Button; import android.widget.Toast; public class MainActivity extends AppCompatActivity implements View.OnClickListener{ private Button btn1; private Button btn2; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Button btn = findViewById(R.id.btn1); Button btn2 = findViewById(R.id.btn2); } @Override public void onClick(View v) { switch (v.getId()) { case R.id.btn1: showNormalDialog(); break; case R.id.btn2: showNormalDialog2(); } } private void showNormalDialog2() { AlertDialog dialog = new AlertDialog.Builder(this).create(); dialog.setTitle(&quot;提示&quot;);//这个是无返回值方法，所以不能像第一个按钮那样一直.set下去 dialog.setMessage(&quot;请为本次课堂打分&quot;); //5 3 1 dialog.setButton(DialogInterface.BUTTON_POSITIVE, &quot;1分&quot;, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { Toast.makeText(MainActivity.this,&quot;您选择了：5分&quot;,Toast.LENGTH_SHORT).show(); } }); dialog.setButton(DialogInterface.BUTTON_NEUTRAL, &quot;5分&quot;, new DialogInterface.OnClickListener() {//这个不能传null，因为null不知道是空的Message对象还是空的OnClickListener对象 @Override public void onClick(DialogInterface dialog, int which) { } }); dialog.setButton(DialogInterface.BUTTON_NEGATIVE, &quot;3分&quot;, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { } }); //一定要调用show方法，否则对话框不展示 dialog.show(); } private void showNormalDialog() { //AlertDialog //AlerDialog的构造方法是被修饰为protected //因此包外是无法访问的，所以我们利用构造器 // AlertDialog dialog = new AlertDialog(this);//因为方法定义时候定义了受保护的，因此要使用构造器 AlertDialog.Builder builder = new AlertDialog.Builder(this); // builder.setTitle(&quot;提示&quot;).setMessage(&quot;你好&quot;).setPositiveButton()//因为每个方法的返回值都是一个builder，所以可以这样写 //设置对话框的标题 builder.setTitle(&quot;提示&quot;); //设置内容 builder.setMessage(&quot;你是否确定退出当前程序&quot;); //设置按钮 builder.setPositiveButton(&quot;确定&quot;, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { //退出当前程序 MainActivity.this.finish(); } }); builder.setNegativeButton(&quot;取消&quot;,null);//可以像上面确定按钮这样传点击事件，什么都不给为null // builder.setNeutralButton(); //创建对话框 // builder.create(); //对话框的展示方法 builder.show();//show()方法里面写了create()方法，因此不需要额外多写一次 } } 二、列表对话框和单选对话框 activity_main.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; android:padding=&quot;10dp&quot;&gt; &lt;Button android:id=&quot;@+id/btn1&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;列表对话框&quot; android:onClick=&quot;onClick&quot; /&gt; &lt;Button android:id=&quot;@+id/btn2&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;单选对话框&quot; android:onClick=&quot;onClick&quot; /&gt; &lt;/LinearLayout&gt; MainActivity.java package com.administrator.dialogtest; import android.app.AlertDialog; import android.content.DialogInterface; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.view.View; import android.widget.Button; import android.widget.Toast; public class MainActivity extends AppCompatActivity implements View.OnClickListener{ private Button btn1; private Button btn2; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Button btn = findViewById(R.id.btn1); Button btn2 = findViewById(R.id.btn2); } @Override public void onClick(View v) { switch (v.getId()) { case R.id.btn1: showListDialog(); break; case R.id.btn2: showSingleDialog(); } } /** * 单选对话框 */ // int idx = 0; private void showSingleDialog() { final String[] stars={&quot;老周&quot;,&quot;老牛&quot;,&quot;老孙&quot;,&quot;老&quot;,&quot;写不下去了&quot;}; AlertDialog.Builder builder = new AlertDialog.Builder(this) .setTitle(&quot;请选择你喜欢的明星&quot;) //参数1：选项 //参数2：默认被选项，传某个选项的索引 //参数3：被选中时的事件 .setSingleChoiceItems(stars, 0, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { // idx = which; Toast.makeText(MainActivity.this,&quot;您最喜欢的明星是：&quot;+ stars[which],Toast.LENGTH_SHORT).show(); } // }).setPositiveButton(&quot;确定&quot;,null);//如果需要点击某个按钮后消失，这样设置 // }).setPositiveButton(&quot;确定&quot;, new DialogInterface.OnClickListener() { // @Override // public void onClick(DialogInterface dialog, int which) {//这里的which和上面的不是同一个，所以要解决上面的传递下来的问题，定义一个全局变量 // Toast.makeText(MainActivity.this, &quot;您选择了：&quot; + stars[idx], Toast.LENGTH_SHORT).show(); // } // }); }); builder.show(); } /** * 列表对话框 */ private void showListDialog() { final String[] items = {&quot;我是1&quot;,&quot;我是2&quot;,&quot;我是3&quot;,&quot;我是4&quot;}; AlertDialog.Builder builder = new AlertDialog.Builder(this) .setTitle(&quot;请选择：&quot;) //设置列表项 .setItems(items, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) {//参数2：被点击项的索引 Toast.makeText(MainActivity.this, &quot;您选择了：&quot; + items[which], Toast.LENGTH_SHORT).show(); } }); builder.show(); } } 三、多选对话框和等待对话框 activity_main.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; android:padding=&quot;10dp&quot;&gt; &lt;Button android:id=&quot;@+id/btn1&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;多选对话框&quot; android:onClick=&quot;onClick&quot; /&gt; &lt;Button android:id=&quot;@+id/btn2&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;等待对话框&quot; android:onClick=&quot;onClick&quot; /&gt; &lt;/LinearLayout&gt; MainActivity.java package com.administrator.dialogtest; import android.app.AlertDialog; import android.app.ProgressDialog; import android.content.DialogInterface; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.util.Log; import android.view.View; import android.widget.Button; import android.widget.ProgressBar; import android.widget.Toast; public class MainActivity extends AppCompatActivity implements View.OnClickListener{ private Button btn1; private Button btn2; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Button btn = findViewById(R.id.btn1); Button btn2 = findViewById(R.id.btn2); } @Override public void onClick(View v) { switch (v.getId()) { case R.id.btn1: showMultiDialog(); break; case R.id.btn2: showWaitingDialog(); } } /** * 多选对话框 */ private void showMultiDialog() { final String[] sports = {&quot;篮球&quot;,&quot;网球&quot;,&quot;乒乓球&quot;,&quot;曲棍球&quot;,&quot;滑板&quot;,&quot;游泳&quot;}; final boolean[] checked = {true,false,true,true,false,false}; AlertDialog.Builder builder =new AlertDialog.Builder(this) .setTitle(&quot;你最喜欢的运动&quot;) //参数1：选项 //参数2：默认备选项(true:选中，false:未选择) //参数3：被选中时触发的事项 .setMultiChoiceItems(sports,checked , new DialogInterface.OnMultiChoiceClickListener() { @Override //参数1：对话框本身 //参数2：按钮的索引 //参数3：标志按钮是否处于被选中true(选中)false(取消选中) public void onClick(DialogInterface dialog, int which, boolean isChecked) { //无论是选中还是取消选择，都会触发onclick方法 //根据which数组下标，将isChecked的选中状态保存到数组checked // checked[which]=isChecked;//这个方法默认把这步做了。所以不需要再写 Log.e(&quot;Log&quot;, sports[which]); } }).setPositiveButton(&quot;确定&quot;, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { String msg=&quot;你的爱好是：&quot;; for (int i = 0;i&lt;checked.length;i++){ if(checked[i]){ msg += sports[i] + &quot; &quot;;//遍历刚才上面保存的选中状态的数组 } } Toast.makeText(MainActivity.this,msg,Toast.LENGTH_SHORT).show(); } }); // }); builder.show(); } /** * 等待对话框 */ private void showWaitingDialog() { //进度对话框，默认样式就是转圈 ProgressDialog dialog = new ProgressDialog(this); dialog.setTitle(&quot;我是一个等待对话框&quot;); dialog.setMessage(&quot;请等待...&quot;); // dialog.setCancelable(false);//设置是否也取消，默认是true可取消 // dialog.dismiss();//设置对话框消失 dialog.show(); } } 四、进度条对话框和输入对话框 activity_main.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot; android:padding=&quot;10dp&quot;&gt; &lt;Button android:id=&quot;@+id/btn1&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;进度条对话框&quot; android:onClick=&quot;onClick&quot; /&gt; &lt;Button android:id=&quot;@+id/btn2&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;输入对话框&quot; android:onClick=&quot;onClick&quot; /&gt; &lt;/LinearLayout&gt; MainActivity.java package com.administrator.dialogtest; import android.app.AlertDialog; import android.app.ProgressDialog; import android.content.DialogInterface; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.util.Log; import android.view.View; import android.widget.Button; import android.widget.EditText; import android.widget.ProgressBar; import android.widget.Toast; public class MainActivity extends AppCompatActivity implements View.OnClickListener{ private Button btn1; private Button btn2; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Button btn = findViewById(R.id.btn1); Button btn2 = findViewById(R.id.btn2); } @Override public void onClick(View v) { switch (v.getId()) { case R.id.btn1: showProgressDialog(); break; case R.id.btn2: showInputDialog(); } } /** * 进度条对话框 */ private void showProgressDialog() { final ProgressDialog dialog = new ProgressDialog(this); dialog.setTitle(&quot;下载中...&quot;); dialog.setMessage(&quot;请等待&quot;); dialog.setIndeterminate(false);//设置进度条模糊，感觉进度条在动,true是循环动 //设置对话框的样式为水平样式 dialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL); // dialog.setProgress(40);//设置进度 new Thread(){ public void run(){ super.run(); //让进度条从1到100运动 for(int i =1;i&lt;=100;i++){ dialog.setProgress(i); try { Thread.sleep(50); } catch (InterruptedException e) { e.printStackTrace(); } } dialog.dismiss(); } }.start(); dialog.show(); } /** * 输入对话框 */ private void showInputDialog() { final EditText editText = new EditText(this); AlertDialog.Builder builder = new AlertDialog.Builder(this) .setTitle(&quot;提示&quot;) .setView(editText)//需要传一个布局或一个View视图，也可以在资源文件夹中新建一个布局引进来 .setPositiveButton(&quot;确定&quot;, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { Toast.makeText(MainActivity.this,&quot;您输入的是：&quot;+editText.getText().toString(),Toast.LENGTH_SHORT).show(); } }); builder.show(); } }","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"GridLayout网格布局","slug":"GridLayout","date":"2016-06-01T01:15:23.000Z","updated":"2018-06-09T03:39:46.253Z","comments":true,"path":"2016/06/01/GridLayout/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2016/06/01/GridLayout/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 GridLayout网格布局 &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;GridLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:rowCount=&quot;5&quot; android:columnCount=&quot;4&quot; &gt; &lt;!-- 网格布局也可以用 android:orientation=&quot;vertical&quot; android:orientation=&quot;horizontal&quot; 熟悉控制摆放方向 --&gt; &lt;Button android:text=&quot;1&quot;/&gt; &lt;Button android:text=&quot;2&quot;/&gt; &lt;Button android:text=&quot;3&quot;/&gt; &lt;Button android:text=&quot;/&quot;/&gt; &lt;Button android:text=&quot;4&quot;/&gt; &lt;Button android:text=&quot;5&quot;/&gt; &lt;Button android:text=&quot;6&quot;/&gt; &lt;Button android:text=&quot;*&quot;/&gt; &lt;Button android:text=&quot;7&quot;/&gt; &lt;Button android:text=&quot;8&quot;/&gt; &lt;Button android:text=&quot;9&quot;/&gt; &lt;Button android:text=&quot;-&quot;/&gt; &lt;Button android:text=&quot;0&quot; android:layout_columnSpan=&quot;2&quot; android:layout_gravity=&quot;fill&quot;/&gt; &lt;!--android:layout_columnSpan=&quot;2&quot;横向占据两格的位置， android:layout_gravity=&quot;fill&quot;使其产生视觉效果 android:layout_rowSpan=&quot;2&quot;竖向占据两格的位置--&gt; &lt;Button android:text=&quot;.&quot;/&gt; &lt;Button android:text=&quot;+&quot; android:layout_rowSpan=&quot;2&quot; android:layout_gravity=&quot;fill&quot;/&gt; &lt;Button android:text=&quot;=&quot; android:layout_columnSpan=&quot;3&quot; android:layout_gravity=&quot;fill&quot;/&gt; &lt;/GridLayout&gt;","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"Android中onClick按钮单击事件的四种常用写法读书笔记","slug":"OnClickListener","date":"2016-05-22T00:45:49.000Z","updated":"2018-03-21T18:49:53.627Z","comments":true,"path":"2016/05/22/OnClickListener/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2016/05/22/OnClickListener/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 Android中onClick按钮单击事件的四种常用写法读书笔记 XML文件 &lt;EditText android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:inputType=&quot;phone&quot; android:ems=&quot;10&quot; android:id=&quot;@+id/et_number&quot; android:layout_alignParentTop=&quot;true&quot; android:layout_alignParentLeft=&quot;true&quot; android:layout_alignParentStart=&quot;true&quot; /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;@string/dial_number&quot; android:id=&quot;@+id/bt_dial&quot; android:layout_below=&quot;@id/et_number&quot; android:layout_alignRight=&quot;@id/et_number&quot; android:layout_alignEnd=&quot;@id/et_number&quot; /&gt; 第一种、匿名内部类： protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Button bt_dial = (Button) findViewById(R.id.bt_dial); bt_dial.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { dialPhone(); } }); } 第二种、自定义单击事件监听类： protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); et_number = (EditText) MainActivity.this.findViewById(R.id.et_number); Button bt_dial = (Button) findViewById(R.id.bt_dial); bt_dial.setOnClickListener(new MyListener()); } private class MyListener implements View.OnClickListener { @Override public void onClick(View view) { dialPhone(); } } 第三种、Activity继承View.OnClickListener，由Activity实现OnClick(View view)方法，在OnClick(View view)方法中用switch-case对不同id代表的button进行相应的处理： public class MainActivity extends Activity implements View.OnClickListener { EditText et_number; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); et_number = (EditText) MainActivity.this.findViewById(R.id.et_number); Button bt_dial = (Button) findViewById(R.id.bt_dial); bt_dial.setOnClickListener(this); } public void onClick(View view) { switch (view.getId()){ case R.id.bt_dial: dialPhone(); break; default: break; } } } 第四种、在XML文件中显示指定按钮的onClick属性，这样点击按钮时会利用反射的方式调用对应Activity中的click()方法： &lt;Button android:onClick=&quot;dialPhoneMethod&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;@string/dial_number&quot; android:id=&quot;@+id/bt_dial&quot; android:layout_below=&quot;@id/et_number&quot; android:layout_alignRight=&quot;@id/et_number&quot; android:layout_alignEnd=&quot;@id/et_number&quot; /&gt; public void dialPhoneMethod(View view){ dialPhone(); } private void dialPhone() { String number = et_number.getText().toString().trim(); if (TextUtils.isEmpty(number)){ Toast.makeText(this, &quot;电话号码不能为空&quot;, Toast.LENGTH_LONG).show(); return; } Intent intent = new Intent(); intent.setAction(Intent.ACTION_CALL); intent.setData(Uri.parse(&quot;tel:&quot; + number)); startActivity(intent); } 总结：第四种写法整个代码中都不用声明button就可以实现button的单击事件。但通常不推荐这样使用，第三种方法是onClick最佳的的使用方式。按钮少的时候用匿名内部类会比较快，比如写demo测试的时候。","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"Android中TextView的常见属性","slug":"AndroidTextView","date":"2016-05-12T00:49:07.000Z","updated":"2018-03-21T19:25:19.612Z","comments":true,"path":"2016/05/12/AndroidTextView/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2016/05/12/AndroidTextView/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 转帖请注明本文出自weimeig的博客（http://blog.csdn.net/weimeig/article/details/79648351），请尊重他人的辛勤劳动成果，谢谢 应朋友们反馈的Android基础薄弱的问题，决定出一套完整的Android基础教程，帮助大家复习，巩固Android基础，今天要讲的是Android中TestView的一些常见属性。 显示内容过长 EidtText和textview中内容过长的话自动换行，使用android：ellipsize与android：singleine可以解决，使只有一行。 EditText不支持marquee 用法如下： 在xml中 android:ellipsize = &quot;end&quot; 省略号在结尾 android:ellipsize = &quot;start&quot; 省略号在开头 android:ellipsize = &quot;middle&quot; 省略号在中间 android:ellipsize = &quot;marquee&quot; 跑马灯无限循环 android:singleline = &quot;true&quot; android:marqueeRepeatLimit=&quot;marquee_forever&quot; 跑马灯无限循环 当然也可以用代码语句 tv.setEllipsize(TextUtils.TruncateAt.valueOf(&quot;END&quot;)); tv.setEllipsize(TextUtils.TruncateAt.valueOf(&quot;START&quot;)); tv.setEllipsize(TextUtils.TruncateAt.valueOf(&quot;MIDDLE&quot;)); tv.setEllipsize(TextUtils.TruncateAt.valueOf(&quot;MARQUEE&quot;)); tv.setSingleLine(true); 另外，TextView中使用background属性，可以@color，设置背景颜色，也可以@一张图片资源的名字，作为背景图片 比如AdnroidStudio中的 android:background=&quot;@mipmap/ic_launcher&quot; 还可以通过的background的drawable属性，往文章的附件添加图片，比如登录界面可能用户名输入框的左边有个小图标，可以这样写 android:drawableLeft=&quot;@mipmap/ic_launcher&quot; 那么在文字的左侧将会被添加上一张图片 testSize属性可以设置文字的尺寸，sp是随系统的字体而改变大小，dp是随屏幕的大小决定字体的大小，根据实际需要决定，文字通常不用px，px是写死像素大小，不适合适配，通常很不美观 autoLink属性的引号中选择类型，比如选择email，那么文字中的email会实现连接的点击效果 android:autoLink=&quot;email&quot; testStyle属性设置字体的风格，可以有粗体、细体和斜体 android:textStyle=&quot;bold&quot; typeface属性设置文字字体的类型，可以有常规、无衬线字体、细体和等宽字体 android:typeface=&quot;monospace&quot;","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"Android闪屏页","slug":"ActivitySplash","date":"2016-03-27T01:10:23.000Z","updated":"2018-06-09T05:32:30.118Z","comments":true,"path":"2016/03/27/ActivitySplash/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2016/03/27/ActivitySplash/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 activity_splash.xml 具体布局内容自己定义 &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:orientation=&quot;horizontal&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;com.administrator.taolvyou.SplashActivity&quot;&gt; &lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;Hello World!&quot; /&gt; &lt;/LinearLayout&gt; Java代码 SplashActivity.java package com.administrator.taolvyou; import android.content.Intent; import android.os.Handler; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; public class SplashActivity extends AppCompatActivity { protected Handler mHandler = new Handler(); @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_splash); mHandler.postDelayed(new Runnable() { @Override public void run() { startActivity(new Intent(SplashActivity.this,MainActivity.class)); } },2000); } }","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"Menu菜单","slug":"Menu","date":"2016-01-09T00:10:23.000Z","updated":"2018-06-09T06:49:12.049Z","comments":true,"path":"2016/01/09/Menu/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2016/01/09/Menu/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 使用XML文件定义菜单资源的好处 1、有利于观察菜单结构 2、菜单资源和逻辑代码分离，有利于维护 3、菜单资源可以被不同的平台、版本等所用 Menu菜单的创建方式： 一、使用XML方式创建： 1.在res上面右键-&gt;New-&gt;Android resource directory 2.点击之后，出现下图Resource type选择menu，名字随便起,点击ok 3.可以看到菜单栏已经出现了menu 4.menu上面右击，如下图选择： 5.file name自己随便起,点击ok 6.可以看到menu文件夹下,有一个main.XML文件，main是我起的文件名 7.打开main.XML文件，在里面写入代码 &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;item android:id=&quot;@+id/font_group&quot; android:title=&quot;设置字体大小&quot; android:orderInCategory=&quot;3&quot;&gt; &lt;/item&gt; &lt;item android:id=&quot;@+id/action_color&quot; android:title=&quot;设置字体颜色&quot; android:orderInCategory=&quot;1&quot;&gt; &lt;/item&gt; &lt;item android:id=&quot;@+id/action_style&quot; android:title=&quot;设置字体样式&quot; android:orderInCategory=&quot;2&quot;&gt; &lt;/item&gt; &lt;/menu&gt; &lt;!-- android:id=&quot;@+id/font_group&quot; 设置当前菜单项的唯一标识 android:title=&quot;设置字体大小&quot; 设置菜单项的文本 android:orderInCategory=&quot;3&quot; 设置同种类菜单项的排列顺序 --&gt; 8.再打开Activity.java文件，在里面重载onCreate()函数 import android.graphics.Color; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.view.Menu; import android.view.MenuItem; import android.widget.TextView; /** * 演示OptionMenu的使用 */ public class MainActivity extends AppCompatActivity { private TextView tvShow; private float fontSize=20.0f; private static final int ITEMID=4;//菜单项的ID @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); tvShow=findViewById(R.id.tv_show); tvShow.setTextSize(fontSize);//设置textView中初始的字体大小 } /** * 表示当activity创建选项菜单时回调的使用 * @param menu * @return * true 用来显示菜单项 * false 无法显示菜单项 */ @Override public boolean onCreateOptionsMenu(Menu menu) { // MenuInflater inflater = getMenuInflater(); // inflater.inflate(R.menu.main,menu); //创建菜单的第一种方式，xml文件 getMenuInflater().inflate(R.menu.main,menu); //第一个参数是资源文件，第二个参数是menu对象 } /** * 表示当选项菜单中的item被选中时回调的方法 * @param item 表示菜单项对象 * @return */ @Override public boolean onOptionsItemSelected(MenuItem item) { int itemId = item.getItemId();//获取当前点击菜单项的资源id switch (itemId){ case R.id.font_group://点击设置字体大小 fontSize += 5; tvShow.setTextSize(fontSize); break; case R.id.action_color://点击设置字体颜色 //随机生成颜色 int red = (int) (Math.random()*256); int green = (int) (Math.random()*256); int blue = (int) (Math.random()*256); tvShow.setTextColor(Color.rgb(red,green,blue)); break; } return super.onOptionsItemSelected(item); } } 9.activity_main的代码如下 &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; &gt; &lt;TextView android:id=&quot;@+id/tv_show&quot; android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;设置字体&quot; android:textSize=&quot;20dp&quot;/&gt; &lt;/RelativeLayout&gt; 二、使用Java代码添加菜单的方法 .activity_main如上不变 在Java代码的onCreateOptionsMenu()方法中添加以下代码，即可为Menu菜单动态添加相应的菜单项 //add(groupId 菜单项分组 ，ItemId 菜单项唯一标识id，order 表示菜单项的排序，菜单项展示的文本) menu.add(Menu.NONE,ITEMID,Menu.NONE,&quot;设置字体&quot;); Java文件代码如下： import android.graphics.Color; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.view.Menu; import android.view.MenuItem; import android.widget.TextView; /** * 演示OptionMenu的使用 */ public class MainActivity extends AppCompatActivity { private TextView tvShow; private float fontSize=20.0f; private static final int ITEMID=4;//菜单项的ID @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); tvShow=findViewById(R.id.tv_show); tvShow.setTextSize(fontSize);//设置textView中初始的字体大小 } /** * 表示当activity创建选项菜单时回调的使用 * @param menu * @return * true 用来显示菜单项 * false 无法显示菜单项 */ @Override public boolean onCreateOptionsMenu(Menu menu) { //add(groupId 菜单项分组 ，ItemId 菜单项唯一标识id，order 表示菜单项的排序，菜单项展示的文本) menu.add(Menu.NONE,ITEMID,Menu.NONE,&quot;设置字体&quot;); return true; } /** * 表示当选项菜单中的item被选中时回调的方法 * @param item 表示菜单项对象 * @return */ @Override public boolean onOptionsItemSelected(MenuItem item) { //本方法内的使用参照上述xml写法的实现方法即可 return super.onOptionsItemSelected(item); } } 三、让Activity继承Activity的方法 将Activity原本继承的AppCompatActivity改成继承Activity 重写onMenuItemSelected方法 /** * 表示菜单项中被点击回调的方法 * @param featureId * @param item * @return */ @Override public boolean onMenuItemSelected(int featureId, MenuItem item) { int itemId = item.getItemId(); if(itemId==ITEMID){ tvShow.setText(&quot;调用了菜单项第二种点击事件&quot;); } return super.onMenuItemSelected(featureId, item); } 有的小朋友会问，if（itemId==ITEMID）的这个ITEMID是什么，其实，这个数值是可以直接填一个菜单项ID的，这里写ITEMID是因为完整的代码的上面写了一句， private static final int ITEMID=4;//菜单项的ID 四、处理菜单项的第四种方式，在onCreateOptionsMenu()方法内添加监听事件 /** * 表示当activity创建选项菜单时回调的使用 * @param menu * @return * true 用来显示菜单项 * false 无法显示菜单项 */ @Override public boolean onCreateOptionsMenu(Menu menu) { MenuItem item=menu.findItem(R.id.action_style); item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() { @Override public boolean onMenuItemClick(MenuItem item) { Toast.makeText(MainActivity.this,item.getTitle().toString(),Toast.LENGTH_LONG).show(); return false; } }); return true; } 菜单内还可以添加子菜单，如在菜单文件main下 &lt;item android:id=&quot;@+id/font_group&quot; android:title=&quot;设置字体大小&quot; android:orderInCategory=&quot;3&quot;&gt; &lt;!--设置子菜单--&gt; &lt;item android:id=&quot;@+id/action_add&quot; android:title=&quot;增大字体&quot;&gt;&lt;/item&gt; &lt;item android:id=&quot;@+id/action_sub&quot; android:title=&quot;减小字体&quot;&gt;&lt;/item&gt; &lt;/item&gt; 那么如何给子菜单获得绑定事件呢 直接在绑定事件监听的方法里（如onOptionsItemSelected()方法），找到对应的资源ID即可 case R.id.action_add: fontSize += 5; tvShow.setTextSize(fontSize); break; 附上完整的Java代码 import android.app.Activity; import android.graphics.Color; import android.os.Bundle; import android.view.Menu; import android.view.MenuItem; import android.widget.TextView; import android.widget.Toast; /** * 演示OptionsMenu的使用 */ public class MainActivity extends Activity { private TextView tvShow; private float fontSize=20.0f; private static final int ITEMID=4;//菜单项id @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); tvShow= (TextView) findViewById(R.id.tv_show); tvShow.setTextSize(fontSize);//设置textview中初始的字体大小 } /** * 表示当activity创建选项菜单时回调的方法 * @param menu * @return * true 用来显示菜单项 * false 无法显示菜单项 */ @Override public boolean onCreateOptionsMenu(Menu menu) { //获取菜单填充器对象 // MenuInflater inflater=getMenuInflater(); // inflater.inflate(R.menu.main,menu); //创建菜单的第一种方式 xml文件 getMenuInflater().inflate(R.menu.main,menu); //创建菜单的第一种方式 代码 // add(groupId 菜单项分组,ItemId 菜单项唯一标示id,order 表示菜单项的排序 // ,菜单项展示的文本) menu.add(Menu.NONE,ITEMID,Menu.NONE,&quot;设置字体&quot;); //处理菜单项点击事件的第三种方式 MenuItem item=menu.findItem(R.id.action_style); item.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() { @Override public boolean onMenuItemClick(MenuItem item) { Toast.makeText(MainActivity.this,item.getTitle().toString(),Toast.LENGTH_SHORT).show(); return false; } }); return true; } /** * 表示当选项菜单中的item被选中时回调的方法 * @param item 表示菜单项对象 * @return */ @Override public boolean onOptionsItemSelected(MenuItem item) { int itemId=item.getItemId();//获取当前点击菜单项的资源id switch (itemId){ case R.id.action_add://点击设置字体大小 fontSize+=5; tvShow.setTextSize(fontSize); break; case R.id.action_sub: fontSize-=5; tvShow.setTextSize(fontSize); break; case R.id.action_color://点击设置字体颜色 //随机生成颜色 int red= (int) (Math.random()*256); int green= (int) (Math.random()*256); int blue= (int) (Math.random()*256); tvShow.setTextColor(Color.rgb(red,green,blue)); break; } return super.onOptionsItemSelected(item); } /** * 表示菜单项中被点击回调的方法 * @param featureId * @param item * @return */ @Override public boolean onMenuItemSelected(int featureId, MenuItem item) { int itemId=item.getItemId(); if(itemId==ITEMID){ tvShow.setText(&quot;调用了菜单项第二种点击事件&quot;); } return super.onMenuItemSelected(featureId, item); } }","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"接口作为形式参数","slug":"Java-IntParameter","date":"2015-06-03T13:59:09.000Z","updated":"2018-06-09T03:36:54.225Z","comments":true,"path":"2015/06/03/Java-IntParameter/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2015/06/03/Java-IntParameter/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 应朋友们反馈的JAVA基础薄弱的问题，决定出一套完整的JAVA基础教程，帮助大家复习，巩固JAVA基础。 /** * 接口作为形式参数 * @author Administrator * */ //定义一个爱好接口 interface Love{ public abstract void Love(); } class LoveDemo{ public void method(Love l){//l; l = new Teacher(); Love l = new Teacher(); l.Love(); } } //定义具体类实现接口 class Teacher implements Love{ @Override public void Love() { // TODO Auto-generated method stub System.out.println(&quot;老师爱学生&quot;); } } public class InterfactTest { public static void main(String[] args){ //需求：我要测试LoveDemo类中的Love方法 LoveDemo ld = new LoveDemo(); Love l = new Teacher(); ld.method(l); } }","categories":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Java/"}]},{"title":"类的对象传递","slug":"ObjTransfer","date":"2015-06-03T09:59:09.000Z","updated":"2018-06-09T03:35:13.444Z","comments":true,"path":"2015/06/03/ObjTransfer/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2015/06/03/ObjTransfer/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 应朋友们反馈的JAVA基础薄弱的问题，决定出一套完整的JAVA基础教程，帮助大家复习，巩固JAVA基础。 class Demo{ public int sum(int a,int b){ return a+b; } } class Student1{ public void show(){ System.out.println(&quot;我爱学习&quot;); } } class StudentDemo{ //如果看到一个方法的形式参数是一个类类型（引用类型），这里需要的是该类对象 public void method(Student1 s){ s.show(); } } public class ArrayTest { public static void main(String[] args){ Demo d =new Demo(); StudentDemo sd = new StudentDemo(); //创建学生对象 Student1 s =new Student1(); sd.method(s);//把s的地址给到了这里 } }","categories":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Java/"}]},{"title":"Java中的clone","slug":"Java-clone","date":"2015-06-03T08:59:09.000Z","updated":"2018-06-09T07:58:41.558Z","comments":true,"path":"2015/06/03/Java-clone/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2015/06/03/Java-clone/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 应朋友们反馈的JAVA基础薄弱的问题，决定出一套完整的JAVA基础教程，帮助大家复习，巩固JAVA基础。 图书馆类 1、被克隆的类需要实现Cloneable接口，重写Object的clone方法。 public class TuShuGuan implements Cloneable{ private String shuming; private String time; public TuShuGuan(String shuming, String time) { super(); this.shuming = shuming; this.time = time; } public void setShuming(String shuming) { this.shuming = shuming; } public void setTime(String time) { this.time = time; } public String getShuming() { return shuming; } public String getTime() { return time; } public Object clone() throws CloneNotSupportedException { return super.clone(); } } 主函数 主函数需要抛CloneNotSupportedException异常 /** * Java中的clone * @author Administrator * */ public class CloneTest { public static void main(String[] args)throws CloneNotSupportedException{ TuShuGuan t = new TuShuGuan(&quot;java&quot;,&quot;2017年&quot;); System.out.println(t.getShuming()+&quot;---&quot;+t.getTime()); Object obj = t.clone(); TuShuGuan t2 = (TuShuGuan)obj; System.out.println(t2.getShuming()+&quot;---&quot;+t2.getTime()); TuShuGuan t3 = t; t3.setShuming(&quot;C++&quot;); t3.setTime(&quot;2018年&quot;); System.out.println(t3.getShuming()+&quot;---&quot;+t3.getTime()); System.out.println(t2.getShuming()+&quot;---&quot;+t2.getTime()); } }","categories":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Java/"}]},{"title":"接口作为返回值类型","slug":"Java-IntReturn","date":"2015-06-03T08:53:17.000Z","updated":"2018-06-09T03:38:17.054Z","comments":true,"path":"2015/06/03/Java-IntReturn/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2015/06/03/Java-IntReturn/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 应朋友们反馈的JAVA基础薄弱的问题，决定出一套完整的JAVA基础教程，帮助大家复习，巩固JAVA基础。 /** * 接口作为返回值类型 * @author Administrator * */ interface Loves{ public abstract void loves(); } class LoveDemos{ public Loves getLoves(){ return new TS();//多态，父类引用指向子类对象 } } class TS implements Loves{ @Override public void loves() { // TODO Auto-generated method stub System.out.println(&quot;学习&quot;); } } public class InterfaceReturn { public static void main(String[] args){ LoveDemos ld = new LoveDemos(); Loves l = ld.getLoves();//new TS();Love l = new TS();多态 l.loves(); } }","categories":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Java/"}]},{"title":"匿名内部类的方法调用","slug":"Java-AnonCall","date":"2015-06-01T12:59:09.000Z","updated":"2018-06-09T03:33:45.251Z","comments":true,"path":"2015/06/01/Java-AnonCall/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2015/06/01/Java-AnonCall/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 应朋友们反馈的JAVA基础薄弱的问题，决定出一套完整的JAVA基础教程，帮助大家复习，巩固JAVA基础。 ` /** * 匿名内部类的方法调用 * @author Administrator * */ interface Inter{ public abstract void show(); public abstract void show2(); } class OuterA{ public void method(){ /* new Inter(){ public void show(){ System.out.println(&quot;show&quot;); } public void show2(){ System.out.println(&quot;show2&quot;); } }.show(); new Inter(){ public void show(){ System.out.println(&quot;show&quot;); } public void show2(){ System.out.println(&quot;show2&quot;); } }.show2(); */ //优化版 Inter i = new Inter(){//多态 public void show(){ System.out.println(&quot;show&quot;); } public void show2(){ System.out.println(&quot;show2&quot;); } }; i.show(); i.show2(); } } public class InterClass { public static void main(String[] args){ OuterA o = new OuterA(); o.method(); } } `","categories":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Java/"}]},{"title":"匿名内部类面试题","slug":"Java-AnoInterview","date":"2015-06-01T10:56:07.000Z","updated":"2018-06-09T03:32:18.027Z","comments":true,"path":"2015/06/01/Java-AnoInterview/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2015/06/01/Java-AnoInterview/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 应朋友们反馈的JAVA基础薄弱的问题，决定出一套完整的JAVA基础教程，帮助大家复习，巩固JAVA基础。 /** * 匿名内部类面试题 * 补全代码，并向控制台中输出HelloWord * * interface Inter3{ * void show(); *} *class Outer3{ //补全代码 *} *public class InterMianShi { * public static void main(String[] args){ * Outer3.method3().show(); * * //1：Outher.method()可以看出method应该是Outher中的一个静态方法 * //2:Outher.method.().show()可以看出method()方法的返回值类型是一个对象 * //又由于接口Inter中有一个show方法，所以认为method()方法的返回值类型是一个接口 * * } *} * @author Administrator * */ interface Inter3{ void show(); } class Outer3{ public static Inter3 method3(){ return new Inter3(){ @Override public void show() { // TODO Auto-generated method stub System.out.println(&quot;HelloWord&quot;); } }; } } public class InterMianShi { public static void main(String[] args){ Outer3.method3().show(); /** * 1：Outher.method()可以看出method应该是Outher中的一个静态方法 * 2:Outher.method.().show()可以看出method()方法的返回值类型是一个对象 * 又由于接口Inter中有一个show方法，所以认为method()方法的返回值类型是一个接口 */ } }","categories":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Java/"}]},{"title":"成员内部类","slug":"Java-MemInterCls","date":"2015-05-29T10:59:09.000Z","updated":"2018-06-09T04:34:50.718Z","comments":true,"path":"2015/05/29/Java-MemInterCls/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2015/05/29/Java-MemInterCls/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 应朋友们反馈的JAVA基础薄弱的问题，决定出一套完整的JAVA基础教程，帮助大家复习，巩固JAVA基础。 /** * 成员内部类 * @author Administrator * */ class Outer{ private int num = 10; class Inner{ public void show(){ System.out.println(num); } } } public class InnerClass { public static void main(String[] args){ Outer.Inner oi = new Outer().new Inner(); oi.show(); } }","categories":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Java/"}]},{"title":"抽象类名作为形式参数","slug":"Java-AbstractParame","date":"2015-05-27T10:59:09.000Z","updated":"2018-06-09T03:30:39.627Z","comments":true,"path":"2015/05/27/Java-AbstractParame/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2015/05/27/Java-AbstractParame/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 应朋友们反馈的JAVA基础薄弱的问题，决定出一套完整的JAVA基础教程，帮助大家复习，巩固JAVA基础。 /** * 抽象类名作为形式参数 * @author Administrator * */ //定义一个人类的抽象类 abstract class Person{ public abstract void study(); } class PersonDemo{ public void method(Person p){//p; p = new Student(); Person p = new Student //多态 p.study(); } } //定义具体类来实现这个抽象类 class StudentQ extends Person{ @Override public void study() { // TODO Auto-generated method stub System.out.println(&quot;好好学习&quot;); } } public class AbstractTest { public static void main(String[] args){ //目前是没有办法使用的 //因为抽象类没有对应的具体类 //那么，我们就应该先定义一个具体类 //需求：我要使用PersonMdemo中的method方法 PersonDemo pd =new PersonDemo(); StudentQ s = new StudentQ(); pd.method(s); } }","categories":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Java/"}]},{"title":"匿名内部类在开发中的应用","slug":"Java-AnonIntClsApp","date":"2015-05-21T12:59:09.000Z","updated":"2018-06-09T04:36:19.516Z","comments":true,"path":"2015/05/21/Java-AnonIntClsApp/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2015/05/21/Java-AnonIntClsApp/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 应朋友们反馈的JAVA基础薄弱的问题，决定出一套完整的JAVA基础教程，帮助大家复习，巩固JAVA基础。 /** * 匿名内部类在开发中的应用 * @author Administrator * */ interface Person2{ void study(); } class PersonDemo2{ //定义接口作为参数，这里需要的不是接口，而是实现类对象 public void method(Person2 p){ p.study(); } } //实现类 class XueSheng implements Person2{ @Override public void study() { // TODO Auto-generated method stub System.out.println(&quot;好好学习，天天向上&quot;); } } public class InnerClassTest2 { public static void main(String[] args){ PersonDemo2 pd = new PersonDemo2(); Person2 p = new XueSheng(); pd.method(p); System.out.println(&quot;---------&quot;); //匿名内部类实现 new PersonDemo2().method(new Person2() { @Override public void study() { // TODO Auto-generated method stub System.out.println(&quot;好好学习，天天向上&quot;); } });; } }","categories":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Java/"}]},{"title":"JAVA中的泛型","slug":"Java-Genericity","date":"2015-05-17T10:53:37.000Z","updated":"2018-03-19T10:58:20.387Z","comments":true,"path":"2015/05/17/Java-Genericity/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2015/05/17/Java-Genericity/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 转帖请注明本文出自weimeig的博客（http://blog.csdn.net/weimeig/article/details/79535182），请尊重他人的辛勤劳动成果，谢谢 应朋友们反馈的JAVA基础薄弱的问题，决定出一套完整的JAVA基础教程，帮助大家复习，巩固JAVA基础，今天要讲的是JAVA中的泛型。 本篇文章基于http://blog.csdn.net/weimeig/article/details/79533661知识的基础上，请先学前面这篇文章。 泛型 集合中的元素，可以是任意类型的对象（对象的引用） 如果把某个对象放入集合，则会忽略他的类型，而把他当作Object处理 泛型则是规定了某个集合只可以存放特定类型的对象 会在编译期间进行类型检查 可以直接按指定类型获取集合元素 /** * 学生类 * @author Administrator * */ public class Student { private String id; private String name; private Set course; private Student(String id,String name){ this.id = id; this.name = name; this.course = new HashSet(); } public String getId() { return id; } public void setId(String id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public Set getCourse() { return course; } public void setCourse(Set course) { this.course = course; } } /** * 课程类 * @author Administrator * */ public class Course { private String id; private String name; Course(){ } Course(String id,String name){ this.id=id; this.name=name; } public String getId() { return id; } public void setId(String id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } } import java.util.ArrayList; import java.util.List; public class TestGeneric { /** * 带有泛型——Course,的List类型属性 */ public List&lt;Course&gt; courses; //&lt;&gt;内限制了数据的类型 //创建构造器实例化 public TestGeneric(){ //构造方法 this.courses = new ArrayList&lt;Course&gt;(); } /** * 测试添加 */ public void testAdd(){ Course cr1 = new Course(&quot;1&quot;,&quot;大学英语&quot;); courses.add(cr1); //泛型集合中，不能添加泛型规定的类型及其子类型以外的对象，否则会报错 // courses.add(&quot;能否添加一些奇怪的东西呢？&quot;); Course cr2 = new Course(&quot;2&quot;, &quot;Java基础&quot;); courses.add(cr2); } public void testForEach(){ for(Course cr:courses){//因为规定了是Course的类型，所以直接作为Course类型取出来，不再需要作为Object类型的转换。 System.out.println(cr.getId() + &quot;:&quot; +cr.getName()); } } public static void main(String[] args){ TestGeneric tg =new TestGeneric(); tg.testAdd(); tg.testForEach(); } } 泛型集合可以添加泛型的子类型的对象实例 创建ChildCourse类，继承Course类 public class ChildCourse extends Course {//ChildCourse继承了Course类型，如果Course类里已经添加了含参的构造器， //编译器将不会自动为他再添加一个隐式构造器，而子类又必须要调用父类的隐式构造器，因此会报错，所以需要在父类中手动定义一个的无参的隐式构造器 // 不添加属性让他默认继承父类的属性 } 在TestGeneric类中添加方法 /** * 泛型集合可以添加泛型的子类型的对象实例 * @param args */ public void testChild(){ ChildCourse ccr = new ChildCourse(); ccr.setId(&quot;3&quot;); ccr.setName(&quot;我是子类型的课程对象实例～～&quot;); courses.add(ccr); } main函数中调用 TestGeneric tg =new TestGeneric(); tg.testChild(); tg.testForEach(); 1、泛型集合中的限定类型，不能使用基本数据类型。2、可以通过使用包装类限定允许存入的基本数据类型 /** * 泛型不能使用基本类型 * @param args */ public void testBasicType(){ / List&lt;int&gt; list = new ArrayList&lt;int&gt;();//使用基本类型报错 List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();//使用包装类 list.add(1);//将1转化为了基本类型的包装类Integer System.out.println(&quot;基本类型必须使用包装类作为泛型！&quot; + list.get(0)); } main函数中调用 TestGeneric tg =new TestGeneric(); tg.testBasicType();","categories":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Java/"}]},{"title":"JAVA中的集合框架（Map&HashMap）","slug":"Java-Map-HashMap","date":"2015-04-29T10:55:24.000Z","updated":"2018-03-19T11:05:48.726Z","comments":true,"path":"2015/04/29/Java-Map-HashMap/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2015/04/29/Java-Map-HashMap/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 转帖请注明本文出自weimeig的博客（http://blog.csdn.net/weimeig/article/details/79575842），请尊重他人的辛勤劳动成果，谢谢 应朋友们反馈的JAVA基础薄弱的问题，决定出一套完整的JAVA基础教程，帮助大家复习，巩固JAVA基础，今天要讲的是JAVA中的Map&amp;HashMap集合。 import java.util.HashSet; import java.util.Set; /** * 学生类 * @author Administrator * */ public class Student { private String id; private String name; private Set&lt;Course&gt; course; Student(String id,String name){ this.id = id; this.name = name; this.course = new HashSet&lt;Course&gt;(); } public String getId() { return id; } public void setId(String id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public Set getCourse() { return course; } public void setCourse(Set course) { this.course = course; } public Student get(String stuId) { // TODO Auto-generated method stub return null; } } import java.util.HashMap; import java.util.Map; import java.util.Map.Entry; import java.util.Scanner; import java.util.Set; public class MapTest { /** * 用来承装学生类型对象 */ public Map&lt;String,Student&gt; students; /** * 在构造器中初始化student属性 */ public MapTest(){ this.students = new HashMap&lt;String, Student&gt;(); } /** * 测试添加：输入学生ID.判断时候被占用 * 若未被占用，则输入姓名，创建新学生对象，并且 * 添加到students中 * @param args */ public void testPut(){ //创建一个Scanner对象，用来获取输入的学生ID和姓名 Scanner console = new Scanner(System.in); int i = 0; while(i &lt; 3){ System.out.println(&quot;请输入学生ID：&quot;); String ID = console.next(); //提示输入学生姓名 Student st = students.get(ID); if(st == null){ //提示输入学生姓名 System.out.println(&quot;请输入学生姓名：&quot;); String name = console.next(); //创建新的学生对象 Student newStudent = new Student(ID,name); //通过调用students的put方法，添加ID-学生映射 students.put(ID, newStudent); System.out.println(&quot;成功添加学生：&quot; + students.get(ID).getName()); i++; }else{ System.out.println(&quot;该学生ID已被占用！&quot;); } } } /** * 测试Map的KeySet方法 * @param args */ public void testKeySet(){ //通过KeySet方法，返回Map中的所有&quot;键&quot;的Set集合 Set&lt;String&gt; KeySet = students.keySet(); //遍历KeySet，取得每一个键，再调用get方法取得每个键对于的value //取得student的容量 System.out.println(&quot;总共有&quot; + students.size() + &quot;个学生&quot;); for(String stuId:KeySet){ Student st = students.get(stuId); if(st!=null){ System.out.println(&quot;学生&quot; + st.getName()); } } } /** * 测试删除Map中的映射 * @param args */ public void testRemove(){ //获取从键盘输入的待删除学生ID字符串 Scanner console = new Scanner(System.in); while (true) { //提示输入待删除的学生的ID System.out.println(&quot;请输入要删除的学生ID&quot;); String ID =console.next(); //判断该ID是否有对应的学生对象 Student st = students.get(ID); if(st == null){ //提示输入的ID并不存在 System.out.println(&quot;该ID不存在&quot;); continue; } students.remove(ID); System.out.println(&quot;成功删除学生：&quot; + st.getName()); break; } } /** * 通过entrySet方法来遍历Map * @param args */ public void testEntrySet(){ //通过enterSet方法，返回Map中所有键值对的集合，KeySet只是返回所有键的集合，EntrySet是返回所有键值对的集合 // Set&lt;Entry&gt; entrySet = student.entrySet();//会报错，因为entrySet返回的是entry的集合，而entry本身是带有和定义Map类型的泛型一样的泛型 Set&lt;Entry&lt;String,Student&gt;&gt; entrySet = students.entrySet();//所以要为他定义和当时定义的Map类型一样的数据类型 for(Entry&lt;String,Student&gt; entry:entrySet){ System.out.println(&quot;取得键：&quot; + entry.getKey()); System.out.println(&quot;对应的值为：&quot; + entry.getValue().getName()); } } /** * 利用put方法修改Map中的已有映射 * @param args */ public void testModify(){ //提示输入要修改的学生ID System.out.println(&quot;请输入要修改的学生ID：&quot;); //创建一个Scanner对象，去获取从键盘上输入的学生ID字符串 Scanner console = new Scanner(System.in); while (true) { //取得从键盘输入的学生ID String stuId = console.next(); //从student中查找该学生ID对应的学生对象 Student student = students.get(stuId); if(student == null){ System.out.println(&quot;该ID不存在！请重新输入！&quot;); continue; } //提示当前对应的学生对象的姓名 System.out.println(&quot;当前该学生ID，所对应的学生为&quot; + student.getName()); //提示输入新的学生姓名，来修改已有的映射 System.out.println(&quot;请输入新的学生姓名：&quot;); String name = console.next(); Student newStudent = new Student(stuId, name); students.put(stuId, newStudent); System.out.println(&quot;修改成功！&quot;); break; } } public static void main(String[] args){ MapTest mt =new MapTest(); mt.testPut();//增加 mt.testKeySet();//遍历所有的键 // mt.testRemove();//删除 // mt.testEntrySet();//遍历所有的键和值 mt.testModify();//修改 mt.testEntrySet();//遍历所有的键和值 } }","categories":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Java/"}]},{"title":"JAVA中的集合框架（Set）","slug":"Java-HashSet","date":"2015-04-28T10:55:09.000Z","updated":"2018-03-19T11:01:15.788Z","comments":true,"path":"2015/04/28/Java-HashSet/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2015/04/28/Java-HashSet/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 转帖请注明本文出自weimeig的博客（http://blog.csdn.net/weimeig/article/details/79535273），请尊重他人的辛勤劳动成果，谢谢 应朋友们反馈的JAVA基础薄弱的问题，决定出一套完整的JAVA基础教程，帮助大家复习，巩固JAVA基础，今天要讲的是JAVA中的Set集合。 ArrayList是有序的集合，而Set是无序的集合 有序的集合ArrayList中可以添加多个相同对象（的引用） 而Set中，添加某个对象，无论添加多少次， 最终只会保留一个该对象（的引用） 并且，保留的是第一次添加的那一个 import java.util.HashSet; import java.util.Set; /** * 学生类 * @author Administrator * */ public class Student { private String id; private String name; private Set&lt;Course&gt; course; Student(String id,String name){ this.id = id; this.name = name; this.course = new HashSet&lt;Course&gt;(); } public String getId() { return id; } public void setId(String id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public Set getCourse() { return course; } public void setCourse(Set course) { this.course = course; } } /** * 课程类 * @author Administrator * */ public class Course { private String id; private String name; Course(){ } Course(String id,String name){ this.id=id; this.name=name; } public String getId() { return id; } public void setId(String id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } } import java.util.ArrayList; import java.util.Arrays; import java.util.List; import java.util.Scanner; public class SetTest { public List&lt;Course&gt; coursesToSelect; public SetTest(){ this.coursesToSelect = new ArrayList&lt;Course&gt;(); } /** * 用于往coursesToSelect中添加备选课程 */ public void testAdd(){ Course cr1 = new Course(&quot;1&quot;,&quot;数据结构&quot;);//new一个Course类的数据类型 coursesToSelect.add(cr1);//所为一条数据插入List中 Course temp = (Course)coursesToSelect.get(0);//获取LIst中的第一条数据\\ Course cr2 = new Course(&quot;2&quot;,&quot;C语言&quot;); coursesToSelect.add(0, cr2); //两个参数的add方法，选择插入元素的位置 Course temp2 = (Course) coursesToSelect.get(0);//将元素插入到第一条,对象存入集合都变成Object类型，取出时需要类型转换 Course[] course = {new Course(&quot;3&quot;,&quot;离散数学&quot;), new Course(&quot;4&quot;,&quot;汇编语言&quot;)}; coursesToSelect.addAll(Arrays.asList(course)); //添加数组用addAll Course temp3 = (Course) coursesToSelect.get(2); Course temp4 = (Course) coursesToSelect.get(3); //按位置插入 Course[] course2 = {new Course(&quot;5&quot;,&quot;高等数学&quot;),new Course(&quot;6&quot;,&quot;大学英语&quot;)}; coursesToSelect.addAll(2, Arrays.asList(course2)); Course temp5 = (Course)coursesToSelect.get(2); Course temp6 = (Course)coursesToSelect.get(3); } /** * 通过for each方法访问集合元素 * 迭代器的简便写法 * @param args */ public void testForEach(){ System.out.println(&quot;有如下课程可选（通过for each访问）：&quot;); for(Object obj:coursesToSelect){//去遍历coursesToSelect集合中的每一个元素，把它取出来作为Object的一个变量 //（当一个元素存入到集合中的时候，他的类型是被忽略了的，集合只是拿他当Object用），当取出来的时候也是一个Object，因此 Course cr =(Course)obj;//当他取出来后，需要做强转 System.out.println(&quot;课程：&quot; + cr.getId() + &quot;:&quot; + cr.getName()); } } public static void main(String []args){ SetTest st =new SetTest(); st.testAdd(); st.testForEach(); //创建一个学生对象 Student student = new Student(&quot;1&quot;,&quot;小明&quot;); System.out.println(&quot;欢迎学生：&quot; + student.getName() + &quot;选课！&quot;); //创建一个Scanner对象，用来接收从键盘输入的课程ID Scanner console = new Scanner(System.in); for(int i=0;i&lt;3;i++){ System.out.println(&quot;请输入课程ID&quot;); String courseId = console.next(); for(Course cr:st.coursesToSelect){ if(cr.getId().equals(courseId)){ student.getCourse().add(cr); // student.getCourse().add(cr); /** * Set中，添加某个对象，无论添加多少次， * 最终只会保留一个该对象（的引用） * 并且，保留的是第一次添加的那一个 */ // student.getCourse().add(null);Set中是允许添加null空对象的 } } } st.testForEachForSet(student); } public void testForEachForSet(Student student){ //打印输出，学生所选的课程！ System.out.println(&quot;共选择了&quot; + student.getCourse().size() + &quot;门课程&quot;); for(Object obj : student.getCourse()){ Course cr = (Course)obj; System.out.println(&quot;选择了课程：&quot; + cr.getId() + &quot;:&quot; +cr.getName()); } } }","categories":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Java/"}]},{"title":"多线程的经典案例(生产消费问题)","slug":"MiltiCaseProduConsum","date":"2015-04-27T10:45:21.000Z","updated":"2018-03-19T10:52:23.469Z","comments":true,"path":"2015/04/27/MiltiCaseProduConsum/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2015/04/27/MiltiCaseProduConsum/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 多线程的经典案例(生产消费问题) 未完待续。。","categories":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Java/"}]},{"title":"多线程","slug":"Multithreading","date":"2015-04-23T10:18:36.000Z","updated":"2018-03-21T04:10:51.810Z","comments":true,"path":"2015/04/23/Multithreading/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2015/04/23/Multithreading/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 转帖请注明本文出自weimeig的博客（http://blog.csdn.net/weimeig/article/details/79510581），请尊重他人的辛勤劳动成果，谢谢 应朋友们反馈的JAVA基础薄弱的问题，决定出一套完整的JAVA基础教程，帮助大家复习，巩固JAVA基础，今天要讲的是多线程。 创建线程的第一种方法，创建线程的类。 class Xc extends Thread{//创建线程所需要继承的类 public void run(){//run方法是覆盖的父类方法 for(int i=0;i&lt;100;i++){ System.out.println(&quot;子线程&quot;); } } } public class XianCheng { public static void main(String [] args){ new Xc().start();//谁调Start方法，就会去自动调用run方法 for(int i=0;i&lt;100;i++){ System.out.println(&quot;主线程&quot;); } } } 创建线程的第二种方法，实现线程的接口。 class Xc2 implements Runnable{ public void run(){ for(int i=0;i&lt;100;i++){ System.out.println(&quot;子线程&quot;); } } } public class XianCheng { public static void main(String [] args){ new Thread(new Xc2()).start(); for(int i=0;i&lt;100;i++){ System.out.println(&quot;主线程&quot;); } } } 创建线程的第三种方法，简约写法。 public class XianCheng { public static void main(String [] args){ new Thread(){ public void run(){ for(int i=0;i&lt;100;i++){ System.out.println(&quot;子线程&quot;); } } }.start(); for(int i=0;i&lt;100;i++){ System.out.println(&quot;主线程&quot;); } } } 创建线程的第四种方法，简约写法。 public class XianCheng { public static void main(String [] args){ new Runnable() { public void run() { for(int i=0;i&lt;30;i++){ System.out.println(&quot;我是子线程！！！&quot;); } } }.run(); for(int i=0;i&lt;30;i++){ System.out.println(&quot;主线程&quot;); } } } 观察线程的竞争 class Xc3 extends Thread{ public void run(){ System.out.println(Thread.currentThread().getName()+&quot;线程在运行&quot;); } } public class XianCheng { public static void main(String [] args){ Xc3 xc3 = new Xc3(); xc3.setName(&quot;线程3&quot;); xc3.start(); Xc3 xc31 = new Xc3(); xc31.setName(&quot;线程2&quot;); xc31.start(); Xc3 xc32 = new Xc3(); xc32.setName(&quot;线程3&quot;); xc32.start(); System.out.println(Thread.currentThread().getName()+&quot;线程在运行&quot;); } } 线程的优先级 static int MAX_PRIORITY = 10;//线程可以具有的最高优先级（执行概率最高） static int MIN_PRIORITY = 1; //线程可以具有的最低优先级（执行概率最低） static int NORM_PRIORITY = 5；//分配给线程的默认优先级 写法（1） class Xc extends Thread{ public void run(){ System.out.println(&quot;线程1在运行&quot;); } } public class XianCheng { public static void main(String [] args){ Xc xc = new Xc();//线程默认优先级是5 xc.setPriority(Thread.NORM_PRIORITY + 3);//数字越大优先级越高 xc.start(); new Thread(){ public void run(){ System.out.println(&quot;第二个线程正在被执行&quot;); } }.start(); } } 写法（2） public class XianCheng { public static void main(String [] args){ new Thread(){ public void run(){//线程默认优先级是5 setPriority(Thread.NORM_PRIORITY + 3);//数字越大优先级越高 System.out.println(&quot;第1个线程&quot;); } }.start(); new Thread(){ public void run(){ System.out.println(&quot;第二个线程正在被执行&quot;); } }.start(); } } 线程的睡眠 public class XianCheng { public static void main(String [] args){ new Thread(){ public void run(){ for(int i=0;i&lt;10;i++){ System.out.println(Thread.currentThread().getName() + &quot; &quot; + i); try { Thread.sleep(1000);//1000毫秒等于一秒 } catch (Exception e) { // TODO: handle exception } } } }.start(); } } 线程的抛异常问题，举例 都是会报错的，因为用throws抛异常的时候，如果向主调处抛异常的方法是从父类继承的或者是从接口实现的那么，覆盖父类的方法或实现接口方法时，如果父类中的原方法或接口中的原抽象方法没有抛异常，则子类覆盖父类的方法或实现接口的方法也不能抛异常。 class Yy implements Runnable{ public void run() throws Exception { } } class Xx extends Thread{ public void run() throws Exception { } } 当出现这种情况只能try…catch，大不了catch中什么都不写。 线程的让步 public class XianCheng { public static void main(String [] args){ new Thread(){ public void run(){ setName(&quot;线程一：&quot;); for(int i=1;i&lt;=30;i++){ System.out.println(Thread.currentThread().getName() + i); } } }.start(); new Thread(){ public void run(){ setName(&quot;线程二：&quot;); for(int i=1;i&lt;=30;i++){ System.out.println(Thread.currentThread().getName() + i); if(i%5==0){ Thread.yield(); //线程让步出去让其他线程先执行，再次执行时，从让步的这个位置重新执行。 } } } }.start(); } } 线程的阻塞 class Xc implements Runnable{ public void run(){ for(int i=0;i&lt;30;i++){ System.out.println(&quot;子线程&quot; + i); } } } public class XianCheng { public static void main(String [] args){ Thread xc = new Thread(new Xc()); xc.start(); try { xc.join();//阻塞时将当前线程暂停，直至调用join函数所对应的线程执行完毕，才继续执行程序。 //也就是说，当执行到这里，当前执行线程就暂停了，而去执行join所对应的xc这个线程，直到xc这个线程执行完毕才回来，此时线程们重新竞争CPU。 } catch (Exception e) { // TODO: handle exception } for(int i=0;i&lt;30;i++){ System.out.println(&quot;主线程&quot; + i); } } }","categories":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Java/"}]},{"title":"接口","slug":"Interface","date":"2015-04-20T10:16:45.000Z","updated":"2018-03-21T04:10:57.138Z","comments":true,"path":"2015/04/20/Interface/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2015/04/20/Interface/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 转帖请注明本文出自weimeig的博客（http://blog.csdn.net/weimeig/article/details/79501228），请尊重他人的辛勤劳动成果，谢谢 应朋友们反馈的JAVA基础薄弱的问题，决定出一套完整的JAVA基础教程，帮助大家复习，巩固JAVA基础，今天要讲的是接口。 /** *接口：初步理解，接口是一个特殊的抽象类，当抽象类中全部是抽象方法时 *可以通过接口的形式来体现。 *class 用于定义类 *interface 用于定义接口 * * 接口中成员的格式： * 1.public static final String NAME=&quot;小李&quot;;//全局常量 * 2.public abstract void show();//抽象方法 * * 注意： * 1.接口中只能出现public 访问修饰符 * 2.接口不可以创建对象，因为里面有抽象方法，需要被子类实现， * 子类对接口中的所有抽象方法实现后，子类才能够实例化，否则 * 子类就是一个抽象类 * * 关系： * 类与类之间：继承关系 * 接口与类之间：实现关系 * 接口与接口之间：继承关系 * 接口与接口之间：不具备实现关系 */ interface smoket{ public static final String NAME=&quot;小李&quot;; public abstract void show(); } interface Game{ //inrerface Game extends Smoket{ //这句实现Game接口等同于实现了Game与Smoket //两个接口，需要实现两个的方法 public abstract void computerGame(); } class Student implements smoket,Game{ @Override public void show() { // TODO Auto-generated method stub System.out.println(&quot;吸烟&quot;); } @Override public void computerGame() { // TODO Auto-generated method stub System.out.println(&quot;游戏&quot;); } } public class jiekou { public static void main(String[] args){ Student s=new Student(); s.show(); s.computerGame(); } }","categories":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Java/"}]},{"title":"多线程的经典案例(卖票问题)","slug":"MultiCaseTicket","date":"2015-04-16T10:40:16.000Z","updated":"2018-03-19T10:52:11.549Z","comments":true,"path":"2015/04/16/MultiCaseTicket/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2015/04/16/MultiCaseTicket/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 转帖请注明本文出自weimeig的博客（http://blog.csdn.net/weimeig/article/details/79512965），请尊重他人的辛勤劳动成果，谢谢 应朋友们反馈的JAVA基础薄弱的问题，决定出一套完整的JAVA基础教程，帮助大家复习，巩固JAVA基础，今天要讲的是多线程的经典案例。 卖票问题 class Xc implements Runnable{ public int chepiao = 100; public void run(){ while (true) { if(chepiao&gt;0){ System.out.println(&quot;第&quot; + Thread.currentThread().getName() + &quot;个车站正在卖出第&quot; + (101-chepiao) + &quot;张车票&quot;); --chepiao; }else{ break; } } } } public class XianCheng { public static void main(String [] args){ Thread Xc1 = new Thread(new Xc());//模拟两个车站在卖车票，竞争共同的线程资源 Xc1.start(); Thread Xc2 = new Thread(new Xc());//模拟两个车站在卖车票，竞争共同的线程资源 Xc2.start(); } } 通过代码，我们不难发现，在运行的过程中出现了错误，因为Xc1和Xc2各自都生成了100张车票，而车票没有共享，此时，我们需要将车票定义为静态变量，使得两线程在竞争售票的过程中，共享车票，于是，将常量定义为静态常量，用static修饰： public static int chepiao = 100; class Xc implements Runnable{ public static int chepiao = 100; public void run(){ while (true) { if(chepiao&gt;0){ System.out.println(&quot;第&quot; + Thread.currentThread().getName() + &quot;个车站正在卖出第&quot; + (101-chepiao) + &quot;张车票&quot;); --chepiao; }else{ break; } } } } public class XianCheng { public static void main(String [] args){ Thread Xc1 = new Thread(new Xc());//模拟两个车站在卖车票，竞争共同的线程资源 Xc1.start(); Thread Xc2 = new Thread(new Xc());//模拟两个车站在卖车票，竞争共同的线程资源 Xc2.start(); } } 但是很快的，我们又发现了新问题，因为线程在竞争的过程中，CPU的切换是非常快的，可能线程1正好执行完–maipiao的时候，线程已经切换到了线程2，此时–maipiao又再执行了一次，导致跳过了一张票没有卖出，或者，当线程1恰好正好将要执行–maipiao但还没执行的时候，线程已经切换到了线程2，此时因为线程1并没有进行–maipiao操作，线程2卖出了重复的同一张票以后，才执行了–maipiao，导致出现了同一张票重复销售的情况。 此时，我们需要引入线程锁的概念，以解决线程的同步问题。 第一种写法： class Xc implements Runnable{ public static int chepiao = 100; //synchronized的作用是，让它所管辖的代码部分，要么全部执行完，要么全部不执行，synchronized既可修饰代码块，又可以修饰函数 // 如果是锁整个方法，可以在方法内加锁，表达上比如public synchronized void run(){，但对于此案例，是两个线程之间竞争售票，因此不适宜锁起来整个方法 //如果synchronized是锁起来整个方法的，synchronized修饰函数不需要传入字符串参数，相当于默认是this public void run(){ while (true) { synchronized (&quot; &quot;) {//在需要加锁保证完整运行的代码块旁边加上synchronized (&quot; &quot;){}包裹代码，即可锁起来该部分代码，()内的字符串随意定义 if(chepiao&gt;0){ System.out.println(&quot;第&quot; + Thread.currentThread().getName() + &quot;个车站正在卖出第&quot; + (101-chepiao) + &quot;张车票&quot;); --chepiao; }else{ break; } } } } } public class XianCheng { public static void main(String [] args){ Thread Xc1 = new Thread(new Xc());//模拟两个车站在卖车票，竞争共同的线程资源 Xc1.start(); Thread Xc2 = new Thread(new Xc());//模拟两个车站在卖车票，竞争共同的线程资源 Xc2.start(); } } 第二种写法： class Xc implements Runnable{ public static int chepiao = 100; public static String str = new String(&quot;weimeig&quot;);//提取出来提高可维护性，同时定义为static静态变量，使得str是公共的 //如果不定义成static静态，则两个线程各自有各自的str，那么大家竞争的就不是同一个资源 public void run(){ while (true) { synchronized (str) {//若不定义为static静态，则两个线程的str是线程自己的，而不是公共的，因为这种写法，初始化的str写在了锁的外面 if(chepiao&gt;0){ System.out.println(&quot;第&quot; + Thread.currentThread().getName() + &quot;个车站正在卖出第&quot; + (101-chepiao) + &quot;张车票&quot;); --chepiao; }else{ break; } } } } } public class XianCheng { public static void main(String [] args){ Thread Xc1 = new Thread(new Xc());//模拟两个车站在卖车票，竞争共同的线程资源 Xc1.start(); Thread Xc2 = new Thread(new Xc());//模拟两个车站在卖车票，竞争共同的线程资源 Xc2.start(); } }","categories":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Java/"}]},{"title":"JAVA中的集合框架（ArrayList）","slug":"Java-ArrayList","date":"2015-04-13T10:46:56.000Z","updated":"2018-03-19T11:06:09.360Z","comments":true,"path":"2015/04/13/Java-ArrayList/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2015/04/13/Java-ArrayList/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 转帖请注明本文出自weimeig的博客（http://mp.blog.csdn.net/postedit/79533661），请尊重他人的辛勤劳动成果，谢谢 应朋友们反馈的JAVA基础薄弱的问题，决定出一套完整的JAVA基础教程，帮助大家复习，巩固JAVA基础，今天要讲的是JAVA中的集合框架。 /** * 学生类 * @author Administrator * */ public class Student { private String id; private String name; private Set course; private Student(String id,String name){ this.id = id; this.name = name; this.course = new HashSet(); } public String getId() { return id; } public void setId(String id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public Set getCourse() { return course; } public void setCourse(Set course) { this.course = course; } } /** * 课程类 * @author Administrator * */ public class Course { private String id; private String name; Course(String id,String name){ this.id=id; this.name=name; } public String getId() { return id; } public void setId(String id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } } 单个元素的插入 import java.util.ArrayList; import java.util.List; /** * 备选课程类 * @author Administrator * */ public class ListTest { /** * 用于存放备选课程的List */ public List coursesToSelect; public ListTest(){ this.coursesToSelect = new ArrayList(); } /** * 用于往coursesToSelect中添加备选课程 */ public void testAdd(){ Course cr1 = new Course(&quot;1&quot;,&quot;数据结构&quot;);//new一个Course类的数据类型 coursesToSelect.add(cr1);//所为一条数据插入List中 Course temp = (Course)coursesToSelect.get(0);//获取LIst中的第一条数据，课程存入集合都变成Object类型，取出时需要类型转换 System.out.println(&quot;添加了课程：&quot; + temp.getId() + temp.getName()); } public static void main(String [] args) { ListTest lt = new ListTest(); lt.testAdd(); } } 多个元素的同时插入数组的集合插入，由单个元素的add方法，变成addAll方法 import java.util.ArrayList; import java.util.Arrays; import java.util.List; /** * 备选课程类 * @author Administrator * */ public class ListTest { /** * 用于存放备选课程的List */ public List coursesToSelect; public ListTest(){ this.coursesToSelect = new ArrayList(); } /** * 用于往coursesToSelect中添加备选课程 */ public void testAdd(){ Course cr1 = new Course(&quot;1&quot;,&quot;数据结构&quot;);//new一个Course类的数据类型 coursesToSelect.add(cr1);//所为一条数据插入List中 Course temp = (Course)coursesToSelect.get(0);//获取LIst中的第一条数据 System.out.println(&quot;添加了课程：&quot; + temp.getId() + &quot;:&quot; + temp.getName()); Course cr2 = new Course(&quot;2&quot;,&quot;C语言&quot;); coursesToSelect.add(0, cr2); //两个参数的add方法，选择插入元素的位置 Course temp2 = (Course) coursesToSelect.get(0);//将元素插入到第一条 System.out.println(&quot;添加了课程：&quot; + temp2.getId() + &quot;:&quot; + temp2.getName());//观察打印的第一条的值 // 以下方法会抛出数组下标越界异常 // Course cr3 = new Course(&quot;3&quot;,&quot;test&quot;); // coursesToSelect.add(4, cr3); //插入位置大于容量，数组下标越界 /** * 多个元素的同时插入 */ Course[] course = {new Course(&quot;3&quot;,&quot;离散数学&quot;), new Course(&quot;4&quot;,&quot;汇编语言&quot;)}; coursesToSelect.addAll(Arrays.asList(course)); //添加数组用addAll Course temp3 = (Course) coursesToSelect.get(2); Course temp4 = (Course) coursesToSelect.get(3); System.out.println(&quot;添加了两门课程：&quot; + temp3.getId() + &quot;:&quot; + temp3.getName() + &quot;;&quot; + temp4.getId() + &quot;:&quot; + temp4.getName()); //按位置插入 Course[] course2 = {new Course(&quot;5&quot;,&quot;高等数学&quot;),new Course(&quot;6&quot;,&quot;大学英语&quot;)}; coursesToSelect.addAll(2, Arrays.asList(course2)); Course temp5 = (Course)coursesToSelect.get(2); Course temp6 = (Course)coursesToSelect.get(3); System.out.println(&quot;添加了两门课程：&quot; + temp5.getId() + &quot;:&quot; + temp5.getName() + &quot;;&quot; + temp6.getId() + &quot;:&quot; + temp6.getName()); } public static void main(String [] args) { ListTest lt = new ListTest(); lt.testAdd(); } } 查询元素的三种写法 /** * 取得List中的元素的方法 * @param args */ public void testGet(){ int size = coursesToSelect.size();//创建一个Size变量用来接收Lisr的长度 System.out.println(&quot;有如下课程可选：&quot;); for(int i=0;i&lt;coursesToSelect.size();i++){ Course cr = (Course) coursesToSelect.get(i); System.out.println(&quot;课程：&quot; + cr.getId() + &quot;:&quot; + cr.getName()); } } /** * 通过迭代器来遍历List * @param args */ public void testIterator(){ //通过集合的方法，取得迭代器的实例。 Iterator it = coursesToSelect.iterator(); System.out.println(&quot;有如下课程可选（通过迭代器访问）：&quot;); while (it.hasNext()) {//it.hasNext如果含有元素就返回真值 Course cr = (Course)it.next(); System.out.println(&quot;课程：&quot; + cr.getId() + &quot;:&quot; + cr.getName()); } } /** * 通过for each方法访问集合元素 * 迭代器的简便写法 * @param args */ public void testForEach(){ System.out.println(&quot;有如下课程可选（通过for each访问）：&quot;); for(Object obj:coursesToSelect){//去遍历coursesToSelect集合中的每一个元素，把它取出来作为Object的一个变量 //（当一个元素存入到集合中的时候，他的类型是被忽略了的，集合只是拿他当Object用），当取出来的时候也是一个Object，因此 Course cr =(Course)obj;//当他取出来后，需要做强转 System.out.println(&quot;课程：&quot; + cr.getId() + &quot;:&quot; + cr.getName()); } } main函数中调用 ListTest lt = new ListTest(); lt.testGet(); lt.testIterator(); lt.testForEach(); 修改元素 /** * 修改List中的元素 * @param args */ public void testModify(){ coursesToSelect.set(4, new Course(&quot;7&quot;,&quot;毛概&quot;));//设置4位置的元素为：7,毛概 } 删除元素 /** * 删除List中的元素 * @param args */ public void testRemove(){ // Course cr = (Course) coursesToSelect.get(4); // System.out.println(&quot;我是课程：&quot; + cr.getId() + &quot;:&quot; +cr.getName() + &quot;我即将被删除&quot;); // coursesToSelect.remove(cr); System.out.println(&quot;即将删除4位置上的课程！&quot;); coursesToSelect.remove(4); System.out.println(&quot;成功删除课程！&quot;); testForEach();//调用前面写的遍历方法遍历数据 /** * 同时删除多行时 */ // System.out.println(&quot;即将删除4位置和5位置上的课程！&quot;); // Course[] courses = {(Course) coursesToSelect.get(4),(Course) coursesToSelect.get(5)};//新建一个课程的数组将4位置和5位置的元素 // //加入到数组中 // coursesToSelect.removeAll(Arrays.asList(courses));///调用removeAll方法，通过asList工具类，把courses数组转化为集合作为参数传递进去 // testForEach();//调用前面写的遍历方法遍历数据 } main函数中调用 ListTest lt = new ListTest(); lt.testRemove(); 小节ListTest类完整代码 import java.util.ArrayList; import java.util.Arrays; import java.util.Iterator; import java.util.List; /** * 备选课程类 * @author Administrator * */ public class ListTest { /** * 用于存放备选课程的List */ public List coursesToSelect; public ListTest(){ this.coursesToSelect = new ArrayList(); } /** * 用于往coursesToSelect中添加备选课程 */ public void testAdd(){ Course cr1 = new Course(&quot;1&quot;,&quot;数据结构&quot;);//new一个Course类的数据类型 coursesToSelect.add(cr1);//所为一条数据插入List中 Course temp = (Course)coursesToSelect.get(0);//获取LIst中的第一条数据 System.out.println(&quot;添加了课程：&quot; + temp.getId() + &quot;:&quot; + temp.getName()); Course cr2 = new Course(&quot;2&quot;,&quot;C语言&quot;); coursesToSelect.add(0, cr2); //两个参数的add方法，选择插入元素的位置 Course temp2 = (Course) coursesToSelect.get(0);//将元素插入到第一条,对象存入集合都变成Object类型，取出时需要类型转换 System.out.println(&quot;添加了课程：&quot; + temp2.getId() + &quot;:&quot; + temp2.getName());//观察打印的第一条的值 coursesToSelect.add(cr1);//所为一条数据插入List中 Course temp0 = (Course)coursesToSelect.get(2);//获取LIst中的第一条数据 System.out.println(&quot;添加了课程：&quot; + temp0.getId() + &quot;:&quot; + temp0.getName()); // 以下方法会抛出数组下标越界异常 // Course cr3 = new Course(&quot;3&quot;,&quot;test&quot;); // coursesToSelect.add(4, cr3); //插入位置大于容量，数组下标越界 Course[] course = {new Course(&quot;3&quot;,&quot;离散数学&quot;), new Course(&quot;4&quot;,&quot;汇编语言&quot;)}; coursesToSelect.addAll(Arrays.asList(course)); //添加数组用addAll Course temp3 = (Course) coursesToSelect.get(3); Course temp4 = (Course) coursesToSelect.get(4); System.out.println(&quot;添加了两门课程：&quot; + temp3.getId() + &quot;:&quot; + temp3.getName() + &quot;;&quot; + temp4.getId() + &quot;:&quot; + temp4.getName()); //按位置插入 Course[] course2 = {new Course(&quot;5&quot;,&quot;高等数学&quot;),new Course(&quot;6&quot;,&quot;大学英语&quot;)}; coursesToSelect.addAll(2, Arrays.asList(course2)); Course temp5 = (Course)coursesToSelect.get(2); Course temp6 = (Course)coursesToSelect.get(3); System.out.println(&quot;添加了两门课程：&quot; + temp5.getId() + &quot;:&quot; + temp5.getName() + &quot;;&quot; + temp6.getId() + &quot;:&quot; + temp6.getName()); } /** * 取得List中的元素的方法 * @param args */ public void testGet(){ int size = coursesToSelect.size();//创建一个Size变量用来接收Lisr的长度 System.out.println(&quot;有如下课程可选：&quot;); for(int i=0;i&lt;coursesToSelect.size();i++){ Course cr = (Course) coursesToSelect.get(i); System.out.println(&quot;课程：&quot; + cr.getId() + &quot;:&quot; + cr.getName()); } } /** * 通过迭代器来遍历List * @param args */ public void testIterator(){ //通过集合的方法，取得迭代器的实例。 Iterator it = coursesToSelect.iterator(); System.out.println(&quot;有如下课程可选（通过迭代器访问）：&quot;); while (it.hasNext()) {//it.hasNext如果含有元素就返回真值 Course cr = (Course)it.next(); System.out.println(&quot;课程：&quot; + cr.getId() + &quot;:&quot; + cr.getName()); } } /** * 通过for each方法访问集合元素 * 迭代器的简便写法 * @param args */ public void testForEach(){ System.out.println(&quot;有如下课程可选（通过for each访问）：&quot;); for(Object obj:coursesToSelect){//去遍历coursesToSelect集合中的每一个元素，把它取出来作为Object的一个变量 //（当一个元素存入到集合中的时候，他的类型是被忽略了的，集合只是拿他当Object用），当取出来的时候也是一个Object，因此 Course cr =(Course)obj;//当他取出来后，需要做强转 System.out.println(&quot;课程：&quot; + cr.getId() + &quot;:&quot; + cr.getName()); } } /** * 修改List中的元素 * @param args */ public void testModify(){ coursesToSelect.set(4, new Course(&quot;7&quot;,&quot;毛概&quot;));//设置4位置的元素为：7,毛概 } /** * 删除List中的元素 * @param args */ public void testRemove(){ // Course cr = (Course) coursesToSelect.get(4); // System.out.println(&quot;我是课程：&quot; + cr.getId() + &quot;:&quot; +cr.getName() + &quot;我即将被删除&quot;); // coursesToSelect.remove(cr); System.out.println(&quot;即将删除4位置上的课程！&quot;); coursesToSelect.remove(4); System.out.println(&quot;成功删除课程！&quot;); testForEach();//调用前面写的遍历方法遍历数据 /** * 同时删除多行时 */ // System.out.println(&quot;即将删除4位置和5位置上的课程！&quot;); // Course[] courses = {(Course) coursesToSelect.get(4),(Course) coursesToSelect.get(5)};//新建一个课程的数组将4位置和5位置的元素 // //加入到数组中 // coursesToSelect.removeAll(Arrays.asList(courses));///调用removeAll方法，通过asList工具类，把courses数组转化为集合作为参数传递进去 // testForEach();//调用前面写的遍历方法遍历数据 } public static void main(String [] args) { ListTest lt = new ListTest(); lt.testAdd(); lt.testGet(); lt.testIterator(); lt.testForEach(); lt.testModify(); lt.testForEach(); lt.testRemove(); } } 那么，能否向集合中添加一些奇怪的元素呢？ /** * 往集合中添加一些奇怪的东西 * @param args */ public void testType(){ System.out.println(&quot;能否往List中添加一些奇怪的东西呢？&quot;); coursesToSelect.add(&quot;我不是课程，我只是一个无辜的字符串！！&quot;); } 调用 public static void main(String [] args) { ListTest lt = new ListTest(); lt.testAdd(); lt.testType(); lt.testForEach(); } 很明显，抛出了异常。 那么，有没有一种方法可以控制数据的类型呢？ 答案肯定是有的，那就是JAVA中的，泛型 下章泛型学习：http://blog.csdn.net/weimeig/article/details/79535182 伪代码助记 class TestList{ private List&lt;Course&gt; course; //构造函数初始化 public TestList(){ this.course = new ArrayList&lt;Course&gt;(); } //增加 public void add(){ course.add(new Course(&quot;1&quot;,&quot;课程&quot;)); } //删除 public void remove(){ course.remove(1); } //修改 public void set(){ course.set(&quot;1&quot;,new Course(&quot;1&quot;,&quot;课程&quot;)); } //查询 public void ForEach(){ // for(Object obj:course){ // Course cr = (Course)obj; // } for(Course cr:course){} } public static void main(String[] args){} }","categories":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Java/"}]},{"title":"抽象类","slug":"AbstractClass","date":"2015-03-20T10:12:55.000Z","updated":"2018-03-21T04:11:07.315Z","comments":true,"path":"2015/03/20/AbstractClass/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2015/03/20/AbstractClass/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 转帖请注明本文出自weimeig的博客（http://blog.csdn.net/weimeig/article/details/79498536），请尊重他人的辛勤劳动成果，谢谢 应朋友们反馈的JAVA基础薄弱的问题，决定出一套完整的JAVA基础教程，帮助大家复习，巩固JAVA基础，今天要讲的是抽象类。 /** *abstract是一个修饰符 *可以修饰方法，类 *1.当我们多个类存在相同的功能时，但是功能的主体不同，这时我们进行向上抽取 *只抽取功能的定义不抽取功能的主体 * * 抽象类的特点： * 1.抽象方法一定要在抽象类中 * 2.抽象类和抽象方法必须要被abstract关键字修饰 * 3.抽象的类是不能被创建对象，因为调用抽象的方法没意义 * 4.抽象类中的方法要被使用，必须由之类重写抽象类中的方法，然后创建之类对象来调用。 * 5.抽象类中可以定义非抽象的方法，有时我们需要此类不能被new关键字创建对象时， * 可以用abstract将此类变成抽象类 * 6.子类如果只重写一部分的抽象方法，那么该子类还是一个抽象类。如果抽象类的方法 * 要被使用，子类必须重写抽象类中的所有方法。 * * 值得注意：抽象类和普通的类没有太大的不同。 * 1.抽象类无法通过new关键字创建对象 * 2.抽象类里面可以有抽象的方法 */ abstract class Animal{ abstract void sing(); void show(){ System.out.println(&quot;你好&quot;); } } class Cat extends Animal{ void sing(){ System.out.println(&quot;喵喵唱歌&quot;); } } class Dog extends Animal{ void sing(){ System.out.println(&quot;汪汪唱歌&quot;); } } public class chouxianglei { public static void main(String[] args) { Animal a=new Dog();//Animal是抽象类不能new对象，但可以接收子类对象 a.sing(); } } 我们不难发现，不同的子类继承父类后，各自有不同的重写需求，那么父类中的方法突然变得没有了意义，这时候，我们可以将父类Animal中的 void show(){ System.out.println(&quot;你好&quot;); } 方法改为看不懂的抽象方法，abstract void sing();此时会报错，因为，抽象方法需要存在抽象类中， 所以，将类定义为abstract class Animal抽象类。当然，方法体中的abstract void sing()不加abstract， 编译的时候是会默认加上去的。","categories":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Java/"}]},{"title":"toString方法","slug":"Java-toString","date":"2015-03-19T09:40:25.000Z","updated":"2018-03-19T09:45:25.127Z","comments":true,"path":"2015/03/19/Java-toString/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2015/03/19/Java-toString/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 转帖请注明本文出自weimeig的博客（http://blog.csdn.net/weimeig/article/details/79497172），请尊重他人的辛勤劳动成果，谢谢 应朋友们反馈的JAVA基础薄弱的问题，决定出一套完整的JAVA基础教程，帮助大家复习，巩固JAVA基础，今天要讲的是toString方法。 public class toStringFangFa { public static void main(String []args){ System.out.println(new String(&quot;你好&quot;)); } } 我们不难发现，在这行代码中，我们找不到字符串的时候，直接new的一个String传你好进去，他可以正常打印运行，因为在java中，我们尽管没有调用toString方法，当他给我们默认的调用了，出现的效果和我们的 public class toStringFangFa { public static void main(String []args){ System.out.println(new String(&quot;你好&quot;).toString()); } } 是一样的。 好了，大家可以继续练习一下。 class Ca{ String name; int avg; public String toString(){ return &quot;我的名字&quot; + name + &quot;,我的年龄&quot; + avg; } } public class toStringFangFa { public static void main(String []args){ Ca ca = new Ca(); ca.name = &quot;张三&quot;; ca.avg = 18; System.out.println(ca); } }","categories":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Java/"}]},{"title":"OkHttp框架读书总结笔记","slug":"OkHttpReadingNotes","date":"2015-02-11T03:55:21.000Z","updated":"2018-03-18T04:32:48.958Z","comments":true,"path":"2015/02/11/OkHttpReadingNotes/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2015/02/11/OkHttpReadingNotes/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 转帖请注明本文出自weimeig的博客（http://blog.csdn.net/weimeig/article/details/78656734），请尊重他人的辛勤劳动成果，谢谢 一、添加依赖 build.gradle dependencies { compile &apos;com.squareup.okhttp3:okhttp:3.2.0&apos; compile &apos;com.squareup.okio:okio:1.7.0&apos; } 权限: &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt; HelloOkhttp import java.io.IOException; import okhttp3.OkHttpClient; import okhttp3.Request; import okhttp3.Response; /** * Created by Administrator on 2017/11/27. */ public class HelloOkhttp { public static void main(String [] args) throws IOException { OkHttpClient client = new OkHttpClient(); Request request = new Request.Builder(). url(&quot;http://www.baidu.com&quot;).build(); try { Response response = client.newCall(request).execute(); if (response.isSuccessful()) { System.out.println(response.body().string()); } } catch (IOException e) { e.printStackTrace(); } } } QueryHttp import java.io.IOException; import okhttp3.HttpUrl; import okhttp3.OkHttpClient; import okhttp3.Request; import okhttp3.Response; /** * Created by Administrator on 2017/11/27. */ public class QueryHttp { public static void main(String args[]) { OkHttpClient client = new OkHttpClient(); HttpUrl httpUrl = HttpUrl.parse(&quot;https://api.heweather.com/x3/weather&quot;). newBuilder(). addQueryParameter(&quot;city&quot;, &quot;beijing&quot;). addQueryParameter(&quot;key&quot;, &quot;d17ce22ec5404ed883e1cfcaca0ecaa7&quot;). build(); String url = httpUrl.toString(); System.out.println(httpUrl.toString()); Request request = new Request.Builder().url(url).build(); try { Response response = client.newCall(request).execute(); if (response.isSuccessful()) { System.out.println(response.body().string()); } } catch (IOException e) { e.printStackTrace(); } } } HeadHttp import java.io.IOException; import okhttp3.Headers; import okhttp3.OkHttpClient; import okhttp3.Request; import okhttp3.Response; /** * Created by Administrator on 2017/11/27. */ /** * 请求头 */ public class HeadHttp { public static void HadeHttp(String url){ OkHttpClient client =new OkHttpClient(); Request request = new Request.Builder().url(url). addHeader(&quot;User-Agent&quot;,&quot;from nate http&quot;).build(); try { Response response = client.newCall(request).execute(); if(response.isSuccessful()){ Headers headers = response.headers(); for(int i=0;i&lt;headers.size();i++){ System.out.println(headers.name(i)+&quot;:&quot;+headers.value(i)); } } } catch (IOException e) { e.printStackTrace(); } } public static void main(String []args){ HadeHttp(&quot;http://www.baidu.com&quot;); } } 同步和异步请求比较 import java.io.IOException; import okhttp3.Call; import okhttp3.Callback; import okhttp3.OkHttpClient; import okhttp3.Request; import okhttp3.Response; /** * Created by Administrator on 2017/11/27. */ /**同步 * */ public class AsyncHttp { public static void SendHttp(String url){ OkHttpClient client = new OkHttpClient(); Request request = new Request.Builder().url(url).build(); try { Response response = client.newCall(request).execute(); if (response.isSuccessful()){ System.out.println(response.body().string()); } } catch (IOException e) { e.printStackTrace(); } } /** *异步 * */ public static void SendAsyncHttp(String url){ System.out.println(Thread.currentThread().getId()); OkHttpClient client = new OkHttpClient(); Request request = new Request.Builder().url(url).build(); client.newCall(request).enqueue(new Callback() { @Override public void onFailure(Call call, IOException e) { } @Override public void onResponse(Call call, Response response) throws IOException { if (response.isSuccessful()){ System.out.println(Thread.currentThread().getId()); } } }); } public static void main(String [] args){ SendAsyncHttp(&quot;http://www.baidu.com&quot;); // SendHttp(&quot;http://www.baidu.com&quot;); } }","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"微信支付及支付宝支付集成","slug":"WeChatAlipayPayIntegr","date":"2014-12-11T04:19:15.000Z","updated":"2018-03-18T04:25:57.390Z","comments":true,"path":"2014/12/11/WeChatAlipayPayIntegr/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2014/12/11/WeChatAlipayPayIntegr/","excerpt":"","text":"文章转载自互联网 1.微信支付 1.微信官方的集成文档 2.微信官方资源下载 首先官方文档实在是没有看懂，里面有很多东西都没有提及到，反正当时我看的时候就没有看懂可能是能力有限吧！ 先说一下我们这边的需求吧，我们这边订单处理是在服务器，没有在app内进行，一些字段都是从服务器返回的，这里只要请求之后，唤起微信支付就算是完成了，还是很简单的一个操作，下面我们就一步一步往下说吧！集成步骤如下：1.首先就是导入最新的SDK，这个从微信官方资源下载处就可以下载（这里就不说了）2.添加必要的权限 &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt; &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot;/&gt; &lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot;/&gt; &lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot;/&gt; &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;/&gt; 3.创建一个wxapi的包并且创建一个WXEntryActivity类这里有几点要注意以下： 1.首先这个包必须在你项目的根目录下创建的，例如应用程序的包名为net.sourceforge.simcpux，则新添加的应该在net.sourceforge.simcpux.wxapi下面） 2.在AndroidManifest中添加相应的标签 &lt;activity android:name=&quot;.wxapi.WXEntryActivity&quot; android:configChanges=&quot;keyboardHidden|orientation|screenSize&quot; android:exported=&quot;true&quot; android:screenOrientation=&quot;portrait&quot; android:theme=&quot;@android:style/Theme.Translucent.NoTitleBar&quot;/&gt; 4.关于APPID存放问题 关于这个APPID的存放，因为做了分享，所以我就直接存放到本地了的静态字段中了，还有就是从服务器请求，其实从服务器请求我有一点我不太明白之后再说！5.创建一个WXPayEntryActivity类 创建的这个类我就直接放在wxapi中了，不知都放在别的地方会不会有什么问题，没有尝试过。这个类就是用来支付回调的类了。关于这个类有几点说明： 1.这个类是集成Activity的实现IWXAPIEventHandler接口的，别忘了在AndroidManifest注册，否则不走回调的！ &lt;activity android:name=&quot;.wxapi.WXPayEntryActivity&quot; android:exported=&quot;true&quot; android:launchMode=&quot;singleTop&quot;/&gt; 2.在onCreat()方法中要注册到微信，这里要注意这个是你微信成功签名的那个APPID private IWXAPI api; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); //这里面的APPID就是存放在本地的微信的ID api = WXAPIFactory.createWXAPI(this, Constants.ACCOUNT.APP_ID); api.handleIntent(getIntent(), this); } 3.在onResp(BaseResp resp)方法中处理回调数据，也就是处理回调失败啊，成功啊什么的！ @Override public void onResp(BaseResp resp) { Logger.e(&quot;WXPayEntryActivity回调微信支付的结果errCode = &quot; + resp.errCode); if (resp.getType() == ConstantsAPI.COMMAND_PAY_BY_WX) { int errCode = resp.errCode; if (errCode == -1) {/*支付失败*/ Toast.makeText(this, &quot;支付失败&quot;, Toast.LENGTH_LONG).show(); } else if (errCode == 0) {/*支付成功*/ Toast.makeText(this, &quot;支付成功&quot;, Toast.LENGTH_SHORT).show(); EventBusUtils.post(new EventBusWechatGoldBean()); } else if (errCode == -2) {/*取消支付*/ Toast.makeText(this, &quot;取消支付&quot;, Toast.LENGTH_LONG).show(); } finish(); } } 6.之后就可以在相应的地方从服务器获取相应的参数调用微信支付了 调用的代码如下： /** * 唤起微信充值界面 */ private void payWechat(WechatGoldBean wechatGoldBean) { PayReq req = new PayReq(); req.appId = wechatGoldBean.getAppid(); req.partnerId = wechatGoldBean.getPartnerid(); req.prepayId = wechatGoldBean.getPrepayid(); req.nonceStr = wechatGoldBean.getNoncestr(); req.timeStamp = wechatGoldBean.getTimestamp(); req.packageValue = &quot;Sign=WXPay&quot;; req.sign = wechatGoldBean.getSign(); IWXAPI api = WXAPIFactory.createWXAPI(mContext, wechatGoldBean.getAppid()); api.sendReq(req); } 这里WechatGoldBean是从服务器请求来的实体类，这里面封装了关于微信支付的所有订单信息，这样做的好处就是生成订单服务器做比较安全，第二也省去了自己的麻烦。到了这里基本上都能唤起微信支付了常见问题： 关于微信的签名要说明的问题：首先按照微信的签名的话，一般步骤都可以往下走，但是有一点需要注意就是签完名之后，如果你打包成正式版的话也就是releasea签名的话要用正式的包安装才能唤起微信，否则会出错的，如果要是想使用Dug签名的话，你要把签名后的keystore替换掉android studio的默认签名就可以使用了。关于微信支付能只能想到这么多了，基本上集成就这么多问题，有什么不懂得欢迎在下方留言，看到了我会第一时间回复！！！2.支付宝支付 1.支付宝官方集成文档2.支付宝官方资源下载 其实支付宝支付的话还是比较简单的按照Demo集成的话基本上没有什么问题就是导入几个类就可以了。 还是先说一下我们这边的需求，还是订单处理在服务器这边，没有在app内进行，一些字段都是从服务器返回的，这里只要请求之后，唤起支付宝支付就算完成了，比较简单，下面一步一步往下说吧！集成步骤如下：1.首先就是导入最新的SDK，这个从支付宝官方资源下载处就可以下载（这里就不说了）2.添加必要的权限 &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt; &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt; &lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt; &lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt; &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt; 3.在AndroidManifest中添加相应的标签 &lt;activity android:name=&quot;com.alipay.sdk.app.H5PayActivity&quot; android:configChanges=&quot;orientation|keyboardHidden|navigation&quot; android:exported=&quot;false&quot; android:screenOrientation=&quot;behind&quot; &gt; &lt;/activity&gt; &lt;activity android:name=&quot;com.alipay.sdk.auth.AuthActivity&quot; android:configChanges=&quot;orientation|keyboardHidden|navigation&quot; android:exported=&quot;false&quot; android:screenOrientation=&quot;behind&quot; &gt; &lt;/activity&gt; 4.支付接口调用 这里说明一下，支付宝调用的时候必须在异步线程中调用！切记 public void payAlipay(final ALipayGoldBean aLipayGoldBean) { Runnable payRunnable = new Runnable() { @Override public void run() { PayTask alipay = new PayTask((DiamondActivity) mContext); Map&lt;String, String&gt; result = alipay.payV2(aLipayGoldBean.getPayInfo(), true); Message msg = new Message(); msg.what = SDK_PAY_FLAG; msg.obj = result; mHandler.sendMessage(msg); } }; Thread payThread = new Thread(payRunnable); payThread.start(); } 这里说明一下：这个ALipayGoldBean是从服务器请求过来的，里面就一个payInfo参数，其实就是payV2()所需要的定单的信息(orderInfo)！5.支付结果的处理 官方文档上说有两种处理方式，但是作为APP我只按第一种处理方式进行的，第二种没有研究！ private Handler mHandler = new Handler() { @Override public void handleMessage(Message msg) { switch (msg.what) { case SDK_PAY_FLAG: @SuppressWarnings(&quot;unchecked&quot;) PayResult payResult = new PayResult((Map&lt;String, String&gt;) msg.obj); String resultStatus = payResult.getResultStatus(); // 判断resultStatus 为9000则代表支付成功 if (TextUtils.equals(resultStatus, &quot;9000&quot;)) {/*支付成功*/ Toast.makeText(mContext, &quot;支付成功&quot;, Toast.LENGTH_SHORT).show(); } else {/*支付失败*/ Toast.makeText(mContext, &quot;支付失败&quot;, Toast.LENGTH_SHORT).show(); } break; } } }; 这里有几点说明的问题：1.这个PayResult从Demo中直接复制过来就行，要不没有的；如果你不想复制，好的在下面： public class PayResult { private String resultStatus; private String result; private String memo; public PayResult(Map&lt;String, String&gt; rawResult) { if (rawResult == null) { return; } for (String key : rawResult.keySet()) { if (TextUtils.equals(key, &quot;resultStatus&quot;)) { resultStatus = rawResult.get(key); } else if (TextUtils.equals(key, &quot;result&quot;)) { result = rawResult.get(key); } else if (TextUtils.equals(key, &quot;memo&quot;)) { memo = rawResult.get(key); } } } @Override public String toString() { return &quot;resultStatus={&quot; + resultStatus + &quot;};memo={&quot; + memo + &quot;};result={&quot; + result + &quot;}&quot;; } /** * @return the resultStatus */ public String getResultStatus() { return resultStatus; } /** * @return the memo */ public String getMemo() { return memo; } /** * @return the result */ public String getResult() { return result; } } 2.关于Handler内存泄漏的问题，自己可以改的，如果改不了百度一下就可以了。至此支付宝支付就算集成完毕了，是不是很简单！作为小白的我们真的要多学习，多看别人的代码，学习这个东西就是这样，不论什么天才和小白，没有什么捷径可以走，只有不断的学习才能跟得上时代，不被淘汰！座右铭：只有自己强大才能无所畏惧！","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"Java接口回调，Android接口回调读书笔记","slug":"InterfaceCallback","date":"2014-05-13T04:04:35.000Z","updated":"2018-03-18T04:49:39.863Z","comments":true,"path":"2014/05/13/InterfaceCallback/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2014/05/13/InterfaceCallback/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 单看文章比较难理解，照着多敲几遍代码就理解了 回调就是A类中调用B类中的某个方法C，然后B类中反过来调用A类中的方法D，D这个方法就叫回调方法，这样子说你是不是有点晕晕的，其实我刚开始也是这样不理解，看了人家说比较经典的回调方式： Class A实现接口CallBack callback——背景1 class A中包含一个class B的引用b ——背景2 class B有一个参数为callback的方法f(CallBack callback) ——背景3 A的对象a调用B的方法 f(CallBack callback) ——A类调用B类的某个方法 C 然后b就可以在f(CallBack callback)方法中调用A的方法 ——B类调用A类的某个方法D 大家都喜欢用打电话的例子，好吧，为了跟上时代，我也用这个例子好了，我这个例子采用异步加回调 有一天小王遇到一个很难的问题，问题是“1 + 1 = ?”，就打电话问小李，小李一下子也不知道，就跟小王说，等我办完手上的事情，就去想想答案，小王也不会傻傻的拿着电话去等小李的答案吧，于是小王就对小李说，我还要去逛街，你知道了答案就打我电话告诉我，于是挂了电话，自己办自己的事情，过了一个小时，小李打了小王的电话，告诉他答案是2 /** * 这是一个回调接口 * @author xiaanming * */ public interface CallBack { /** * 这个是小李知道答案时要调用的函数告诉小王，也就是回调函数 * @param result 是答案 */ public void solve(String result); } /** * 这个是小王 * @author xiaanming * 实现了一个回调接口CallBack，相当于-----&gt;背景一 */ public class Wang implements CallBack { /** * 小李对象的引用 * 相当于-----&gt;背景二 */ private Li li; /** * 小王的构造方法，持有小李的引用 * @param li */ public Wang(Li li){ this.li = li; } /** * 小王通过这个方法去问小李的问题 * @param question 就是小王要问的问题,1 + 1 = ? */ public void askQuestion(final String question){ //这里用一个线程就是异步， new Thread(new Runnable() { @Override public void run() { /** * 小王调用小李中的方法，在这里注册回调接口 * 这就相当于A类调用B的方法C */ li.executeMessage(Wang.this, question); } }).start(); //小网问完问题挂掉电话就去干其他的事情了，诳街去了 play(); } public void play(){ System.out.println(&quot;我要逛街去了&quot;); } /** * 小李知道答案后调用此方法告诉小王，就是所谓的小王的回调方法 */ @Override public void solve(String result) { System.out.println(&quot;小李告诉小王的答案是---&gt;&quot; + result); } } /** * 这个就是小李啦 * @author xiaanming * */ public class Li { /** * 相当于B类有参数为CallBack callBack的f()----&gt;背景三 * @param callBack * @param question 小王问的问题 */ public void executeMessage(CallBack callBack, String question){ System.out.println(&quot;小王问的问题---&gt;&quot; + question); //模拟小李办自己的事情需要很长时间 for(int i=0; i&lt;10000;i++){ } /** * 小李办完自己的事情之后想到了答案是2 */ String result = &quot;答案是2&quot;; /** * 于是就打电话告诉小王，调用小王中的方法 * 这就相当于B类反过来调用A的方法D */ callBack.solve(result); } } /** * 测试类 * @author xiaanming * */ public class Test { public static void main(String[]args){ /** * new 一个小李 */ Li li = new Li(); /** * new 一个小王 */ Wang wang = new Wang(li); /** * 小王问小李问题 */ wang.askQuestion(&quot;1 + 1 = ?&quot;); } } 通过上面的那个例子你是不是差不多明白了回调机制呢，上面是一个异步回调，我们看看同步回调吧，onClick（）方法 现在来分析分析下Android View的点击方法onclick（）;我们知道onclick()是一个回调方法，当用户点击View就执行这个方法，我们用Button来举例好了 //这个是View的一个回调接口 /** * Interface definition for a callback to be invoked when a view is clicked. */ public interface OnClickListener { /** * Called when a view has been clicked. * * @param v The view that was clicked. */ void onClick(View v); } package com.example.demoactivity; import android.app.Activity; import android.os.Bundle; import android.view.View; import android.view.View.OnClickListener; import android.widget.Button; import android.widget.Toast; /** * 这个就相当于Class A * @author xiaanming * 实现了 OnClickListener接口----&gt;背景一 */ public class MainActivity extends Activity implements OnClickListener{ /** * Class A 包含Class B的引用-----&gt;背景二 */ private Button button; @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); button = (Button)findViewById(R.id.button1); /** * Class A 调用View的方法,而Button extends View-----&gt;A类调用B类的某个方法 C */ button.setOnClickListener(this); } /** * 用户点击Button时调用的回调函数，你可以做你要做的事 * 这里我做的是用Toast提示OnClick */ @Override public void onClick(View v) { Toast.makeText(getApplication(), &quot;OnClick&quot;, Toast.LENGTH_LONG).show(); } } 下面是View类的setOnClickListener方法，就相当于B类咯，只把关键代码贴出来 /** * 这个View就相当于B类 * @author xiaanming * */ public class View implements Drawable.Callback, KeyEvent.Callback, AccessibilityEventSource { /** * Listener used to dispatch click events. * This field should be made private, so it is hidden from the SDK. * {@hide} */ protected OnClickListener mOnClickListener; /** * setOnClickListener()的参数是OnClickListener接口------&gt;背景三 * Register a callback to be invoked when this view is clicked. If this view is not * clickable, it becomes clickable. * * @param l The callback that will run * * @see #setClickable(boolean) */ public void setOnClickListener(OnClickListener l) { if (!isClickable()) { setClickable(true); } mOnClickListener = l; } /** * Call this view&apos;s OnClickListener, if it is defined. * * @return True there was an assigned OnClickListener that was called, false * otherwise is returned. */ public boolean performClick() { sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED); if (mOnClickListener != null) { playSoundEffect(SoundEffectConstants.CLICK); //这个不就是相当于B类调用A类的某个方法D，这个D就是所谓的回调方法咯 mOnClickListener.onClick(this); return true; } return false; } } 这个例子就是Android典型的回调机制，看完这个你是不是更进一步的理解了回调机制呢？ 线程run()也是一个回调方法，当执行Thread的start（）方法就会回调这个run()方法，还有处理消息都比较经典等等 案例二、 接口回调简单理解就是：类A中调用B类的中方法C，而B又反过去调用A中的方法D，然后D称为A的回调方法。是不是心中有一万只草泥马在奔腾，到底说的是什么。感觉像是你中有我，我中有你，纠缠不清。举个通俗易懂的例子，比如顾客是A，厨师是B。面粉是接口Callback。然后面粉的吃法D是在顾客A的手中，厨师B有包子的做法C。现在需求是A有面粉，想吃包子，但是A是不会做包子，就需要去找厨师，让他调方法C做包子，A就把面粉Callback给了厨师，至于厨师怎么做，A不管，A只要你做好了给我一个结果（包子）就OK了。至于包子怎么吃，我是直接吃，还是蘸点醋吃，那是A的事了（A怎么吃的过程就是方法D里具体执行的代码）。下面结合一个简单的例子看就容易多了。首先是定义接口（面粉）： package com.example.interfacecallbackdemo; public interface Callback { //因为是一堆面粉，肯定是没法吃的，所以没有具体的方法体，俗称“吃法” public void D(String result); } 然后定义A类（客户）： package com.example.interfacecallbackdemo; public class A implements Callback{ /** * B类引用 */ private B b; public A(B b) { this.b = b; } /** * A类通过该方法调用B的方法C（可理解为找到厨师并将面粉给他）。 */ public void selectMenu(){ b.C(this); } /** * A类中的D方法，也称为A类的回调方法（厨师做好包子将包子（result）返回给顾客A） */ @Override public void D(String result) { System.out.print(result); } } 然后是B类： package com.example.interfacecallbackdemo; public class B { /** * B类的C方法（接受面粉Callback,然后开工做包子，做好后返回给客户A）。 */ public void C(Callback callback){ String result = &quot;2&quot;; callback.D(result); } } 再加上一个执行的对象，我是利用android中button调用的： package com.example.interfacecallbackdemo; import android.app.Activity; import android.os.Bundle; import android.view.Menu; import android.view.MenuItem; import android.view.View; import android.view.View.OnClickListener; import android.widget.Button; public class MainActivity extends Activity implements OnClickListener{ private A a; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); findViewById(R.id.btn_main) .setOnClickListener(this); a = new A(new B()); } @Override public void onClick(View v) { switch (v.getId()) { case R.id.btn_main: a.selectMenu(); break; default: break; } } } （ABCD分别对应什么自己脑补，很easy吧）前面说的是A 调用B中的方法C，B又反过来调用A中的方法D。在代码中我就直接用ABCD ,简单、直接、粗暴。但是，B类的C方法的参数不必一定要把Callback作为参数，如果C方法中没有这个参数，那在B类中一定要在其它地方把Callback接收进来。比如，我把B类稍微改动一下： package com.example.interfacecallbackdemo; public class B { private Callback callback; public B(Callback callback){ this.callback = callback; } /** * B类的C方法 */ public void C(){ String result = &quot;2&quot;; callback.D(result); } } 此时A类也要做相应的调整： package com.example.interfacecallbackdemo; import android.util.Log; public class A { /** * B类引用 */ private B b; /** * A类同过该方法调用B类的C方法 */ public void selectMenu(){ b = new B(new Callback() { @Override public void D(String result) { System.out.print(result); } }); b.C(); } } 呃，这个算是标准版的变异版，其实也是很简单的，毕竟这种可能是大家项目中实际中会见到而不至于弄不清楚，但是有一点，C方法中一定会有接口的实例对象调用其抽象方法。其实我们不需要按接口回调的定义去对比，重要的是理解其原理机制，只需记住，哪个类传递Callback实例对象过去的，就是我们所说的A，接受的就是B。接口回调在android中是非常常见的，典型的就是各种监听器了，如果去分析下源码，你就会发现跟上面得那个例子大同小异。","categories":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Java/"}]},{"title":"Retrofit框架读书总结笔记（一）","slug":"RetrofitReadNotesOne","date":"2014-05-11T03:55:21.000Z","updated":"2018-03-18T04:29:21.995Z","comments":true,"path":"2014/05/11/RetrofitReadNotesOne/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2014/05/11/RetrofitReadNotesOne/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 转帖请注明本文出自weimeig的博客（http://blog.csdn.net/weimeig/article/details/78656178），请尊重他人的辛勤劳动成果，谢谢 一、添加依赖 build.gradle dependencies { compile &apos;com.squareup.retrofit2:retrofit:2.0.2&apos; // Retrofit库 compile &apos;com.squareup.okhttp3:okhttp:3.1.2&apos; // Okhttp库 } 点击右上角Sync Now 二、 （1）RestService类 import java.util.WeakHashMap; import okhttp3.MultipartBody; import okhttp3.RequestBody; import okhttp3.ResponseBody; import retrofit2.Call; import retrofit2.http.Body; import retrofit2.http.DELETE; import retrofit2.http.FieldMap; import retrofit2.http.FormUrlEncoded; import retrofit2.http.GET; import retrofit2.http.Multipart; import retrofit2.http.POST; import retrofit2.http.PUT; import retrofit2.http.Part; import retrofit2.http.QueryMap; import retrofit2.http.Streaming; import retrofit2.http.Url; /** * Created by Administrator on 2017/11/28. */ public interface RestService { @GET Call&lt;String&gt; get(@Url String url, @QueryMap WeakHashMap&lt;String, Object&gt; params); @FormUrlEncoded @POST Call&lt;String&gt; post(@Url String url, @FieldMap WeakHashMap&lt;String, Object&gt; params); @POST Call&lt;String&gt; postRaw(@Url String url, @Body RequestBody body); @FormUrlEncoded @PUT Call&lt;String&gt; put(@Url String url, @FieldMap WeakHashMap&lt;String, Object&gt; params); @PUT Call&lt;String&gt; putRaw(@Url String url, @Body RequestBody body); @DELETE Call&lt;String&gt; delete(@Url String url, @QueryMap WeakHashMap&lt;String, Object&gt; params); @Streaming @GET Call&lt;ResponseBody&gt; download(@Url String url, @QueryMap WeakHashMap&lt;String, Object&gt; params); @Multipart @POST Call&lt;String&gt; upload(@Url String url, @Part MultipartBody.Part file); }","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"AndroidStudio导入网上下载的代码慢及AndroidStudio不提示代码的解决方法","slug":"ASImportCodeNotPrompt","date":"2014-03-18T04:01:25.000Z","updated":"2018-06-09T08:20:38.654Z","comments":true,"path":"2014/03/18/ASImportCodeNotPrompt/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2014/03/18/ASImportCodeNotPrompt/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 转帖请注明本文出自weimeig的博客（http://blog.csdn.net/weimeig/article/details/78854345），请尊重他人的辛勤劳动成果，谢谢 当出现AndroidStudio导入网上下载的代码慢及AndroidStudio不提示代码时，多数是因为Google被墙，导致gradle无法更新下来。 解决的方法是，先在本地创建一个Android项目，然后找到 随后再找到 完成这两步的目的是，通过找到本地的gradle配置，将网上下载的不同配置的项目的gradle配置改成读本地配置，来解决Google被墙无法更新网上可行版本的问题。通常设置完这两个地方，再点击一下AndroidStudio上方工具栏里的BuiId下的Clean Project ，结束后点击RebuiId Project,然后再点击一下这个按钮， 同步一下，问题就可以解决了 一般来说，网上下载的项目更新慢，或编译器无代码提示，都是因为这个原因引起。","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"Android第三方分享集成","slug":"AndroidThirdShare","date":"2014-03-18T03:55:21.000Z","updated":"2018-03-18T04:00:49.647Z","comments":true,"path":"2014/03/18/AndroidThirdShare/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2014/03/18/AndroidThirdShare/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 转帖请注明本文出自weimeig的博客（http://blog.csdn.net/weimeig/article/details/78818943），请尊重他人的辛勤劳动成果，谢谢 一、环境集成 二、调用方法 一、环境集成 请看我的另一篇文章，里面详尽的介绍了整个集成的流程。分享只是在那个前提下多写一个分享的方法。 文章链接：http://blog.csdn.net/weimeig/article/details/78818085 二、调用方法 `/** * 第三方分享方法 * Created by weimei on 2017/12/16. * Email:ucvs@qq.com */ public void share(){ OnekeyShare oks = new OnekeyShare(); //关闭sso授权 oks.disableSSOWhenAuthorize(); // 分享时Notification的图标和文字 2.5.9以后的版本不 调用此方法 //oks.setNotification(R.drawable.ic_launcher, getString(R.string.app_name)); // title标题，印象笔记、邮箱、信息、微信、人人网和QQ空间使用 oks.setTitle(&quot;分享&quot;); // titleUrl是标题的网络链接，仅在人人网和QQ空间使用 oks.setTitleUrl(&quot;http://blog.csdn.net/weimeig&quot;); // text是分享文本，所有平台都需要这个字段 oks.setText(&quot;我是分享文本&quot;); // imagePath是图片的本地路径，Linked-In以外的平台都支持此参数 oks.setImageUrl(&quot;http://www.ld12.com/upimg358/20160130/23120952396496.jpg&quot;);//确保SDcard下面存在此张图片 // url仅在微信（包括好友和朋友圈）中使用 oks.setUrl(&quot;http://blog.csdn.net/weimeig&quot;); // comment是我对这条分享的评论，仅在人人网和QQ空间使用 oks.setComment(&quot;我是测试评论文本&quot;); // site是分享此内容的网站名称，仅在QQ空间使用 oks.setSite(getString(R.string.app_name)); // siteUrl是分享此内容的网站地址，仅在QQ空间使用 oks.setSiteUrl(&quot;http://blog.csdn.net/weimeig&quot;); oks.setCallback(new PlatformActionListener() { @Override public void onComplete(Platform platform, int i, HashMap&lt;String, Object&gt; hashMap) { /** * 不得到优惠券 */ //分享成功逻辑在这里处理 } @Override public void onError(Platform platform, int i, Throwable throwable) { //分享失败逻辑在这里处理 } @Override public void onCancel(Platform platform, int i) { //分享取消逻辑在这里处理 } }); // 启动分享GUI oks.show(this); }` 调用时候，在调用的地方使用 share(); 即可 如果分享的图标和渠道，不想要那么多，在项目下的app文件夹下的libs文件夹内删除对应的jar包即可。 例如不想要微信分享，直接删除ShareSDK-Wechat-Favorite-3.1.2.jar这个jar包，分享的时候就没有这个图标和对应的分享渠道了。 项目Demo下载 http://download.csdn.net/download/weimeig/10161093","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]},{"title":"Android第三方登录集成","slug":"AndroidThirdLogin","date":"2014-03-16T19:40:19.000Z","updated":"2018-06-09T08:19:21.480Z","comments":true,"path":"2014/03/17/AndroidThirdLogin/","link":"","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/2014/03/17/AndroidThirdLogin/","excerpt":"","text":"原CSDN博客已弃用，文章会逐渐迁移过来。 转帖请注明本文出自weimeig的博客（http://blog.csdn.net/weimeig/article/details/78818085）， 请尊重他人的辛勤劳动成果，谢谢 ShareSDK集成 一、集成 二、第三方开发平台注册 三、项目中使用 一、集成 到mob.com下载ShareSDK，选择要集成的功能并下载，下载好后，解压，并点击QuickIntegrater.rar生成需要功能，得到Sample文件夹，生成时候记得填写项目包名才点击生成，不然会报错。 （1）将Sample文件夹的libs文件夹里的jar包复制到项目下的app文件夹下的libs文件夹内。 （2）res文件夹内的文件，不做任何改名更改，复制到项目下的app文件夹下的res文件夹内。 （3）将ShareSDK.xml文件复制到项目下的app文件夹下的src下的main文件夹下的assets文件夹中，如果没有这个文件夹则创建一个。 （4）将src文件夹内复制到项目下的app文件夹下的src下的main文件夹下的java文件夹中，与自己原包名项目并列。 （5）更改AndroidManifest.xml文件内应用权限，照着官方文档填写即可，或者下载本文提供的demo，从demo中复制AndroidManifest.xml文件内权限到自己的项目 ( 6 )AndroidManifest.xml文件内设置您从Mob开发者后台中得到的Appkey和AppSecret，如 此时如果有地方报红，点击AndroidStudio上方工具栏里的BuiId下的Clean Project ，结束后点击RebuiId Project,然后再点击一下这个按钮， 原因是新引入的包需要同步一下，就不报红了。 集成完成。 二、第三方开发平台注册 如需要集成第三方登录是QQ、微信、微博。则分别到对应的第三方开放平台注册账号，如微信是微信第三方开放平台，在平台选择开启登录功能，然后填写完应用相关信息后，得到AppId和AppSecret将两者保存下来，一会第三步要用到。这里需要注意的是，平台填写的应用信息中，包名和应用签名，要和app对应。最后面附上怎么查看应用签名的方法。 特别注明：新浪微博的话，还需要在开放平台里选择回调接口地址，在开放平台应用信息附近找到OAuth2.0 授权设置编辑，设置微博回调地址。 比如官方默认的回调地址（默认的也可以使用）： 授权回调页：http://sns.whalecloud.com/sina2/callback取消授权回调页：http://sns.whalecloud.com/sina2/callback 三、项目中使用 （1）将你在第三方开发平台申请到的AppId和AppSecret填写到src下的main文件夹下的assets文件夹内的ShareSDK.xml文件中，替换掉mob提供的初始的。微博的话，还需要在这个文件里面的微博的配置里，设置RedirectUrl这个参数，微博官方默认的是 RedirectUrl=”http://sns.whalecloud.com/sina2/callback&quot; 如果你申请开发平台时用了默认的，可以设置为这个 （2）第三方登录的方法 `/** * 第三方登录方法 * Created by weimei on 2017/12/16. * Email:ucvs@qq.com */ private void thirdLogin(String platformName,final String backType) { Platform wechat = ShareSDK.getPlatform(platformName); wechat.SSOSetting(false); //设置false表示使用SSO授权方式 if(wechat.isAuthValid()){ wechat.removeAccount(true); } wechat.setPlatformActionListener(new PlatformActionListener() { @Override public void onComplete(Platform platform, int i, HashMap&lt;String, Object&gt; hashMap) { Log.d(TAG, &quot;onComplete: &quot;+i+new Gson().toJson(hashMap)); if (i == Platform.ACTION_USER_INFOR) { final PlatformDb platDB = platform.getDb();//获取数平台数据DB //通过DB获取各种数据 platDB.getToken(); platDB.getUserGender(); platDB.getUserIcon(); platDB.getUserId(); platDB.getUserName(); Log.d(TAG, &quot;onComplete: &quot;+ platDB.getToken()+&quot;-&quot;+ platDB.getUserId()+&quot;-&quot;+ platDB.getUserName()); runOnUiThread(new Runnable() { @Override public void run() { // platDB.getUserId()是唯一的 //这里写你的业务逻辑，如网络请求 // mPresenter.trilateralLogin(backType,platDB.getUserId(),platDB.getUserName(), // platDB.getUserIcon(),platDB.getUserGender(),LoginActivity.this); } }); } } @Override public void onError(Platform platform, int i, Throwable throwable) { Log.d(TAG, &quot;onError: &quot;+throwable.toString()); } @Override public void onCancel(Platform platform, int i) { /** * 给用户取消的提示 */ } }); // 设置分享事件回调 wechat.authorize();//单独授权 wechat.showUser(null); }` 然后在需要使用第三方登录的地方调用该方法即可 如果此时报红，则用第一步教的那个方法，同步一下，就不报红了。 此时 QQ调用时，如： thirdLogin(QQ.NAME,&quot;AndroidQQ&quot;); 微信调用时，如： thirdLogin(Wechat.NAME,&quot;AndroidWechat&quot;); 微博调用时，如： thirdLogin(SinaWeibo.NAME,&quot;Androidweibo&quot;); 其中第一个参数的，如：QQ.NAME，是第三方规定的，不可随意更改，第二个参数，是来源，如果你后台的url不需要这个参数，直接删除即可，同时也在thirdLogin方法里面删除即可。 附：查看应用签名的方法。 用密钥打包apk，打包的时候，选择生成release版本，切记不要生成debug版本。 然后安装到手机中。 同时安装下面提供的这个apk。打开这个apk，输入你的应用包名，点击生成，生成的这个就是你的安卓签名。 注意这个是要用你发布app的那个密钥去生成apk，并且输入的包名和你发布的app的包名一致，满足这两个要求前提下，才能生成一致的安卓签名。 安卓签名生成软件 http://download.csdn.net/download/weimeig/10161075 项目Demo下载 http://download.csdn.net/download/weimeig/10161093","categories":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=542616848/tags/Android/"}]}]}